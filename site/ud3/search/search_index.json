{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Inici","text":"<p>Una de les tasques habituals quan desenvolupem aplicacions inform\u00e0tiques \u00e9s el control de versions, que cobra import\u00e0ncia sobretot quan treballem amb equips de persones.</p> <p>Un sistema de control de versions (SCV) ens permet gestionar diferents versions dels arxius, registrar els canvis al llarg del temps, i evitar errors com sobreescriptures. \u00c9s \u00fatil sobretot per a fitxers de text pla, com el codi font o llenguatges de marques.</p>"},{"location":"#resultats-daprenentatge","title":"Resultats d'aprenentatge","text":"<ul> <li>RA4. Optimitza codi emprant les eines disponibles en l'entorn de desenvolupament.</li> </ul>"},{"location":"#criteris-davaluacio","title":"Criteris d'avaluaci\u00f3","text":"<ul> <li>RA4.f) S'ha realitzat el control de versions integrat en l'entorn de desenvolupament.</li> <li>RA4.h) S'han utilitzat repositoris remots per al desenvolupament de codi col\u00b7laboratiu.</li> <li>RA4.i) S'han utilitzat eines per a la integraci\u00f3 cont\u00ednua del codi.</li> </ul> <p>Comencem!</p>"},{"location":"1.intro/","title":"Sistemes de control de versions","text":"<p>Quan realitzem qualsevol projecte o treball, ens sorgeix la necessitat de gestionar diferents versions dels fitxers amb la intenci\u00f3 de poder controlar els canvis que fem durant el seu desenvolupament.</p> <p>Existen moltes formes de dur a terme un control de versions, com guardar diverses c\u00f2pies d'un mateix document juntament amb un n\u00famero de versi\u00f3, la data de modificaci\u00f3 o un text explicatiu. Tot aix\u00f2 ens pot portar a cometre certs errors, com ara l'edici\u00f3 de versions incorrectes o la sobreescriptura per error d'algun recurs.</p> <p>Amb la finalitat de gestionar les diferents versions dels fitxers d'un projecte, com podria ser el codi font o la documentaci\u00f3, apareixen els sistemes de control de versions, que ens permeten registrar els canvis al llarg del temps.</p>"},{"location":"1.intro/#sistemes-de-control-de-versions","title":"Sistemes de control de versions","text":"<p>Podem definir un sistema de control de versions com:</p> <p>Un sistema que registra els canvis produ\u00efts en un conjunt de fitxers que formen part d'un projecte al llarg del temps, de manera que, en qualsevol moment, podem tornar a una versi\u00f3 anterior, veure els canvis realitzats sobre determinats fitxers o qui ha fet quins canvis, entre altres funcionalitats.</p> <p>Els sistemes de control de versions (SCV), en angl\u00e8s Version Control Systems (VCS), o tamb\u00e9 coneguts com Source Control Management (SCM) quan s'apliquen a codi font, ens permeten prendre instant\u00e0nies dels nostres projectes, tamb\u00e9 conegudes com a commits, que s'emmagatzemaran en una base de dades. Gr\u00e0cies a aquestes instant\u00e0nies, podrem revertir fitxers a un estat previ (tornar a una instant\u00e0nia anterior), comparar els canvis realitzats entre dues instant\u00e0nies o veure qui ha realitzat determinats canvis en el codi.</p> <p>Aquests sistemes seran \u00fatils per gestionar diferents versions de fitxers de qualsevol tipus, encara que ofereixen tota la seua pot\u00e8ncia quan es tracta de fitxers basats en text pla, com pot ser el codi font o llenguatges de marques, ja que basen part de la seua funcionalitat en la comparaci\u00f3 de les l\u00ednies que formen els arxius en mode text.</p>"},{"location":"1.intro/#tipus-de-sistemes-de-control-de-versions","title":"Tipus de sistemes de control de versions","text":"<p>Els primers sistemes de control de versions van apar\u00e9ixer en la d\u00e8cada dels 70 del segle passat. Amb el temps, han anat guanyant en complexitat i funcionalitat. Principalment, existeixen tres tipus de sistemes de control de versions: local, centralitzat i distribu\u00eft.</p>"},{"location":"1.intro/#cas-practic-1-lordre-diff","title":"Cas Pr\u00e0ctic 1. L'ordre <code>diff</code>","text":"<p>Com hem comentat anteriorment, els sistemes de control de versions s\u00f3n molt potents i \u00fatils quan treballem amb fitxers de text. Aix\u00f2 es deu a l'\u00fas intern de l'ordre diff per comprovar les difer\u00e8ncies l\u00ednia per l\u00ednia entre dos fitxers d'aquest tipus.</p> <p>Usuaris de Windows</p> <p>Aquest cas pr\u00e0ctic est\u00e0 pensat per a la seua realitzaci\u00f3 en sistemes GNU/Linux basats en Debian/Ubuntu.</p> <p>Si treballeu amb Windows 10 o superior, podeu activar la terminal de Linux en Windows gr\u00e0cies al subsistema de Windows per a Linux (WSL 2).</p> <p>Pots seguir els seg\u00fcents enlla\u00e7os:</p> <ul> <li>Instal\u00b7laci\u00f3 WSL en Windows 10</li> <li>Refer\u00e8ncia WSL</li> <li>Activar la terminal de Linux en Windows 10</li> </ul>"},{"location":"1.intro/#pas-1-creacio-dels-fitxers-de-base","title":"Pas 1. Creaci\u00f3 dels fitxers de base","text":"<p>Comencem amb un petit exemple. Creem dos fitxers de text (per exemple amb Visual Studio Code) amb el seg\u00fcent contingut:</p> <p>Fitxer projecte1.md</p> <pre><code># Projecte d'Entorns de Desenvolupament\n\nAquesta \u00e9s la primera versi\u00f3 del document per al nostre projecte d'Entorns de Desenvolupament.\n</code></pre> <p>Fitxer projecte2.md</p> <pre><code># Projecte d'Entorns de Desenvolupament\n\nAquesta \u00e9s la segona versi\u00f3 del document per al nostre projecte d'Entorns de Desenvolupament.\n\nA m\u00e9s de la modificaci\u00f3 de l\u00ednia de dalt, afegirem una nova l\u00ednia.\n</code></pre>"},{"location":"1.intro/#pas-2-us-de-diff","title":"Pas 2. \u00das de diff","text":"<p>Ara utilitzarem l'ordre diff per veure les difer\u00e8ncies:</p> <p>Des d'una terminal en el mateix directori on tenim guardats els fitxers, escrivim la seg\u00fcent l\u00ednia (el <code>$</code> \u00e9s el prompt del sistema, no cal escriure-ho) i premem intro:</p> <pre><code>$ diff projecte1.md projecte2.md\n</code></pre> <p>El resultat obtingut \u00e9s el seg\u00fcent:</p> <pre><code>3c3,5\n&lt; Aquesta \u00e9s la primera versi\u00f3 del document per al nostre projecte d'Entorns de Desenvolupament.\n---\n&gt; Aquesta \u00e9s la segona versi\u00f3 del document per al nostre projecte d'Entorns de Desenvolupament.\n&gt; \n&gt; A m\u00e9s de la modificaci\u00f3 de l\u00ednia de dalt, afegirem una nova l\u00ednia.\n</code></pre> <p>Analitzem el resultat. L'ordre diff ens mostra les difer\u00e8ncies detectades per blocs amb el seg\u00fcent format:</p> <pre><code>canvis\n&lt; L\u00ednies del fitxer 1\n---\n&gt; L\u00ednies del fitxer 2\n</code></pre> <p>\u00c9s a dir, en la primera l\u00ednia ens indica els canvis detectats, despr\u00e9s, comen\u00e7ant amb el s\u00edmbol <code>&lt;</code> (podem associar-ho mnemot\u00e8cnicament amb que assenyala al fitxer de l'esquerra), ens indica les l\u00ednies del primer fitxer que difereixen. A aix\u00f2 li segueix una l\u00ednia de separaci\u00f3 (<code>---</code>) i, seguidament, precedides del s\u00edmbol <code>&gt;</code>, les l\u00ednies del segon fitxer que varien.</p> <p>En el nostre cas, la primera l\u00ednia indica els canvis (<code>3c3,5</code>). Amb aix\u00f2 ens indica que la l\u00ednia 3 ha canviat (<code>3c3</code>) i que, a m\u00e9s, s'ha afegit una nova l\u00ednia en la l\u00ednia 5 (<code>5</code>). Seguidament, ens mostra les l\u00ednies que difereixen del primer document i, despr\u00e9s, les del segon.</p> <p>Prova ara a comparar dos fitxers que no siguen de text, per exemple, dues imatges o dos fitxers comprimits. El resultat ser\u00e0 semblant a aix\u00f2 (ac\u00ed, per exemple, hem utilitzat dos fitxers comprimits):</p> <pre><code>$ diff fitxer1.tar.gz fitxer2.tar.gz\n</code></pre> <pre><code>Binary files fitxer1.tar.gz and fitxer2.tar.gz differ\n</code></pre> <p>\u00c9s a dir, ens indica que hi ha canvis, per\u00f2 no \u00e9s capa\u00e7 de dir-nos quins han sigut aquests canvis.</p>"},{"location":"2.scv_local/","title":"2. Sistemes control de versions locals","text":""},{"location":"2.scv_local/#sistemes-de-control-de-versions-local","title":"Sistemes de control de versions local","text":"<p>Els sistemes de control de versions locals foren els primers a apar\u00e9ixer, i el seu funcionament \u00e9s bastant senzill: per a les diferents versions guardem les difer\u00e8ncies que existeixen entre els fitxers de manera que, per a obtindre una versi\u00f3 qualsevol, es calculen les difer\u00e8ncies sobre el fitxer base.</p> <p>Podem veure aquest proc\u00e9s de manera gr\u00e0fica com segueix:</p> <p></p> <p>Com veiem, en un primer moment es crea una instant\u00e0nia d'un fitxer o conjunt de fitxers en el nostre equip local (versi\u00f3 1). Posteriorment, es realitzen canvis i es genera una altra instant\u00e0nia. En aquest moment, el SCV guarda les difer\u00e8ncies entre aquesta segona instant\u00e0nia i la primera, de manera que, des d'aquesta segona versi\u00f3, podem tornar a la primera revertint aquests canvis. Finalment, es crea una tercera instant\u00e0nia guardant tamb\u00e9 les difer\u00e8ncies respecte a la segona en la base de dades del SCV.</p>"},{"location":"2.scv_local/#el-scv-rcs","title":"El SCV RCS","text":"<p>En aquest apartat aprofundirem en el sistema de control de versions de tipus local RCS del projecte GNU (https://www.gnu.org/software/rcs/).</p>"},{"location":"2.scv_local/#pas-1-installacio","title":"Pas 1. Instal\u00b7laci\u00f3","text":"<p>Per instal\u00b7lar els paquets de rcs en Debian/Ubuntu i derivats, utilitzarem l'eina de l\u00ednia d'ordres apt. Com sempre, en primer lloc actualitzem la llista de paquets:</p> <pre><code>$ sudo apt update\n</code></pre> <p>I ara instal\u00b7lem els paquets rcs i rcs-blame:</p> <pre><code>$ sudo apt install rcs rcs-blame\n</code></pre> <p>Una vegada instal\u00b7lats, comen\u00e7arem amb el control de versions.</p>"},{"location":"2.scv_local/#pas-2-preparacio-del-directori-de-treball","title":"Pas 2. Preparaci\u00f3 del directori de treball","text":"<p>Creem un directori de treball anomenat, per exemple, projecteExt1 i dins d'ell un fitxer que anomenarem fitxer.md amb el seg\u00fcent contingut:</p> <pre><code># Entorns de desenvolupament\n\nAquesta \u00e9s la primera versi\u00f3 del document per treballar el control de versions.\n</code></pre> <p>El guardem i eixim de l'editor. Si fem un <code>ls -l</code> en aquest directori, veurem que disposem dels seg\u00fcents permisos:</p> <pre><code>$ ls -l\ntotal 4\n-rw-rw-r-- 1 dam dam 20 Jun 20 07:30 fitxer.md \n</code></pre> <p>La cadena <code>-rw-rw-r--</code> representa els permisos d'acc\u00e9s al fitxer. Aix\u00f2 indica que tant l'usuari propietari (els tres primers d\u00edgits) com els usuaris del grup al qual pertany (els tres d\u00edgits seg\u00fcents) tenen permisos de lectura (r) i d'escriptura (w), per\u00f2 no d'execuci\u00f3 (ja que es tracta d'un fitxer no executable). La resta d'usuaris del sistema (els tres \u00faltims d\u00edgits) nom\u00e9s tindran permisos de lectura (r--).</p>"},{"location":"2.scv_local/#pas-3-registrant-contingut-en-el-scv","title":"Pas 3. Registrant contingut en el SCV","text":"<p>Per dur el control de versions sobre el fitxer que hem creat, l'hem de registrar (check-in) en el sistema de control de versions. Per a aix\u00f2, utilitzarem l'ordre ci de la seg\u00fcent manera. Fixa't que ens demanar\u00e0 una descripci\u00f3 per a aquest check-in. Aquesta descripci\u00f3 podr\u00e0 tindre diverses l\u00ednies, de manera que, per indicar el final de la descripci\u00f3, utilitzarem una l\u00ednia amb un \u00fanic punt.</p> <pre><code>$ ci -u fitxer.md\nfitxer.mdv  &lt;--  fitxer.md\nenter description terminated with single '.' or end of file:\nNOTE: This is NOT the log message!\n&gt;&gt; versi\u00f3 inicial del nostre fitxer\n&gt;&gt; .\ninitial revision: 1.1\ndone\n</code></pre> <p>Amb aquesta ordre ci (check-in) hem registrat el fitxer sota el control de versions. Si veiem ara el contingut del directori, podem fer un parell d'observacions:</p> <pre><code>$ ls -l\ntotal 8\n-r--r--r-- 1 dam dam 196 Jun 20 08:10 fitxer.md\n-r--r--r-- 1 dam dam 413 Jun 20 08:10 fitxer.mdv\n</code></pre> <p>En primer lloc, s'ha creat un nou fitxer anomenat fitxer.mdv, que \u00e9s el que porta el control de versions del nostre fitxer (observa que aix\u00f2 se'ns indica en la primera l\u00ednia que ens mostra quan fem el check-in). Si el directori en el qual estem cont\u00e9 una carpeta anomenada RCS, aquest fitxer es crear\u00e0 dins d'ella.</p> <p>A m\u00e9s, tots dos fitxers tenen ara \u00fanicament permisos de lectura (r). Per defecte, RCS elimina el fitxer original, deixant \u00fanicament el fitxer del control de versions. En utilitzar l'opci\u00f3 -u, li indiquem a RCS que no esborre el fitxer original, encara que aquest ara no tindr\u00e0 permisos d'escriptura per evitar que modifiquem la instant\u00e0nia que hem generat.</p>"},{"location":"2.scv_local/#pas-4-realitzant-canvis-checkout","title":"Pas 4. Realitzant canvis. Checkout","text":"<p>Una vegada tenim el fitxer sota el control de versions, cada vegada que vulguem fer una modificaci\u00f3 haurem de fer un checkout. Per a aix\u00f2, utilitzem l'ordre co de la seg\u00fcent manera:</p> <pre><code>$ co -l fitxer.md \nfitxer.mdv  --&gt;  fitxer.md\nrevision 1.1 (locked)\ndone\n</code></pre> <p>Com podem veure, ara s'ha generat el fitxer fitxer.md a partir del fitxer de canvis fitxer.mdv. A m\u00e9s, si veiem el contingut del directori:</p> <pre><code>$ ls -l\ntotal 8\n-rw-r--r-- 1 dam dam 196 Jun 20 08:32 fitxer.md\n-r--r--r-- 1 dam dam 427 Jun 20 08:32 fitxer.mdv\n</code></pre> <p>Podem veure que ja tenim perm\u00eds d'escriptura sobre el fitxer generat.</p> <p>Amb l'opci\u00f3 -l (de lock), en el co indiquem que es bloquege el fitxer, de manera que un altre usuari del sistema no el puga modificar mentre es fan els canvis.</p> <p>Modificarem el fitxer fitxer.md amb el seg\u00fcent contingut:</p> <pre><code># Entorns de desenvolupament\n\nAquesta \u00e9s la segona versi\u00f3 del document per treballar el control de versions.\n\nA m\u00e9s, afegirem una nova l\u00ednia.\n</code></pre> <p>I tornem a fer un check-in per confirmar els canvis:</p> <pre><code>$ ci -u ./fitxer.md \n./fitxer.mdv  &lt;--  ./fitxer.md\nnew revision: 1.2; previous revision: 1.1\nenter log message terminated with single '.' or end of file:\n&gt;&gt; Revisi\u00f3 del fitxer.md\n&gt;&gt; .\ndone\n</code></pre> <p>Com podem veure, es torna a generar el fitxer fitxer.mdv i, a m\u00e9s, ens indica que la nova revisi\u00f3 ser\u00e0 la 1.2 en comparaci\u00f3 amb l'anterior, que era la 1.1.</p>"},{"location":"2.scv_local/#pas-5-revisant-canvis","title":"Pas 5. Revisant canvis","text":"<p>Si explorem ara el contingut del fitxer del control de versions fitxer.mdv, podem veure com emmagatzema de forma eficient les modificacions que es realitzen en cada revisi\u00f3, que a m\u00e9s tindr\u00e0 un n\u00famero de revisi\u00f3 que es guardar\u00e0 juntament amb els comentaris afegits en cada check-in.</p> <p>A partir de la informaci\u00f3 emmagatzemada en aquest fitxer, disposem d'eines per revisar els canvis realitzats. Per a aix\u00f2, tenim l'ordre rlog, que utilitzem de la seg\u00fcent manera:</p> <pre><code>$ rlog ./fitxer.md \n</code></pre> <p>Ens retornar\u00e0 alguna cosa semblant a aix\u00f2:</p> <pre><code>RCS file: ./fitxer.mdv\nWorking file: ./fitxer.md\nhead: 1.2\nbranch:\nlocks: strict\naccess list:\nsymbolic names:\nkeyword substitution: kv\ntotal revisions: 2; selected revisions: 2\ndescription:\nversi\u00f3 inicial del nostre fitxer\n----------------------------\nrevision 1.2\ndate: 2021/06/20 06:41:52;  author: dam;  state: Exp;  lines: +3 -1\nRevisi\u00f3 del fitxer.md\n----------------------------\nrevision 1.1\ndate: 2021/06/20 06:10:24;  author: dam;  state: Exp;\nInitial revision\n======================================================================\n</code></pre> <p>Com podem veure, es compon d'una cap\u00e7alera inicial seguida de blocs amb les diferents revisions del fitxer.</p> <p>Si el que desitgem \u00e9s consultar una versi\u00f3 concreta, podem utilitzar l'ordre co -p seguida del n\u00famero de versi\u00f3 (sense espais) i el nom del fitxer:</p> <pre><code>$ co -p1.1 ./fitxer.md \n./fitxer.mdv  --&gt;  standard output\nrevision 1.1\n# Entorns de desenvolupament\n\nAquesta \u00e9s la primera versi\u00f3 del document per treballar el control de versions.\n~\n$ co -p1.2 ./fitxer.md \n./fitxer.mdv  --&gt;  standard output\nrevision 1.2\n# Entorns de desenvolupament\n\nAquesta \u00e9s la segona versi\u00f3 del document per treballar el control de versions.\n\nA m\u00e9s, afegirem una nova l\u00ednia.\n</code></pre> <p>D'altra banda, si el que desitgem \u00e9s veure quines difer\u00e8ncies hi ha entre dues versions, podem utilitzar l'ordre rcsdiff de la seg\u00fcent manera:</p> <pre><code>$ rcsdiff -r1.1 -r1.2 ./fitxer.md \n===================================================================\nRCS file: ./fitxer.mdv\nretrieving revision 1.1\nretrieving revision 1.2\ndiff -r1.1 -r1.2\n3c35\n&lt; Aquesta \u00e9s la primera versi\u00f3 del document per treballar el control de versions.\n---\n&gt; Aquesta \u00e9s la segona versi\u00f3 del document per treballar el control de versions.\n&gt; \n&gt; A m\u00e9s, afegirem una nova l\u00ednia.\n</code></pre> <p>Tal com podem comprovar, aquesta sortida \u00e9s com si f\u00e9rem una operaci\u00f3 diff entre les dues revisions de l'arxiu.</p>"},{"location":"2.scv_local/#conclusio","title":"Conclusi\u00f3","text":"<p>En aquest cas pr\u00e0ctic hem vist el sistema de control de versions RCS. Amb ell hem treballat diverses operacions que ens seran d'utilitat, sobretot a nivell conceptual, per introduir altres sistemes de control de versions m\u00e9s potents.</p> <p>Com a principals conclusions d'aquest apartat podem considerar que:</p> <ul> <li>Quan creem un fitxer i volem que estiga sota el control de versions, haurem de fer un check-in del fitxer.</li> <li>Quan vulguem realitzar canvis sobre un fitxer que estiga sota el control de versions, haurem de fer pr\u00e8viament un checkout.</li> <li>Una vegada realitzats els canvis, generem una nova revisi\u00f3 fent de nou un check-in per confirmar aquests canvis.</li> </ul>"},{"location":"3.scv_centralitzat/","title":"3. Sistemes control de versions centralitzats","text":""},{"location":"3.scv_centralitzat/#sistemes-de-control-de-versions-centralitzats","title":"Sistemes de control de versions centralitzats","text":"<p>Amb l'arribada d'Internet, va sorgir la possibilitat que diversos programadors pogueren treballar conjuntament en un projecte, gestionant el control de versions amb els canvis que cadascun feia. Aleshores apareix la necessitat de centralitzar el control de versions en un \u00fanic servidor que emmagatzene les diferents versions dels arxius.</p> <p>En aquests tipus de SCV, els programadors que desitgen treballar en un projecte utilitzaran una eina client amb la qual interactuaran amb el servidor, descarregant la darrera versi\u00f3, actualitzant-la localment i enviant els canvis realitzats al servidor.</p> <p>Existeixen diversos sistemes de control de versions centralitzats, com Concurrent Versions System (CVS, 1986), Microsoft Visual SourceSafe (VSS, 1994), o amb el que veurem aquest apartat: Subversion (SVN, 2000).</p> <p>El funcionament general d'aquest tipus de sistemes de control de versions \u00e9s el seg\u00fcent:</p> <p></p> <p>Com podem veure, disposem d'un servidor central amb diverses versions d'un conjunt de fitxers anomenat repositori. Per a treballar, els clients obtenen la darrera versi\u00f3 dels fitxers (operaci\u00f3 de checkout), treballen localment i actualitzen els canvis en el servidor (commit).</p> <p>Amb aquesta arquitectura, guanyem en versatilitat, ja que diversos desenvolupadors poden treballar de forma conjunta. El principal inconvenient que suposa aquest model \u00e9s que, en cas de fallada, no podrem compartir les modificacions de codi i, si perdem la informaci\u00f3 del servidor, tamb\u00e9 es perdr\u00e0 tot l'historial de versions.</p>"},{"location":"3.scv_centralitzat/#el-scv-subversion","title":"El SCV Subversion","text":"<p>En aquest apartat treballarem amb el sistema de control de versions Subversion. Encara que la majoria de projectes i organitzacions utilitzen en la pr\u00e0ctica Git, que veurem en els seg\u00fcents apartats, con\u00e9ixer Subversion, igual que RCS, ens ser\u00e0 \u00fatil com a bona introducci\u00f3 a altres sistemes.</p> <p>Donat que Subversion \u00e9s un sistema centralitzat, necessitarem un servidor per emmagatzemar el repositori. Ac\u00ed podem optar per crear el nostre propi servidor o b\u00e9 utilitzar algun servei p\u00fablic d'emmagatzematge amb Subversion, com per exemple SourceForge. Utilitzarem aquest \u00faltim.</p>"},{"location":"3.scv_centralitzat/#preparacio-creacio-del-compte-i-el-repositori","title":"Preparaci\u00f3: Creaci\u00f3 del compte i el repositori","text":""},{"location":"3.scv_centralitzat/#pas-1-registre-en-sourceforge","title":"Pas 1. Registre en SourceForge","text":"<p>En primer lloc, accedirem al lloc web de SourceForge (https://sourceforge.net/) per registrar-nos com a usuaris fent clic en l'enlla\u00e7 Join o b\u00e9 accedint a https://sourceforge.net/user/registration.</p> <p>En aquesta p\u00e0gina de registre introduirem les nostres dades (substitueix nom d'usuari, correu i contrasenya pels teus) i farem clic en Register:</p> <p></p> <p>Una vegada completat el registre, se'ns enviar\u00e0 un correu electr\u00f2nic de confirmaci\u00f3 per activar el nostre compte. Accedim al correu, consultem el missatge i fem clic en Activate Your Account.</p> <p></p> <p>Fet aix\u00f2, se'ns redirigir\u00e0 de nou a SourceForge i ens demanar\u00e0 el nostre nom d'usuari i contrasenya per accedir-hi.</p>"},{"location":"3.scv_centralitzat/#pas-2-creacio-del-repositori","title":"Pas 2. Creaci\u00f3 del repositori","text":"<p>Per crear un nou repositori, farem clic en l'enlla\u00e7 Create, situat a la part superior dreta de la p\u00e0gina. Aix\u00f2 ens portar\u00e0 a la p\u00e0gina d'inici de creaci\u00f3 de projectes, on haurem de seleccionar Create Your Project Now.</p> <p></p> <p>Aix\u00f2 ens obrir\u00e0 la p\u00e0gina de configuraci\u00f3 del projecte. Com veurem, disposem de m\u00faltiples opcions per a ell (Wiki, p\u00e0gina web, etc.), aix\u00ed com l'acc\u00e9s mitjan\u00e7ant diferents sistemes de control de versions (Git, Subversion, Mercurial). De totes aquestes opcions, marcarem \u00fanicament l'opci\u00f3 de Subversion, desactivant la resta, ja que nom\u00e9s utilitzarem aquesta opci\u00f3. Si posteriorment voleu utilitzar SourceForge per emmagatzemar els vostres projectes, podeu explorar totes les opcions possibles.</p> <p></p> <p>Amb l'opci\u00f3 de Subversion marcada i acceptats els termes d'\u00fas, creem el nostre projecte mitjan\u00e7ant el bot\u00f3 Create. \u00c9s possible que en aquests moments se'ns demane un n\u00famero de tel\u00e8fon m\u00f2bil per enviar un PIN de validaci\u00f3. Aix\u00f2 nom\u00e9s es far\u00e0 en aquest moment.</p> <p>Fet aix\u00f2, ja tindrem acc\u00e9s a la web del nostre projecte en SourceForge. Podem seguir un xicotet tour per la interf\u00edcie.</p> <p></p> <p>Si ho desitgeu, i tal com s'explica en el tour, podeu afegir informaci\u00f3 al vostre projecte, utilitzar tiquets, incorporar col\u00b7laboradors, etc. Com que de moment nom\u00e9s ens interessa treballar amb Subversion, anirem directament a l'apartat de Codi (Code).</p>"},{"location":"3.scv_centralitzat/#pas-3-creacio-dels-directoris-per-defecte","title":"Pas 3. Creaci\u00f3 dels directoris per defecte","text":"<p>Quan accedim a l'apartat de codi, SourceForge ens suggereix que creem certs directoris per defecte, indicant-nos els passos per fer-ho:</p> <p></p> <p>L'estructura recomanada per a projectes en Subversion inclou les seg\u00fcents carpetes:</p> <ul> <li>trunk: la l\u00ednia principal o troncal de desenvolupament.</li> <li>branches: diferents rames o bifurcacions de codi a partir de la branca principal, utilitzades per afegir noves funcionalitats a una aplicaci\u00f3 (veurem aquest concepte amb m\u00e9s detall en Git).</li> <li>tags: que representen instant\u00e0nies (snapshots) preses del projecte en un moment determinat, per exemple, contenint les versions estables de l'aplicaci\u00f3.</li> </ul> <p>Aix\u00ed doncs, crearem aquestes carpetes en el repositori tal com ens indica. Per fer-ho, farem un checkout del repositori. Aquest concepte, que ja hem introdu\u00eft en RCS, \u00e9s molt semblant en Subversion i consisteix a obtenir una c\u00f2pia local de treball des del repositori.</p> <p>El paquet subversion</p> <p>A partir d'ara anem a treballar amb l'ordre <code>svn</code> del paquet <code>subversion</code>.</p> <p>Si no el tenim instal\u00b7lat al nostre sistema, caldr\u00e0 fer-ho amb:</p> <pre><code>sudo apt install subversion\n</code></pre> <p>En primer lloc, dins de la carpeta que vulguem utilitzar per al control de versions en el nostre equip, farem el checkout seguint la sintaxi:</p> <pre><code>svn checkout --username=Usuari Repositori_Remot Directori_Local\n</code></pre> <p>L'adre\u00e7a del repositori remot s'especifica a trav\u00e9s del protocol svn sobre un t\u00fanel SSH (svn+ssh://) per mantenir una comunicaci\u00f3 segura. A m\u00e9s, aquest protocol requerir\u00e0 d'autenticaci\u00f3.</p> <p>En el nostre cas, farem (recorda utilitzar el teu nom d'usuari i la ruta que t'indica SourceForge):</p> <pre><code>$ svn checkout --username=alumno-dam-mgh svn+ssh://alumno-dam-mgh@svn.code.sf.net/p/primer-proyecto-en-svn/code/ primer-proyecto-en-svn-code\n...\nThe authenticity of host 'svn.code.sf.net (216.105.38.17)' can't be established.\nECDSA key fingerprint is SHA256:FeVkoYYBjuQzb5QVAgm3BkmeN5TTgL2qfmqz9tCPRL4.\nAre you sure you want to continue connecting (yes/no/[fingerprint])? yes\nPassword: \nChecked out revision 0.\n</code></pre> <p>Com veiem, ens demanar\u00e0 confirmaci\u00f3 per connectar-nos a trav\u00e9s de SSH amb el repositori, i tamb\u00e9 ens demanar\u00e0 la nostra contrasenya en SourceForge.</p> <p>Fet aix\u00f2, ja ens diu que tenim la revisi\u00f3 0. Ara anem a crear les tres carpetes dins del directori:</p> <pre><code>$ cd primer-proyecto-en-svn-code\n$ mkdir trunk branches tags\n</code></pre> <p>I les afegim al sistema de control de versions. Per a aix\u00f2, utilitzarem l'ordre svn add, indicant els noms d'aquestes carpetes:</p> <pre><code>$ svn add trunk branches tags\nA         trunk\nA         branches\nA         tags\n</code></pre> <p>L'exida d'aquesta ordre ens mostra una l\u00ednia per recurs afegit o modificat al control de versions. Quan la l\u00ednia comen\u00e7a per la lletra A, ens indica que s'ha afegit el recurs.</p> <p>Ara ja tenim aquestes carpetes sota el control de versions, per\u00f2 ens falta sincronitzar-les amb el servidor. Aix\u00f2 ho farem mitjan\u00e7ant un commit (svn ci), que \u00e9s l'operaci\u00f3 amb la qual enviem les dades que tenim en la carpeta local al repositori remot:</p> <pre><code>$ svn ci -m \"Add initial directories\"\nPassword: \nAdding         branches\nAdding         tags\nAdding         trunk\nCommitting transaction...\nCommitted revision 1.\n</code></pre> <p>Amb aix\u00f2, veiem que ara el n\u00famero de revisi\u00f3 ja \u00e9s el 1 i es troba sincronitzada amb el repositori.</p> <p>Si ara tornem a la p\u00e0gina del nostre projecte en SourceForge i la refresquem en el navegador, veurem que ja tenim disponibles aquestes carpetes en el projecte.</p>"},{"location":"3.scv_centralitzat/#treballant-en-equip-amb-el-repositori","title":"Treballant en equip amb el repositori","text":"<p>En aquest apartat simularem el treball en equip o amb diversos ordinadors contra el servidor de Subversion del nostre projecte.</p> <p>Per a aix\u00f2, descarregarem de nou el repositori, per\u00f2 ho farem en un directori diferent del primer. Des d'aquesta segona c\u00f2pia, el modificarem i pujarem els canvis. En el nostre cas, aix\u00f2 ser\u00e0 una c\u00f2pia en el nostre ordinador, per\u00f2 podria tractar-se d'una c\u00f2pia en l'ordinador de qualsevol col\u00b7laborador del nostre projecte. Finalment, veurem com actualitzar aquests canvis des del servidor.</p>"},{"location":"3.scv_centralitzat/#pas-1-obtenint-una-copia-local-nova-del-projecte","title":"Pas 1. Obtenint una c\u00f2pia local nova del projecte","text":"<p>Per obtenir una c\u00f2pia local nova del projecte, farem:</p> <pre><code>$ svn checkout --username=alumno-dam-mgh svn+ssh://alumno-dam-mgh@svn.code.sf.net/p/primer-proyecto-en-svn/code/ copia_proyecto\nPassword: \nA    copia_proyecto/branches\nA    copia_proyecto/tags\nA    copia_proyecto/trunk\nChecked out revision 1.\n</code></pre> <p>Com veiem, s'ha creat la carpeta copia_proyecto amb la revisi\u00f3 1, incorporant les carpetes branches, tags i trunk creades anteriorment.</p>"},{"location":"3.scv_centralitzat/#pas-2-afegint-contingut-i-pujant-lo-al-repositori-des-de-la-copia","title":"Pas 2. Afegint contingut i pujant-lo al repositori des de la c\u00f2pia","text":"<p>Crearem un fitxer nou en la carpeta trunk del projecte que anomenarem fitxer1.md amb el seg\u00fcent contingut. Pots utilitzar l'editor de text o codi que desitges:</p> <pre><code># Projecte amb Subversion\n\nAquest \u00e9s el nostre primer projecte en Sourceforge utilitzant Subversion per al m\u00f2dul d'Entorns de Desenvolupament.\n</code></pre> <p>El guardem i tornem a la terminal per comprovar l'estat del SCV. Per a aix\u00f2, utilitzarem l'ordre svn st (de status) des del directori de treball:</p> <pre><code>$ svn st\n?       trunk/fichero1.md\n</code></pre> <p>Com podem veure, ens mostra una l\u00ednia que comen\u00e7a amb el signe d'interrogaci\u00f3 i la ruta trunk/fichero1.md. Aix\u00f2 significa que el fitxer fichero1.md dins del directori trunk no es troba encara sota el sistema de control de versions.</p> <p>Per afegir-lo, utilitzarem de nou l'ordre svn add:</p> <pre><code>$ svn add trunk/fichero1.md \nA         trunk/fichero1.md\n</code></pre> <p>Ara ja ens indica que el fitxer1.md ha sigut incorporat al SCV.</p> <p>Si ara consultem l'estat amb svn st, obtindrem la mateixa eixida, indicant que hem afegit aquest fitxer al control de versions.</p> <p>Aix\u00ed i tot, aquest fitxer est\u00e0 afegit en la nostra c\u00f2pia de treball local, per la qual cosa hem d'enviar-lo al servidor. Per a aix\u00f2, fem un commit com en el pas anterior:</p> <pre><code>$ svn ci -m \"Added fichero1.md\"\nPassword: \nAdding         trunk/fichero1.md\nTransmitting file data .done\nCommitting transaction...\nCommitted revision 2.\n</code></pre> <p>Amb aix\u00f2, ja tenim la segona revisi\u00f3 del projecte en el repositori. Si naveguem per la web, podrem trobar i consultar aquest fitxer. Observa que, en tractar-se d'un fitxer en format Markdown, la p\u00e0gina ja ens mostra el document formatat en lloc de mostrar el codi font.</p>"},{"location":"3.scv_centralitzat/#pas-3-actualitzant-la-carpeta-de-treball-original","title":"Pas 3. Actualitzant la carpeta de treball original","text":"<p>Quan treballem amb altres desenvolupadors en un mateix projecte, \u00e9s habitual que cadascun tinga la seua c\u00f2pia de treball local del repositori i l'actualitze cada vegada que realitze canvis en ell. En aquests casos, sempre \u00e9s una bona pr\u00e0ctica actualitzar la nostra c\u00f2pia de treball amb el contingut del repositori abans de realitzar qualsevol canvi.</p> <p>Tornem a la nostra carpeta original i actualitzem el contingut amb l'ordre update de Subversion (svn up):</p> <pre><code>$ cd primer-proyecto-en-svn-code/\n$ svn up\nUpdating '.':\nPassword: \nA    trunk/fichero1.md\nUpdated to revision 2.\n</code></pre> <p>Com podem veure, en actualitzar, la nostra c\u00f2pia de treball local s'ha actualitzat afegint el fitxer1.md a la carpeta trunk.</p>"},{"location":"3.scv_centralitzat/#pas-4-modificant-recursos-existents","title":"Pas 4. Modificant recursos existents","text":"<p>Fins ara hem vist com afegir nous recursos al control de versions. Ara veurem com modificar fitxers existents i pujar-los.</p> <p>Des de la c\u00f2pia inicial que acabem d'actualitzar, modifiquem el fitxer1.md amb el seg\u00fcent contingut:</p> <pre><code># Projecte amb Subversion\n\nAquest \u00e9s el nostre primer projecte en Sourceforge utilitzant Subversion per al m\u00f2dul d'Entorns de Desenvolupament.\n\nEn aquest cas pr\u00e0ctic estem treballant les diferents ordres de subversion:\n\n* `svn co`: Per fer un *checkout*.\n* `svn ci`: Per fer un *commit* sobre el repositori.\n* `svn st`: Per comprovar l'estat.\n* `svn add`: Per afegir un recurs al control de versions.\n* `svn up`: Per actualitzar la nostra c\u00f2pia de treball local des del repositori.\n</code></pre> <p>Guardem el fitxer i comprovem l'estat:</p> <pre><code>$ svn st\nM       trunk/fichero1.md\n</code></pre> <p>Com podem veure, ara en lloc d'una A, ens mostra una M, indicant que el recurs ha sigut modificat. Ara nom\u00e9s ens queda confirmar aquests canvis en el servidor amb un commit:</p> <pre><code>$ svn ci -m \"Modificat fichero1.md\"\nPassword: \nSending        trunk/fichero1.md\nTransmitting file data .done\nCommitting transaction...\nCommitted revision 3.\n</code></pre> <p>Amb aix\u00f2 obtenim la versi\u00f3 3 del projecte en el repositori.</p>"},{"location":"3.scv_centralitzat/#exercici-1","title":"Exercici 1","text":"<p>Des de la segona c\u00f2pia de treball que hem creat del repositori, crea un nou fitxer dins del directori trunk anomenat fichero2. Afig-lo al control de versions i puja'l al repositori.</p> <p>Ara, des de la primera c\u00f2pia de treball del projecte, intenta crear el mateix fitxer amb alguna cosa de contingut i prova a pujar-lo al repositori. \u00c9s possible? On ha estat l'error?</p>"},{"location":"3.scv_centralitzat/#solucio","title":"Soluci\u00f3","text":"<p>Creem el nou fitxer dins de la carpeta trunk. Per a aix\u00f2, podem utilitzar l'ordre touch, que ens crear\u00e0 un fitxer sense contingut:</p> <pre><code>$ touch trunk/fichero2\n</code></pre> <p>Si observem ara l'estat de la carpeta de treball:</p> <pre><code>$ svn st\n?       fichero2\n</code></pre> <p>Veiem que existeix un fitxer que no est\u00e0 sota el control de versions, aix\u00ed que l'afegim:</p> <pre><code>$ svn add trunk/fichero2 \nA         fichero2\n</code></pre> <p>Una vegada afegit, el pugem al servidor:</p> <pre><code>$ svn ci -m \"Added fichero2\"\nPassword: [introdu\u00efm la contrasenya]\nAdding         fichero2\nTransmitting file data .done\nCommitting transaction...\nCommitted revision 4.\n</code></pre> <p>Ara, des de la primera c\u00f2pia de treball del projecte, intentem crear el mateix fitxer amb contingut. Per a aix\u00f2, podem utilitzar l'ordre echo, que mostra un missatge, i redirigir-lo al fitxer trunk/fichero2. Amb aix\u00f2, aconseguim escriure el missatge en el fitxer:</p> <pre><code>$ echo \"Provant l'exercici2\" &gt; trunk/fichero2\n</code></pre> <p>Ara afegim el fitxer al control de versions:</p> <pre><code>$ svn add trunk/fichero2 \nA         trunk/fichero2\n</code></pre> <p>I intentem pujar-lo al servidor:</p> <pre><code>$ svn ci -m \"Fichero2 des de la primera c\u00f2pia\"\nPassword: \nAdding         trunk/fichero2\nTransmitting file data .done\nCommitting transaction...\nsvn: E160020: Commit failed (details follow):\nsvn: E160020: File already exists: filesystem 'c4543e9e-acd8-420a-86bb-cb6327f0ec99' transaction '4-4' path '/trunk/fichero2'\n</code></pre> <p>Com era d'esperar, la transacci\u00f3 falla, ja que el fitxer que volem escriure ja es troba en el repositori.</p> <p>Aix\u00f2 \u00e9s un problema habitual quan treballem juntament amb diversos desenvolupadors en un projecte. Per aix\u00f2 \u00e9s una bona pr\u00e0ctica actualitzar el repositori abans de comen\u00e7ar a modificar el codi.</p> <p>Veiem en quin estat es troba el directori de treball mitjan\u00e7ant svn st:</p> <pre><code>$ svn st\nA       trunk/fichero2\n</code></pre> <p>Com veiem, el fitxer est\u00e0 en el control de versions, per\u00f2 encara no s'ha pujat al servidor.</p> <p>Si ara intentem actualitzar el contingut amb l'ordre update:</p> <pre><code>$ svn up\nUpdating '.':\nPassword: \n   C trunk/fichero2\nAt revision 4.\n\nSummary of conflicts:\n    Tree conflicts: 1\nSearching tree conflict details for 'trunk/fichero2' in repository:\nPassword:\nChecking r4... done\nTree conflict on 'trunk/fichero2':\n</code></pre> <p>Aix\u00f2 ens indica que tenim els seg\u00fcents conflictes en el repositori, i ens demana qu\u00e8 desitgem fer, si postposar la resoluci\u00f3 del conflicte, marcar-lo com resolt (manualment) o mesclar els fitxers (merge). Triarem esta \u00faltima:</p> <pre><code>A new file appeared during update to r4; it was added by alumno-dam-mgh in r4.\nA file scheduled to be added to the repository in the next commit was found in the working copy.\nSelect: (p) Postpone, (r) Mark as resolved, (m) Merge the files, (h) Help, (q) Quit resolution: m\nReverted 'trunk/fichero2'\nG   trunk/fichero2\nTree conflict at 'trunk/fichero2' marked as resolved.\nSummary of conflicts:\n    Tree conflicts: 0 remaining (and 1 already resolved)\n</code></pre> <p>Amb la l\u00ednia <code>G trunk/fichero2</code> se'ns indica que s'ha realitzat la fusi\u00f3 de les versions del fitger (merGed).</p> <p>De tota manera, si ara consultem l'estat del Subversion, veurem que els canvis que hem fet de forma local encara no s'han pujat al servidor (ja que he fussionat el contingut del servidor amb el que tenim localment):</p> <pre><code>$ svn st\nM   trunk/fichero2\n</code></pre> <p>De maner que farem un \u00faltim commit per tal de pujar els canvis al servidor:</p> <pre><code>$ svn ci -m \"Fixed fichero2\"\nPassword:\nSending\n trunk/fichero2\nTransmitting file data .done\nCommitting transaction...\nCommitted revision 5.\n</code></pre> <p>Tutorial de Subversion</p> <p>Si voleu m\u00e9s informaci\u00f3, disposeu d'un tutorial de Subversion a la Wiki de Debian</p>"},{"location":"4.scv_distribuit/","title":"3. Sistemes control de versions centralitzats","text":""},{"location":"4.scv_distribuit/#sistemes-de-control-de-versions-distribuits","title":"Sistemes de control de versions distribu\u00efts","text":"<p>Els sistemes de control de versions distribu\u00efts adopten un enfocament m\u00e9s semblant a una arquitectura peer-to-peer (P2P o xarxa entre iguals) que a una arquitectura client-servidor. En lloc de disposar d'un \u00fanic repositori centralitzat amb el qual es sincronitzen els clients, cada equip t\u00e9 una c\u00f2pia completa de tot el repositori, en lloc de l'\u00faltima instant\u00e0nia del projecte. El fet que tots els equips guarden una c\u00f2pia del repositori no impedeix que hi haja un equip que adopte el rol de servidor i que s'encarregar\u00e0, en general, de mantenir diversos repositoris.</p> <p>El principal avantatge d'aquests tipus de SCVs \u00e9s que, si es produeix algun error en el servidor, aquest podr\u00e0 ser regenerat a partir de qualsevol altre client.</p> <p>Gr\u00e0ficament, podr\u00edem veure aquests tipus de SCVs de la seg\u00fcent manera:</p> <p></p> <p>Ac\u00ed podem veure com el servidor es comporta com un equip m\u00e9s. Cada equip disposa d'una c\u00f2pia del conjunt de versions del projecte, de manera que poden treballar de forma local sense necessitat de connectar-se a altres equips. Aix\u00f2 significa que poden crear instant\u00e0nies de forma local i connectar-se al servidor \u00fanicament quan necessiten compartir el seu treball o obtenir el treball realitzat per altres companys.</p> <p>Els SCV distribu\u00efts m\u00e9s coneguts s\u00f3n BitKeeper (1998), Bazaar (2005), Mercurial (2005) i Git (2005), que ser\u00e0 el que utilitzarem a partir d'ara.</p>"},{"location":"4.scv_distribuit/#el-sistema-de-control-de-versions-git","title":"El sistema de control de versions Git","text":"<p>En aquest apartat introduirem el sistema de control de versions distribu\u00eft Git, un dels sistemes m\u00e9s utilitzats actualment i amb el qual treballa la majoria de repositoris p\u00fablics de programari, com Github, Gitlab o Bitbucket, entre d'altres.</p> <p>Git va ser desenvolupat amb la finalitat de donar suport al desenvolupament distribu\u00eft del kernel de Linux, i t\u00e9 com a principals caracter\u00edstiques:</p> <ul> <li>\u00c9s r\u00e0pid i escalable, ja que s'adapta tant a projectes individuals com a grans projectes amb un gran nombre de desenvolupadors.</li> <li>Utilitza una c\u00f2pia completa amb tot l'historial de desenvolupament en cada usuari local. Si el servidor principal deixa d'estar operatiu, es pot recuperar a partir de qualsevol c\u00f2pia local. A m\u00e9s, ens permet tornar a un estat previ del projecte (el que hem vingut anomenant instant\u00e0nies o commits) o veure les difer\u00e8ncies entre dos estats sense necessitat d'equips externs.</li> <li>Facilita el desenvolupament distribu\u00eft, ja que, al disposar d'una c\u00f2pia completa del repositori, es facilita el desenvolupament simultani i independent, evitant una sincronitzaci\u00f3 cont\u00ednua.</li> <li>Permet treballar localment com f\u00e8iem amb RCS, sense necessitat de connexi\u00f3 a altres xarxes, ja que els commits es fan de forma local, i les connexions a l'exterior es realitzaran quan vulguem col\u00b7laborar amb altres usuaris o b\u00e9 obtenir els canvis des de l'\u00faltima connexi\u00f3.</li> <li>Permet treballar amb branques i fusionar-les f\u00e0cilment, aconseguint aix\u00ed un desenvolupament no lineal.</li> <li>En lloc de treballar amb llistes de canvis amb les modificacions, Git utilitza instant\u00e0nies del sistema de fitxers en cada commit.</li> <li>Admet la connexi\u00f3 al servidor mitjan\u00e7ant m\u00faltiples protocols: HTTP, HTTPS, SSH, a m\u00e9s del protocol propi.</li> <li>Es tracta d'un sistema robust que utilitza internament un algorisme de xifrat SHA-1, amb el qual pot detectar qualsevol modificaci\u00f3 accidental o malintencionada del repositori.</li> <li>\u00c9s programari lliure, seguint la filosofia de la majoria de projectes col\u00b7laboratius, i es distribueix sota la llic\u00e8ncia GNU/GPL 2.0.</li> </ul> <p>Com hem comentat, Git \u00e9s un sistema de control de versions distribu\u00eft que ens permet treballar en un projecte junt amb diversos desenvolupadors. Aix\u00f2 no significa que no puguem treballar de forma local. Als seg\u00fcents apartats comen\u00e7arem a utilitzar Git treballant localment per a passar posteriorment a fer-ho de forma distribu\u00efda. Veurem en primer lloc els conceptes m\u00e9s importants relacionats amb Git, aix\u00ed com el flux habitual de treball.</p>"},{"location":"4.scv_distribuit/#conceptes-sobre-git","title":"Conceptes sobre Git","text":"<p>A continuaci\u00f3, veurem alguns conceptes utilitzats per Git. \u00c9s possible que alguns d'ells ja els coneguem dels SCV anteriors:</p> <ul> <li>Repositori: \u00c9s un contenidor o base de dades on es guarda l'hist\u00f2ric de canvis en els arxius del projecte guardats en ell mitjan\u00e7ant un commit o confirmaci\u00f3.</li> <li>Commit (o confirmaci\u00f3): \u00c9s l'acci\u00f3 amb la qual guardem en el repositori una instant\u00e0nia del projecte junt amb informaci\u00f3 sobre aquest canvi, generalment l'autor, la data i l'explicaci\u00f3 dels canvis realitzats.</li> <li>Zones en Git: Un arxiu pot estar localment en tres zones:</li> <li>Directori de treball (working directory): \u00c9s la zona del repositori visible (la veiem amb un <code>ls -la</code> o <code>dir /p</code>), i sobre la qual treballarem habitualment. (Les opcions <code>-la</code> i <code>/p</code> s\u00f3n per vore tamb\u00e9 els fitxers ocults)</li> <li>Zona de preparaci\u00f3 (staging area o \u00edndex): Es tracta d'una zona interm\u00e8dia no accessible des de la terminal per\u00f2 s\u00ed amb Git, on es troben les instant\u00e0nies dels arxius que es guardaran en el repositori en el pr\u00f2xim commit.</li> <li>Repositori: On es guarden els canvis despr\u00e9s d'haver fet els commits.</li> </ul> <p></p> <ul> <li>Estats d'un fitxer: Els arxius en el directori de treball poden estar sense seguiment (untracked) o sota seguiment (tracked) de Git. A m\u00e9s, els arxius que tenim sota seguiment poden presentar els seg\u00fcents estats:</li> <li>Confirmat (committed): El contingut de l'arxiu en la zona de treball, de preparaci\u00f3 i del repositori \u00e9s el mateix.</li> <li>Modificat (modified): El contingut de l'arxiu en la zona de treball \u00e9s diferent al de la zona de preparaci\u00f3 i al del repositori. Aix\u00f2 significa que hem modificat el fitxer, per\u00f2 no l'hem confirmat en la base de dades.</li> <li>Preparat (staged): El contingut de l'arxiu en la zona de treball i de preparaci\u00f3 \u00e9s el mateix, per\u00f2 difereix del repositori. Aix\u00f2 es produeix quan marquem un fitxer per a ser incorporat en la pr\u00f2xima confirmaci\u00f3 (commit).</li> </ul> <p></p> <ul> <li> <p>SHA-1 i HEAD: El SHA-1 \u00e9s una funci\u00f3 criptogr\u00e0fica que, aplicada a una seq\u00fc\u00e8ncia de bytes de qualsevol grand\u00e0ria, com podria ser tot un arxiu o un conjunt d'arxius corresponents a un commit, d\u00f3na com a resultat un resum d'aquest de 40 car\u00e0cters hexadecimals (del 0 al 9 i de la A a la F). Qualsevol modificaci\u00f3 en l'arxiu donaria un resum completament diferent. Aquest \u00e9s el mecanisme a trav\u00e9s del qual Git sap quan hem modificat un arxiu o b\u00e9 quan un arxiu ha sigut corromput, assegurant la integritat dels arxius del repositori.   Cada vegada que fem un commit, es calcular\u00e0 un SHA-1 que l'identifique. Cada commit que fem, excepte el primer, tindr\u00e0 una refer\u00e8ncia al commit anterior. Aquestes refer\u00e8ncies es guarden en format SHA-1 curt, la qual cosa significa que utilitza els primers bytes (almenys 4) i \u00e9s capa\u00e7 de desxifrar el commit complet sempre que no existisca ambig\u00fcitat.     El HEAD no \u00e9s m\u00e9s que una refer\u00e8ncia que apunta a l'\u00faltim commit realitzat.</p> </li> <li> <p>Branques (branches): Les rames s\u00f3n les bifurcacions o camins alternatius que en un determinat moment prenem per resoldre algun error, provar codi nou o afegir noves funcionalitats, per\u00f2 sobre el qual no estem segurs que vagi a ser viable (\u00e9s a dir, no estem segurs que el codi que afegirem vaja a funcionar, i potser h\u00e0gem de desfer tot el que hem fet). En la majoria d'ocasions treballarem en la branca principal o master/main, a partir de la qual podrem crear altres rames i anar saltant entre elles de manera que canvie el directori de treball.</p> </li> </ul>"},{"location":"4.scv_distribuit/#flux-de-treball","title":"Flux de treball","text":"<p>El flux de treball, una vegada tinguem inicialitzat un repositori, consistir\u00e0 a anar afegint els fitxers que desitgem al control de versions, modificar-los i preparar els successius commits o confirmacions per incorporar aquests canvis en la base de dades.</p> <p>Podem veure-ho m\u00e9s en profunditat en el seg\u00fcent gr\u00e0fic, observant tamb\u00e9 els canvis en l'estat dels fitxers:</p> <p></p> <ol> <li>Creem els fitxers necessaris en la carpeta del projecte. Aquests fitxers estaran inicialment sense seguiment (untracked) per part del sistema de control de versions. Podem crear-los, editar-los o esborrar-los. Fins que no s'afegeixen al control de versions, romandran en aquest estat.</li> <li> <p>Afegim els fitxers al control de versions (<code>git add</code>). En aquest moment, els fitxers estaran sota seguiment (tracked) i, a m\u00e9s, preparats per al seg\u00fcent commit. Des d'aquest estat de preparat poden succeir dues coses:   a.Confirmem els canvis mitjan\u00e7ant un commit, en el qual cas les modificacions realitzades per a aquesta confirmaci\u00f3 s'afegeixen al repositori. A m\u00e9s, el fitxer ara passar\u00e0 a estar confirmat o sense modificacions.   b.D'altra banda, podr\u00edem modificar el fitxer que acabem de crear. En aquest cas, el fitxer passaria a estat modificat i, perqu\u00e8 aquestes modificacions tinguen efecte, hem de preparar el fitxer afegint les modificacions per al seg\u00fcent commit (<code>git add</code>). En cas que no afegim aquests canvis, en el seg\u00fcent commit s'afegir\u00e0 al repositori la versi\u00f3 sense modificar del fitxer.</p> </li> <li> <p>Tornem al punt anterior, on afegim noves modificacions i preparem noves confirmacions.</p> </li> </ol> <p>En tot aquest flux de treball, per a cada commit que fem es generaran noves signatures SHA que apuntaran a la signatura SHA del commit anterior. El HEAD sempre apuntar\u00e0 a l'\u00faltim commit v\u00e0lid.</p> <p></p> <p>Veiem tot aix\u00f2 en la pr\u00e0ctica!</p>"},{"location":"5.svc_git/","title":"5. El sistema de control de versions distribuit git","text":""},{"location":"5.svc_git/#el-sistema-de-control-de-versions-git","title":"El sistema de control de versions git.","text":"<p>Exercicis</p> <p>Mentre vas realitzant els diferents passos, ves fent una xicoteta gu\u00eda en markdown del que consideres m\u00e9s important, relacionant-ho amb l'apartat de teoria.</p> <p>Anota en ella els diferents canvis que vas fent sobre el teu directori de treball.</p>"},{"location":"5.svc_git/#primers-passos","title":"Primers passos","text":"<p>En aquest apartat, anem a veure com abordar de forma pr\u00e0ctica els conceptes vistos sobre el SCV distribu\u00eft git.</p>"},{"location":"5.svc_git/#pas-1-installacio","title":"Pas 1. Instal\u00b7laci\u00f3","text":"<p>En qualsevol sistema operatiu GNU/Linux basat en Debian/Ubuntu, podem instal\u00b7lar git des de la terminal mitjan\u00e7ant l'ordre <code>apt</code>:</p> <p>Com sempre, en primer lloc, refresquem la llista de paquets:</p> <pre><code>$ sudo apt update\n</code></pre> <p>I despr\u00e9s instal\u00b7lem el paquet git:</p> <pre><code>$ sudo apt install git\n</code></pre> <p>Instal\u00b7laci\u00f3 en Windows</p> <p>Encara que hem utilitzat com a base un sistema operatiu GNU/Linux com Ubuntu, Github tamb\u00e9 est\u00e0 disponible per a Windows. Podeu descarregar-lo i instal\u00b7lar-lo des del lloc Git for Windows o des de la p\u00e0gina oficial de git Git SCM, on tamb\u00e9 estar\u00e0 disponible per a Mac.</p> <p>Els passos que indicarem a continuaci\u00f3 seran totalment v\u00e0lids per a tots aquests sistemes.</p>"},{"location":"5.svc_git/#pas-2-comprovant-la-versio","title":"Pas 2. Comprovant la versi\u00f3","text":"<p>Per saber quina versi\u00f3 tenim instal\u00b7lada utilitzarem:</p> <pre><code>$ git --version\n</code></pre>"},{"location":"5.svc_git/#pas-3-consultant-lajuda","title":"Pas 3. Consultant l\u2019ajuda","text":"<p>Si escrivim des de la consola l\u2019ordre git sense arguments, se\u2019ns mostrar\u00e0 una ajuda amb els par\u00e0metres que aquest suporta, aix\u00ed com les ordres m\u00e9s utilitzades, juntament amb una menuda explicaci\u00f3.</p> <p>D\u2019altra banda, si volem ajuda d\u2019una ordre concreta de git, utilitzarem:</p> <pre><code>$ git help ordre\n</code></pre> <p>Amb l\u2019ordre de la qual necessitem ajuda. A m\u00e9s, tamb\u00e9 podem consultar les p\u00e0gines del manual de Git en entorns Linux (man git).</p>"},{"location":"5.svc_git/#pas-4-configurant-git","title":"Pas 4. Configurant git","text":"<p>Despr\u00e9s d\u2019instal\u00b7lar git, necessitarem configurar alguns par\u00e0metres per utilitzar-lo. Per a aix\u00f2, utilitzarem l'ordre <code>git config</code>, que ens permet guardar la configuraci\u00f3 a nivell de sistema, d\u2019usuari o de projecte.</p> <p>Treballarem a nivell d\u2019usuari, de manera que la configuraci\u00f3 es guardar\u00e0 en un directori ocult anomenat <code>.gitconfig</code> de la nostra carpeta personal. En general, per establir un par\u00e0metre a nivell d\u2019usuari, ho farem amb:</p> <pre><code>$ git config --global par\u00e0metre valor\n</code></pre> <p>mentre que els podrem consultar amb:</p> <pre><code>$ git config --global par\u00e0metre\n</code></pre> <p>Veiem a continuaci\u00f3 els diferents par\u00e0metres a configurar en git i com fer-ho:</p> <ul> <li>Identitat de l\u2019usuari, que es compon del nom i el correu electr\u00f2nic:</li> </ul> <pre><code>$ git config --global user.name \"Alumne DAM\"\n</code></pre> <pre><code>$ git config --global user.email alumne.dam.ieseljust@gmail.com\n</code></pre> <ul> <li>Editor predeterminat per quan git necessiti que escrivim algun missatge (per exemple el missatge de cada commit). Ac\u00ed configurem <code>vim</code>, pe\u00f2 podeu utilitzar <code>nano</code>:</li> </ul> <pre><code>$ git config --global core.editor vim\n</code></pre> <p>Tamb\u00e9 existeixen altres elements a configurar que ens poden ser d\u2019utilitat:</p> <ul> <li>Perqu\u00e8 utilitze l'eixida en colors significatius:</li> </ul> <pre><code>$ git config --global color.ui true\n</code></pre> <ul> <li>Per indicar a git que realitze conversions entre finals de l\u00ednia quan treballem en entorns h\u00edbrids Linux / Windows / Mac:</li> </ul> <pre><code>$ git config --global core.autocrlf true\n</code></pre> <p>Compte!</p> <p>Amb aquesta opci\u00f3 activada, \u00e9s possible que quan confirmem un canvi en el repositori ens aparega el seg\u00fcent av\u00eds:</p> <pre><code>warning: LF will be replaced by CRLF in fitxer1.md.\nThe file will have its original line endings in your working directory\n</code></pre> <p>Que indica que es reempla\u00e7aran els finals de l\u00ednia tipus Linux (LF, Line Feed) pels utilitzats per Windows (CR, Carriage Return i LF, Line Feed). Si no compartirem codi amb usuaris d\u2019altres sistemes operatius i ens molesta aquest av\u00eds, podem mantenir l\u2019opci\u00f3 a false.</p> <ul> <li>Finalment, si volem consultar tota la llista de par\u00e0metres, farem:</li> </ul> <pre><code>$ git config --list\n</code></pre>"},{"location":"5.svc_git/#comencant-a-treballar-amb-repositoris","title":"Comen\u00e7ant a treballar amb repositoris","text":"<p>Per treballar amb un repositori git, el primer que hem de fer \u00e9s inicialitzar-lo. Per a aix\u00f2, podem, b\u00e9 clonar un repositori existent, o b\u00e9 crear-ne un de nou. Per a aquest exemple, crearem un de nou.</p>"},{"location":"5.svc_git/#pas-1-creacio-i-inicialitzacio-de-la-carpeta-del-projecte","title":"Pas 1. Creaci\u00f3 i inicialitzaci\u00f3 de la carpeta del projecte","text":"<p>En primer lloc, ens situem en la terminal en el directori on guardarem els projectes, i creem la carpeta del projecte amb:</p> <pre><code>$ mkdir projecte\n</code></pre> <p>Ara ens ubiquem dins d\u2019ell:</p> <pre><code>$ cd projecte\n</code></pre> <p>I inicialitzem ac\u00ed el repositori:</p> <pre><code>$ git init\n\n\nInitialized empty Git repository in /home/dam/scv/proyecto/.git/\n</code></pre> <p>Com veieu, git ens indica que ha creat un repositori buit.</p> <p>Si volem veure l\u2019estat del repositori farem:</p> <pre><code>$ git status\n\nOn branch master\nNo commits yet\nnothing to commit (create/copy files and use \"git add\" to track)\n</code></pre> <p>Aix\u00f2 ens indica que estem en la branca master, que no hem fet cap commit, i que no hi ha cap pendent.</p> <p>Si consultem els arxius ocults de la carpeta actual (amb un <code>ls -la</code>), veurem que apareix una carpeta <code>.git</code>, que cont\u00e9 tota la informaci\u00f3 sobre el control de versions.</p>"},{"location":"5.svc_git/#pas-2-creacio-de-contingut","title":"Pas 2. Creaci\u00f3 de contingut","text":"<p>Ara crearem un fitxer nou, mitjan\u00e7ant l'ordre <code>touch</code>. Recordeu que l'ordre touch crea un fitxer buit amb el nom que li indiquem, sense necessitat d\u2019obrir-lo amb cap editor per afegir-li contingut.</p> <pre><code>$ touch fitxer1.md\n</code></pre> <p>Amb aix\u00f2 hem creat un fitxer buit. Si observem l\u2019estat de git, ens mostrar\u00e0:</p> <pre><code>$ git status\n\n\nOn branch master\nNo commits yet\nUntracked files:\n (use \"git add &lt;file&gt;...\" to include in what will be committed)\n    fitxer1.md\nnothing added to commit but untracked files present (use \"git add\" to track)\n</code></pre> <p>Com veiem, ens marca <code>fitxer1.md</code> com Untracked (sense seguiment), el que significa que aquest fitxer no es troba sota el sistema de control de versions.</p>"},{"location":"5.svc_git/#pas-3-fent-el-seguiment-de-larxiu","title":"Pas 3. Fent el seguiment de l\u2019arxiu","text":"<p>Per fer el seguiment de l\u2019arxiu en el sistema de control de versions, hem d\u2019afegir-lo a aquest mitjan\u00e7ant:</p> <pre><code>$ git add fitxer1.md\n</code></pre> <p>I si ara consultem l\u2019estat del repositori:</p> <pre><code>$ git status\n\nOn branch master\nNo commits yet\nChanges to be committed:\n (use \"git rm --cached &lt;file&gt;...\" to unstage)\n    new file: fitxer1.md\n</code></pre> <p>Podem comprovar com ara <code>fitxer1.md</code> \u00e9s un fitxer nou en el repositori i que t\u00e9 canvis per confirmar (fer commit). Aix\u00f2 ens mostra com l\u2019arxiu ha passat de l\u2019estat sense seguiment a l\u2019estat Preparat, el que significa que ser\u00e0 guardat en el repositori en el seg\u00fcent commit.</p>"},{"location":"5.svc_git/#pas-4-fent-el-commit-del-fitxer","title":"Pas 4. Fent el commit del fitxer","text":"<p>Per afegir, ara s\u00ed, el fitxer en el repositori, fem el nostre primer commit:</p> <pre><code>$ git commit -m \"Afegint el primer commit\"\n\n[master (root-commit) c7e8b82] Afegint el primer commit\n 1 file changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 fitxer1.md\n</code></pre> <p>Amb el par\u00e0metre <code>-m</code> especifiquem el missatge associat a aquest commit. En cas de no afegir un missatge en aquest punt, ens obrir\u00e0 l\u2019editor per defecte per demanar-nos el text del missatge associat.</p> <p>Fixem-nos que en la primera l\u00ednia ens mostra el SHA-1 d\u2019aquest commit: <code>c7e8b82</code>.</p> <p>Si ara fem un git status, veurem que ens diu que no hi ha res per actualitzar, i que el directori de treball est\u00e0 net, \u00e9s a dir, que el que tenim en el directori de treball es correspon amb el que hi ha al repositori.</p> <pre><code>$ git status\n\nOn branch master\nnothing to commit, working tree clean\n</code></pre> <p>Tamb\u00e9 podem veure un registre dels commits amb l\u2019ordre:</p> <pre><code>$ git log\n\ncommit c7e8b82365924bc3a55a8208d38181187f0c1514(HEAD -&gt; master)\nAuthor: Alumne DAM &lt;alumne.dam.ieseljust@gmail.com&gt;\nDate: Wed Jun 23 12:45:14 2021 +0200\n\n    Afegint el primer commit\n</code></pre> <p>O b\u00e9 de forma m\u00e9s simplificada amb una l\u00ednia amb:</p> <pre><code>$ git log --oneline\nc7e8b82 (HEAD -&gt; master) Afegint el primer commit\n</code></pre> Exercici 1. Prova a modificar el fitxer i observa els canvis en l'estat. En quin estat es trobar\u00e0 ara l'arxiu? Qu\u00e8 haurem de fer perqu\u00e8 els canvis es reflectisquen en el repositori? Investiga sobre el par\u00e0metre <code>-a</code> de l'ordre <code>git commit</code> i intenta relacionar-lo amb aquest exercici. <p>En primer lloc, modifiquem el fitxer, b\u00e9 amb <code>vim</code> o qualsevol altre editor, i comprovem l'estat amb:</p> <pre><code>$ git status\n\nOn branch master\nChanges not staged for commit:\n(use \"git add &lt;file&gt;...\" to update what will be committed)\n(use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n  modified: fitxer1.md\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n</code></pre> <p>Com veiem, ens indica que el fitxer est\u00e0 en estat de modificat, i que no hi ha cap canvi preparat (staged) per a la propera confirmaci\u00f3. Si f\u00e9ssim ara un commit, les modificacions no es volcarien en el repositori. Per a aix\u00f2, tal com ens indica l\u2019\u00faltima l\u00ednia i vam veure en el flux de treball de git, haurem de fer abans un add per afegir aquests canvis al proper commit. Per a aix\u00f2:</p> <pre><code>$ git add fitxer1.md\n$ git commit -m \"Modificat fitxer1.md\"\n\n[master 0f89bda] Modificat fitxer1.md\n1 file changed, 1 insertion(+)\n</code></pre> <p>Ara s\u00ed que ha incorporat les modificacions del fitxer al repositori. Una altra opci\u00f3 seria utilitzar l\u2019opci\u00f3 <code>-a</code> del <code>git commit</code>. Com ens indica en la documentaci\u00f3:</p> <pre><code>-a, --all\nTell the command to automatically stage files that have been\nmodified and deleted, but new files you have not told Git about are\nnot affected.\n</code></pre> <p>Aix\u00f2 significa que en el mateix commit, es faran els <code>add</code> corresponents per a tots els fitxers que estigueren en estat de modificat, passant tots ells a preparats (staged), i immediatament incorporats al repositori:</p> <pre><code>$ git commit -a -m \"Modificat fitxer1.md\"\n</code></pre> Exercici 2. Crea dos fitxers, anomenats tmp1.md i tmp2.md i afegeix-los dins del repositori, comprovant l\u2019estat en cada pas, i verificant que estan en el repositori. <p>En primer lloc, crearem, dins del repositori, dos arxius per esborrar posteriorment:</p> <pre><code>$ touch tmp1.md\n$ touch tmp2.md\n</code></pre> <p>Si comprovem l\u2019estat:</p> <pre><code>$ git status\n\nOn branch master\nUntracked files:\n(use \"git add &lt;file&gt;...\" to include in what will be committed)\n  tmp1.md\n  tmp2.md\nnothing added to commit but untracked files present (use \"git add\" to track)\n</code></pre> <p>Com podem veure, ens indica que aquests dos fitxers no estan sota seguiment. Els afegim amb:</p> <pre><code>git add .\n</code></pre> <p>Amb aix\u00f2 indiquem que s\u2019afegisquen tots els fitxers del directori en qu\u00e8 estiguem. Si fem un <code>git status</code>, veurem com ara es marquen com a preparats (staged):</p> <pre><code>$ git status\n\nOn branch master\nChanges to be committed:\n(use \"git restore --staged &lt;file&gt;...\" to unstage)\n  new file: tmp1.md\n  new file: tmp2.md\n</code></pre> <p>Ara fem el commit:</p> <pre><code>$ git commit -a -m \"Afegim dos fitxers de prova\"\n\n[master c04b46e] Afegim dos fitxers de prova\n2 files changed, 0 insertions(+), 0 deletions(-)\ncreate mode 100644 tmp1.md\ncreate mode 100644 tmp2.md\n</code></pre> <p>Git i Visual Studio Code</p> <p>L'eina Visual Studio Code, com altres IDEs, porta integrat el suport a Git. Anem a veure com utilitzar-lo per gestionar un repositori.</p> <p>Per a aquest apartat pr\u00e0ctic, ja hem de disposar de git instal\u00b7lat i configurat correctament (par\u00e0metres <code>user.name</code> i <code>user.email</code>). Si ho tens ja configurat, anem enll\u00e0!</p> <ol> <li>Inicialitzaci\u00f3 d'un nou repositori</li> <li>Crea una nova carpeta per al teu projecte i obre-la amb VSCode.</li> <li>Des de la barra d'activitats de l'esquerra, selecciona la icona de control de codi font (Source Control, accessible amb <code>Shift+Ctrl+G</code>)   </li> <li> <p>Fes clic en \"Initialize Repository\" per inicialitzar un nou repositori Git en aquesta carpeta.</p> </li> <li> <p>Afegint fitxers al repositori</p> </li> <li>Crea un nou fitxer anomenat <code>fitxer1.md</code> i afegeix-hi algun contingut.</li> <li>Des de la vista de control de codi font, veur\u00e0s que el fitxer apareix com a Untracked. </li> </ol> <p></p> <ul> <li> <p>Fes clic en el s\u00edmbol <code>+</code> al costat del fitxer per afegir-lo a l'\u00e0rea de preparaci\u00f3 (staging area).</p> </li> <li> <p>Fent un commit</p> </li> <li>Escriu un missatge de commit en el camp de text de la vista de control de codi font, per exemple, \"Afegit fitxer1.md\".</li> <li> <p>Fes clic en el s\u00edmbol de confirmaci\u00f3 (check) per fer el commit, o prem <code>Ctrl+intro</code></p> </li> <li> <p>Modificant fitxers i fent nous commits</p> </li> <li>Modifica el contingut de <code>fitxer1.md</code>.</li> <li>Afegeix els canvis a l'\u00e0rea de preparaci\u00f3 i fes un nou commit amb un missatge descriptiu.</li> </ul>"},{"location":"5.svc_git/#esborrant-arxius","title":"Esborrant arxius","text":"<p>L\u2019esborrat d\u2019arxius \u00e9s una tasca bastant habitual quan treballem en un projecte. Amb git podem eliminar arxius de dues maneres: esborrant l\u2019arxiu en la zona de treball i despr\u00e9s en el repositori, o b\u00e9 esborrar-lo directament en el repositori i provocar el seu esborrat en la zona de treball i preparaci\u00f3.</p> <p>Per exemplificar aix\u00f2, partirem dels fitxers <code>tmp1.md</code> i <code>tmp2.md</code> creats en l\u2019exercici 2 anterior.</p>"},{"location":"5.svc_git/#esborrat-local-i-extensio-al-repositori","title":"Esborrat local i extensi\u00f3 al repositori","text":"<p>Per a aquest exemple, esborrarem el fitxer <code>tmp1.md</code> creat anteriorment.</p> <p>Pas 1. Eliminem el fitxer localment, en la zona de treball:</p> <pre><code>$ rm tmp1.md\n</code></pre> <p>I si ara observem l\u2019estat:</p> <pre><code>$ git status\n\nOn branch master\nChanges not staged for commit:\n (use \"git add/rm &lt;file&gt;...\" to update what will be committed)\n (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n    deleted: tmp1.md\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n</code></pre> <p>Ens indica que de moment, l\u2019esborrat no est\u00e0 preparat (staged) per al seg\u00fcent commit. Ac\u00ed ens indica que podem fer diverses opcions:</p> <ul> <li><code>git add</code> o <code>git rm</code>, per preparar els canvis per a la seg\u00fcent confirmaci\u00f3,</li> <li><code>git restore</code> per descartar els canvis, i deixar l\u2019arxiu original.</li> </ul> <p>Pas 2. Preparem la seg\u00fcent confirmaci\u00f3</p> <pre><code>$ git add tmp1.md\n</code></pre> <p>I comprovem l\u2019estat:</p> <pre><code>$ git status\n\n\nOn branch master\nChanges to be committed:\n (use \"git restore --staged &lt;file&gt;...\" to unstage)\n    deleted: tmp1.md\n</code></pre> <p>Amb aix\u00f2, en el seg\u00fcent commit es confirmaria l\u2019esborrat en el repositori. Aci encara tenim una opci\u00f3 per desfer l\u2019esborrat, que seria utilitzar <code>git restore --staged tmp1.md</code>, amb el que tornar\u00edem al pas anterior.</p> <p>Pas 3. Confirmar els canvis</p> <p>L\u2019\u00faltim pas ja \u00e9s confirmar aquest esborrat en el repositori:</p> <pre><code>$ git commit -m \"Eliminat tmp1.md\"\n\n\n[master 6dc5cad] Eliminat tmp1.md\n 1 file changed, 0 insertions(+), 0 deletions(-)\n delete mode 100644 tmp1.md\n ```\n\n### Esborrat directament del repositori\n\nEn aquesta segona opci\u00f3 veurem com esborrar directament el fitxer del repositori i provocar el seu esborrat en la zona de treball i preparaci\u00f3. Utilitzarem el fitxer `tmp2.md` creat anteriorment.\n\n**Pas 1. Eliminem el fitxer del repositori**\n\nPer eliminar el fitxer del repositori directament, fem:\n\n```bash\n$ git rm tmp2.md\n</code></pre> <p>Si ara observem l\u2019estat d\u2019aquest fitxer, veurem que ja \u00fanicament hem de fer el commit perqu\u00e8 s\u2019aplique l\u2019esborrat.</p> <pre><code>$ git status\n\nOn branch master\nChanges to be committed:\n (use \"git restore --staged &lt;file&gt;...\" to unstage)\n    deleted: tmp2.md\n</code></pre> <p>Observeu tamb\u00e9 que el fitxer ha desaparegut de l\u2019\u00e0rea de treball.</p> <p>Pas 2. Confirmem els canvis</p> <p>Per confirmar els canvis, com sempre:</p> <pre><code>$ git commit -m \"Eliminat tmp2.md\"\n</code></pre> <p>Esborrant arxius en VSCode</p> <p>Veiem com fer l'esborrat de fitxers amb VSCode.</p> <ol> <li>Crea un fitxer a la carpeta del prjecte (des de terminal o des de VSCode) anomenat <code>tmp3.md</code> amb un contingut qualsevol, afig-lo al control de canvis i fes el corresponent commit.</li> <li>Des de l'explorador de fitxers de VSCode, selecciona el fitxer que vols esborrar i fes clic amb el bot\u00f3 dret del ratol\u00ed.</li> <li>Selecciona l'opci\u00f3 \"Delete\" per esborrar el fitxer (o directament prem el bot\u00f3 de suprimir).</li> <li>Ves a la vista de Control de codi font, i veur\u00e0s que el fitxer apareix com a \"Deleted\". Fes clic en el s\u00edmbol <code>+</code> al costat del fitxer per afegir-lo a l'\u00e0rea de preparaci\u00f3 (staging area). </li> <li>Escriu un missatge de commit en el camp de text de la vista de control de codi font, per exemple, \"Esborrat fitxer tmp3.md\".</li> <li>Fes clic en el boto de confirmaci\u00f3 per fer el commit.</li> </ol>"},{"location":"5.svc_git/#movent-arxius","title":"Movent arxius","text":"<p>Per moure o reanomenar fitxers podem utilitzar els dos mateixos mecanismes que per a l\u2019esborrat: primer en el directori de treball i afegint els canvis per al proper commit o fer-ho directament.</p> <p>Com a pas previ, creem un fitxer que ser\u00e0 el que moguem en el directori de treball, i l\u2019afegim al repositori:</p> <pre><code>$ touch tmp_mv.md\n\n$ git add tmp_mv.md\n\n$ git commit -m \"creat tmp_mv.md\"\n</code></pre>"},{"location":"5.svc_git/#reanomenat-local-i-extensio-al-repositori","title":"Reanomenat local i extensi\u00f3 al repositori","text":"<p>Pas 1. Reanomenat local</p> <p>Per reanomenar el fitxer utilitzem l\u2019ordre <code>mv</code> (move), que reanomena el fitxer:</p> <pre><code>mv tmp_mv.md tmp_mv_1.md\n</code></pre> <p>Si observem l\u2019estat del SCV:</p> <pre><code>$ git status\n\n\nOn branch master\nChanges not staged for commit:\n (use \"git add/rm &lt;file&gt;...\" to update what will be committed)\n (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n    deleted: tmp_mv.md\nUntracked files:\n (use \"git add &lt;file&gt;...\" to include in what will be committed)\n    tmp_mv_1.md\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n</code></pre> <p>Com veiem, ens est\u00e0 indicant que s'ha eliminat el fitxer <code>tmp_mv.md</code>, i s'ha creat un fitxer nou, que est\u00e0 sense seguiment, que \u00e9s <code>tmp_mv_1.md</code>. B\u00e0sicament, una operaci\u00f3 de reanomenat podria considerar-se aix\u00f2, un esborrat de l'original, i la creaci\u00f3 d'un nou fitxer amb el contingut del primer.</p> <p>Pas 2. Afegir nous fitxers i canvis al seg\u00fcent commit</p> <p>Aix\u00ed doncs, ara el que ens queda seria afegir l'esborrat del fitxer en la seg\u00fcent confirmaci\u00f3:</p> <pre><code>$ git add tmp_mv.md\n</code></pre> <p>Aix\u00ed com afegir el fitxer nou al control de versions:</p> <pre><code>$ git add tmp_mv_1.md\n</code></pre> <p>Amb aix\u00f2, l\u2019estat del SCV ser\u00e0:</p> <pre><code>$ git status\n\nOn branch master\nChanges to be committed:\n (use \"git restore --staged &lt;file&gt;...\" to unstage)\n    renamed: tmp_mv.md -&gt; tmp_mv_1.md\n</code></pre> <p>Com veiem, ac\u00ed ja ens indica que s\u2019ha reanomenat el fitxer.</p> <p>Pas 3. Confirmem els canvis</p> <p>Per confirmar els canvis:</p> <pre><code>git commit -m \"Reanomenat tmp_mv.md a tmp_mv_1.md\"\n\n[master 9913681] Reanomenat tmp_mv.md a tmp_mv_1.md\n 1 file changed, 0 insertions(+), 0 deletions(-)\n rename tmp_mv.md =&gt; tmp_mv_1.md (100%)\n</code></pre>"},{"location":"5.svc_git/#reanomenat-directe-en-el-repositori","title":"Reanomenat directe en el repositori","text":"<p>Seguint l\u2019exemple anterior, creem de nou el fitxer <code>tmp_mv.md</code> per reanomenar-lo com <code>tmp_mv_2.md</code>:</p> <pre><code>touch tmp_mv.md\ngit add tmp_mv.md\ngit commit -m \"Afegit tmp_mv.md per al seu segon reanomenat\"\n</code></pre> <p>Pas 1. Movem directament el fitxer en el SCV</p> <p>Per reanomenar el fitxer en el SCV, utilitzarem git mv:</p> <pre><code>$ git mv tmp_mv.md tmp_mv_2.md\n</code></pre> <p>Aix\u00f2 seria l\u2019equivalent a haver fet el reanomenat de forma local i haver incorporat ja els canvis i arxius generats per al seg\u00fcent commit. Si observem l\u2019estat del SCV:</p> <pre><code>$ git status\n\nOn branch master\nChanges to be committed:\n (use \"git restore --staged &lt;file&gt;...\" to unstage)\n    renamed: tmp_mv.md -&gt; tmp_mv_2.md\n</code></pre> <p>Veiem que estem en el pas 2 de l\u2019apartat anterior. Aix\u00ed doncs, nom\u00e9s quedaria confirmar aquests canvis.</p> <p>Pas 2. Confirmant els canvis</p> <pre><code>$ git commit -m \"Reanomenat tmp_mv.md a tmp_mv_2.md\"\n\n[master 42803e7] Reanomenat tmp_mv.md a tmp_mv_2.md\n 1 file changed, 0 insertions(+), 0 deletions(-)\n rename tmp_mv.md =&gt; tmp_mv_2.md (100%)\n</code></pre> <p>Renomenant fitxers en VSCode</p> <p>Anem a vore com moure fitxers des de VSCode. </p> <ol> <li>Crea un fitxer <code>tmp4.md</code> a la carpeta de treball des de VSCode, afig-lo al control de versions i fes el commit corresponents.</li> <li>En l'explorador de fitxers, fes clic sobre ell amb el bot\u00f3 dret, i seleccoina l'opci\u00f3 \"Rename\", o directament prem la tecla <code>F2</code>.</li> <li>Canvia-li el nom, per exemple a <code>tmp5.md</code>.</li> <li>Des de la vista de control de codi font, vor\u00e0s que el fitxer amb el nom anterior <code>tmp4.md</code> apareix com a <code>D - Deleted</code>, i el fitxer amb el nom nou apareix com a <code>U - Untracked</code>. Observa que a la icona d'aquesta vista, ens indica que hi ha dos canvis, no un (\u00e9s a dir, en lloc d'un renomenat, elimina un fitxer i afig l'altre). </li> <li>Fes clic en el s\u00edmbol <code>+</code> al costat del fitxer nou per afegir-lo a l'\u00e0rea de preparaci\u00f3 (staging area) i al fitxer <code>tmp3.md</code> per confirmar l'eliminaci\u00f3 del fitxer amb el nom antic.</li> <li>Escriu un missatge de commit, per exemple, \"Reanomenat tmp4.md a tmp5.md\".</li> <li>Fes clic en el bot\u00f3 de confirmaci\u00f3 per fer el commit.</li> </ol>"},{"location":"5.svc_git/#desfent-canvis-entre-la-zona-de-preparacio-i-treball","title":"Desfent canvis entre la zona de preparaci\u00f3 i treball","text":"<p>Quan tenim canvis pendents en la zona de preparaci\u00f3 (staged), podem desfer-los utilitzant el subcomandament de <code>git checkout</code>.</p> <p>Per exemple, anem a modificar el fitxer <code>tmp_mv_1.md</code> i afegir-li una l\u00ednia (utilitzarem l'ordre <code>echo</code> i una redirecci\u00f3 per afegir l\u00ednies al fitxer):</p> <pre><code>$ echo \"Prova per desfer canvis\" &gt;&gt; tmp_mv_1.md\n</code></pre> <p>Si ara consultem l\u2019estat del SCV:</p> <pre><code>$ git status\n\nOn branch master\nChanges not staged for commit:\n (use \"git add &lt;file&gt;...\" to update what will be committed)\n (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n    modified: tmp_mv_1.md\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n</code></pre> <p>Veiem que marca el fitxer com a modificat. Si ara el que volem \u00e9s desfer aquests canvis, tal com ens indica git, podem utilitzar l'ordre <code>git restore fitxer</code>, per restaurar-lo:</p> <pre><code>$ git restore tmp_mv_1.md\n$git status\n\nOn branch master\nnothing to commit, working tree clean\n</code></pre> <p>L'ordre <code>git restore</code> va apar\u00e8ixer en la versi\u00f3 2.23 de git (2019). Anteriorment, s\u2019utilitzava l'ordre <code>git checkout</code> (que podem utilitzar tamb\u00e9), utilitzat tamb\u00e9 per treballar amb diferents branques. Amb la introducci\u00f3 de <code>git restore</code> i <code>git switch</code> en la versi\u00f3 2.23, es va eliminar aquesta ambig\u00fcitat.</p>"},{"location":"5.svc_git/#altres-operacions-dinteres","title":"Altres operacions d\u2019inter\u00e8s","text":""},{"location":"5.svc_git/#ignorant-fitxers-en-git-el-fitxer-gitignore","title":"Ignorant fitxers en git. El fitxer .gitignore.","text":"<p>Moltes vegades no desitgem que certs tipus d\u2019arxius es guarden en el repositori: executables, fitxers comprimits resultats de l\u2019empaquetat, directoris de llibreries, directoris o fitxers amb configuraci\u00f3, contrasenyes o par\u00e0metres de connexi\u00f3, etc.</p> <p>Per a aix\u00f2, existeix el fitxer <code>.gitignore</code>, que guardem en la pr\u00f2pia arrel del directori de treball, i en el qual especifiquem els diferents patrons de noms d\u2019arxiu que no s\u2019inclouran mai en el control de versions.</p> <p>Aquest fitxer cont\u00e9 diverses l\u00ednies que seguiran les seg\u00fcents regles:</p> <ul> <li>Cada l\u00ednia contindr\u00e0 un patr\u00f3.</li> <li>S\u2019admeten l\u00ednies en blanc com a separador per millorar la llegibilitat.</li> <li>Els comentaris comencen amb <code>#</code>.</li> <li>El prefix <code>!</code> nega el patr\u00f3 (far\u00e0 que s\u00ed incloguen a git els arxius indicats).</li> <li>Podem utilitzar el comod\u00ed <code>*</code> per indicar qualsevol cadena de car\u00e0cters.</li> <li>Podem utilitzar la interrogaci\u00f3 (<code>?</code>) per reempla\u00e7ar un car\u00e0cter qualsevol.</li> <li>Podem utilitzar expressions regulars tipus <code>[0-9]</code>, <code>[ao]</code>.</li> </ul> <p>Veiem un exemple d\u2019aquest tipus de fitxer <code>.gitignore</code>:</p> <pre><code># Ignorar els fitxers amb nom temporal_6.txt i temporal_7.zip\ntemporal_6.txt\ntemporal_7.zip\n\n# Ignorar els fitxers amb extensi\u00f3 zip, gz, changes o deb:\n*.zip\n*.gz\n*.changes\n*.deb\n\n# Ignorar els fitxers amb extensi\u00f3 .log de la carpeta log, aix\u00ed\n# com les extensions .log0, .log1, log2...\nlog/*.log\nlog/*.log[0-9]\n\n# Ignorar tots els fitxers del directori imatges\nimatges/*\n\n# Ignorar tots els fitxers que acaben en 'a' o 'o' de la \n# carpeta compilats\ncompilats/*[ao]\n</code></pre> <p>Ara nom\u00e9s quedaria afegir aquest fitxer al control de versions i confirmar els canvis.</p> <p>??? question \"Exercici 3. Crea un fitxer <code>.gitignore</code> de manera que s\u2019ignoren tots els fitxers compilats de java. Afegeix-lo al repositori. Posteriorment, crea un fitxer font senzill en Java, compila\u2019l, i prepara tot per confirmar-ho en un commit. Comprova si els fitxers compilats s\u2019han afegit o no.`</p> <p>Creem en primer lloc el fitxer .gitignore, amb el seg\u00fcent contingut:</p> <pre><code># Ignorem els compilats de java\n*.class\n</code></pre> <p>Preparem el fitxer per al seg\u00fcent commit i el confirmem:</p> <pre><code>$ git add .gitignore\ngit commit -m \"Afegit .gitignore\"\n</code></pre> <p>Ara, creem un fitxer en java, per exemple un <code>Hello.java</code> que siga un Hola M\u00f3n.</p> <pre><code>class Hello {\n public static void main(String[] args) {\n System.out.println(\"Hola M\u00f3n!\"); \n }\n}\n</code></pre> <p>Compilem:</p> <pre><code>$ javac Hello.java\n</code></pre> <p>Preparem tot per al seg\u00fcent commit, i veiem com ens indica que s\u2019ignorar\u00e0 el .class:</p> <pre><code>$ git add *\n\nThe following paths are ignored by one of your .gitignore files:\nHello.class\nUse -f if you really want to add them.\n</code></pre>"},{"location":"5.svc_git/#revertir-a-lestat-dun-commit","title":"Revertir a l\u2019estat d\u2019un commit","text":"<p>Per revertir l\u2019estat d\u2019un commit, utilitzem l'ordre git revert, de la seg\u00fcent manera:</p> <pre><code>$ git revert SHA-1_CURT_DEL_COMMIT_A_REVERTIR\n</code></pre> <p>Vegem-ho amb un exemple.</p> <p>Pas 1. Consultem els diferents commits realitzats:</p> <p>Tal com ja hem fet anteriorment, per veure els commits realitzats, utilitzem l'ordre git log:</p> <pre><code>$ git log --oneline\nb885874 (HEAD -&gt; master) Added Hello.java\n963f385 Added .gitignore\n42803e7 Reanomenat tmp_mv.md a tmp_mv_2.md\nfd760e3 Afegit tmp_mv.md per al seu segon reanomenat\n9913681 Reanomenat tmp_mv.md a tmp_mv_1.md\n562aa01 creat tmp_mv.md\na380964 Eliminat tmp2.md\n6dc5cad Eliminat tmp1.md\nc04b46e Afegits dos fitxers de prova\n0f89bda Modificat fitxer1.md\nc7e8b82 Afegint el primer commit\n</code></pre> <p>Pas 2. Localitzem el commit on es va produir el canvi i el revertim</p> <p>Si desitgem, per exemple, recuperar el fitxer tmp1.md eliminat en el commit <code>6dc5cad</code>, farem:</p> <pre><code>$ git revert 6dc5cad\n</code></pre> <p>Que ens demanar\u00e0 un nou missatge per al registre i autom\u00e0ticament crear\u00e0 un nou commit amb aquest missatge i els canvis aplicats.</p> <p>Si ara inspeccionem de nou el llistat de commits:</p> <pre><code>git log --oneline\n\ned0ed9c (HEAD -&gt; master) Revert \"esborrat tmp1\"\nb885874 Added Hello.java\n963f385 Added .gitignore\n42803e7 Reanomenat tmp_mv.md a tmp_mv_2.md\nfd760e3 Afegit tmp_mv.md per al seu segon reanomenat\n9913681 Reanomenat tmp_mv.md a tmp_mv_1.md\n562aa01 creat tmp_mv.md\na380964 Eliminat tmp2.md\n6dc5cad Eliminat tmp1.md\nc04b46e Afegits dos fitxers de prova\n0f89bda Modificat fitxer1.md\nc7e8b82 Afegint el primer commit\n</code></pre>"},{"location":"5.svc_git/#eliminant-arxius-no-seguits","title":"Eliminant arxius no seguits","text":"<p>Podem eliminar els arxius que no estiguen sota el control de versions en el directori de treball mitjan\u00e7ant l\u2019ordre:</p> <pre><code>$ git clean -f\n</code></pre> <p>Per exemple, si creem tres fitxers:</p> <pre><code>$ touch f1 f2 f3\n</code></pre> <p>Si veiem l\u2019estat de git:</p> <pre><code>git status\n\nHEAD detached at refs/heads/master\nUntracked files:\n (use \"git add &lt;file&gt;...\" to include in what will be committed)\n    f1\n    f2\n    f3\nnothing added to commit but untracked files present (use \"git add\" to track)\n</code></pre> <p>Podem netejar els fitxers que no estiguen sota control de versions amb:</p> <pre><code>$ git clean -f\n\nRemoving f1\nRemoving f2\nRemoving f3\n</code></pre> <p>Si a m\u00e9s volem eliminar tamb\u00e9 els directoris no utilitzats far\u00edem (suposem que tenim dos directoris buits <code>directory1</code> i <code>directory2</code>):</p> <pre><code>$ git clean -f -d\n\nRemoving directory1/\nRemoving directory2/\n</code></pre> <p>Eliminant fitxers no seguits des de VSCode</p> <p>Per eliminar fitxers que no estan en seguiment podem eliminar-los tant des de l'explorador de fitxers com des del sistema de control de versions.</p> <ol> <li>Crea un fitxer, anomenat <code>tmp6.md</code>, i no l'afisques al control de versions.</li> </ol> <p>Amb aquest fitxer, ara podr\u00e0s:</p> <p>a. Eliminar-lo directament, des de l'explorador de fitxers,    b. Des de la vista del sistema de control de versions, on vor\u00e0s que s'indica que hi ha un canvi, fent clic al bot\u00f3 Revert, revertir\u00e0s l'acci\u00f3 d'haver afegit el fitxer.</p> <p></p> <p>Tant en un com en altre cas, el fitxer ser\u00e0 com si no hagu\u00e9s existit per al control de versions.</p> <p>Exercicis</p> <p>Una vegada hages finalitzat, c\u00f2pia com a codi el resultat de l'ordre:</p> <pre><code>git log\n</code></pre> <p>I adjunta al final del document tamb\u00e9 una captura de pantalla del resultat de:</p> <pre><code>git log --oneline\n</code></pre>"},{"location":"6.branques/","title":"6. Treballant amb branques","text":""},{"location":"6.branques/#branques","title":"Branques","text":"<p>Quan hem de fer canvis al nostre codi que no siguen immediats, ja siga perqu\u00e8 volem corregir errors, o per afegir codi nou que pot ser inestable, el m\u00e9s pr\u00e0ctic \u00e9s utilitzar branques. Recordem que una branca \u00e9s una bifurcaci\u00f3 del codi principal que ens permet seguir un cam\u00ed de desenvolupament diferent, i b\u00e9 descartar els canvis realitzats o fusionar-los amb la branca principal.</p> <p>Tot i que pr\u00e0cticament tots els sistemes de control de versions ofereixen mecanismes per treballar amb branques, la manera com Git les gestiona fa que sobreisca sobre la resta, sent extremadament r\u00e0pid i senzill realitzar el canvi.</p> <p>Vegem-ne un petit exemple de funcionament:</p> <p></p> <p>Com podem veure, hi ha tres confirmacions a la branca principal (master). A partir d'aquest tercer commit, es crea la branca de proves, a la qual s'afegeixen tres commits m\u00e9s, corresponents a canvis no definitius al codi. Finalment, una vegada validats aquests canvis i comprovat-ne el funcionament, es fusionen amb el contingut de la branca M\u00e0ster.</p> <p>Hem de tenir en compte, que a cada moment, el HEAD apuntar\u00e0 a l'\u00faltim commit realitzat.</p>"},{"location":"6.branques/#treballant-amb-branques","title":"Treballant amb branques","text":"<p>Anem a fer un cas pr\u00e0ctic on crearem un nou repositori per treballar amb branques. \u00c9s important que recordeu que una branca era una bifurcaci\u00f3 de la branca principal de desenvolupament que ens permet seguir treballant en noves funcionalitats per a les nostres aplicacions o fent proves sense necessitat de modificar la branca principal.</p>"},{"location":"6.branques/#preparacio-del-repositori","title":"Preparaci\u00f3 del repositori","text":"<p>Anem a partir d'una carpeta per a un projecte sota control de versions. Per preparar aquest escenari, fem els passos seg\u00fcents:</p> <ul> <li>Pas 1. Creem la carpeta i inicialitzem el repositori</li> </ul> <pre><code>$ mkdir projecte2\n$ cd proyecto2/\n$ git init\nInitialized empty Git repository in /home/dam/scv/projecto2/.git/\n</code></pre> <ul> <li>Pas 2. Creem contingut al repositori</li> </ul> <p>Ara crearem un fitxer i afegirem contingut. Farem dues confirmacions, una per operaci\u00f3:</p> <pre><code>$ touch fitxer1.md\n$ git add fitxer1.md\n$ git commit -a -m \"Afegit fitxer1.md\"\n\n[master (root-commit) 63d1a06] Afegit fitxer1.md\n 1 file changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 fitxer1.md\n\n$ echo \"# Text de prova 1\" &gt; fitxer1.md\n$ git commit -a -m \"Modificat fitxer1.md\"\n\n[master 5513ed9] Modificat fitxer1.md\n 1 file changed, 1 insertion(+)\n</code></pre> <p>Veiem el registre de git:</p> <pre><code>$ git log --oneline\n5513ed9 (HEAD -&gt; master) Modificat fitxer1.md\n63d1a06 Afegit fitxer1.md\n</code></pre> <ul> <li>Pas 3. Creaci\u00f3 d'una branca de proves</li> </ul> <p>Crearem ara una branca que anomenarem <code>proves</code>. Per aix\u00f2 farem servir l'ordre <code>git branch</code>:</p> <pre><code>$ git branch proves\n</code></pre> <p>Per consultar les branques disponibles fem servir la mateixa ordre, sense especificar el nom:</p> <pre><code>$ git branch\n* m\u00e0ster\n proves\n</code></pre> <p>L'ordre <code>git branch</code> ens mostra les branques existents, i indica amb un asterisc a quina branca ens trobem.</p> <ul> <li>Pas 4. Treballem a la branca de proves</li> </ul> <p>Per passar a una branca concreta, farem servir <code>git checkout</code>:</p> <pre><code>$ git checkout proves\n\nSwitched to branch 'proves'\n\n$ git branch\n m\u00e0ster\n* proves\n</code></pre> <p>Com veiem, ara estem a la branca proves. Crearem un fitxer que anomenarem <code>prova1.md</code>:</p> <pre><code>$ touch prova1.md\n$ git add prova1.md\n$ git commit -m \"Afegit prova1.md\"\n\n[proves 35d135f] Afegit prova1.md\n 1 file changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 prova1.md\n</code></pre> <p>Si ara observem el log de git:</p> <pre><code>$ git log --oneline\n35d135f (HEAD -&gt; proves) Afegit prova1.md\n5513ed9 (master) Modificat fitxer1.md\n63d1a06 Afegit fitxer1.md\n</code></pre> <p>Veiem com la branca m\u00e0ster es va quedar en un commit anterior i que el HEAD apunta a aquest \u00faltim commit a la branca de proves.</p> <ul> <li>Pas 5. Saltant entre branques</li> </ul> <p>Si volem tornar a la branca principal, haurem d'utilitzar novament l'ordre <code>git checkout</code>. Vegem abans un detall important. Si llistem el contingut del directori actual:</p> <pre><code>$ ls\nfitxer1.md prova1.md\n</code></pre> <p>Veiem que tenim el <code>fitxer1.md</code> creat a la branca principal abans de fer la bifurcaci\u00f3 i el fitxer prova1.md generat en aquesta branca.</p> <p>Si tornem a la branca principal i observem el contingut:</p> <pre><code>$ git checkout master\nSwitched to branch 'master'\n\n$ ls\nfitxer1.md\n</code></pre> <p>Com veiem, nom\u00e9s disposem del fitxer.md que \u00e9s el contingut que es correspon a la branca master. Observeu que \u00e9s git qui s'encarrega a trav\u00e9s de l'ordre <code>checkout</code>, de portar el contingut de cadascuna de les branques al directori de treball.</p> <p>Si ara, dins de la branca master consultem el registre de canvis:</p> <pre><code>$ git log --oneline\n5513ed9 (HEAD -&gt; master) Modificat fitxer1.md\n63d1a06 Afegit fitxer1.md\n</code></pre> <p>Veiem que apareix el log de la branca m\u00e0ster, que \u00e9s la branca en qu\u00e8 estem treballant en aquests moments.</p> <ul> <li>Pas 6. Combinant branques</li> </ul> <p>Una vegada hem finalitzat les proves o el desenvolupament experimental que va provocar la bifucaci\u00f3 del projecte tenim dues opcions. B\u00e9 descartar aquesta branca perqu\u00e8 la funcionalitat o les proves no s\u00f3n les esperades, o b\u00e9 combinar aquesta branca amb la principal.</p> <p>Per combinar el contingut de la branca proves amb la branca m\u00e0ster principal, hem d'utilitzar l'ordre <code>git merge</code> de la manera seg\u00fcent.</p> <p>Des de la branca m\u00e0ster del nostre projecte:</p> <pre><code>$ git merge proves\nUpdating 5513ed9..35d135f\nFast-forward\n prova1.md | 0\n 1 file changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 prova.md\n ```\n\nCom ens indica, actualitza el commit amb *SHA-1 5513ed9* amb el commit amb el *SHA-1 35d135f*, on s'ha afegit el fitxer `prova1.md`.\n\nSi analitzem ara el registre:\n\n```bash\n$ git log --oneline\n\n35d135f (HEAD -&gt; master, proves) Afegit prova1.md\n5513ed9 Modificat fitxer1.md\n63d1a06 Afegit fitxer1.md\n</code></pre> <p>Com veiem, el HEAD apunta a l'\u00faltim commit, tant a la branca m\u00e0ster com a proves, indicant que totes dues estan sincronitzades. Ara b\u00e9, amb el <code>merge</code>, el que hem fet \u00e9s portar el contingut de la branca proves a la branca m\u00e0ster, per\u00f2 aix\u00f2 no elimina la branca. Aix\u00f2 ens permet disposar d'una branca principal, amb les versions estables i provades dels nostres programes, i una altra branca de desenvolupament, sobre la qual treballarem els canvis futurs de l'aplicaci\u00f3, i que combinarem amb la principal un cop estiguin aquests canvis finalitzats i provats.</p> <ul> <li>Pas 7. Descartant els canvis d'una branca</li> </ul> <p>Quan el resultat del desenvolupament en una branca no \u00e9s satisfactori i volem descartar-lo, farem servir l'ordre <code>git reset</code>.</p> <p>Per exemple, si ara a la branca de proves anterior haur\u00edem afegit alguns fitxers m\u00e9s en diversos commits:</p> <pre><code>$ git checkout proves\n\nSwitched to branch 'proves'\n\n$ echo \"Contingut a descartar 1\" &gt; fitxer_a_descartar_1.md\n\n$ git add fitxer_a_descartar_1.md\n\n$ git commit -m \"Afegit fitxer_a_descartar_1.md.\"\n\n[proves f91a296] Afegit fitxer_a_descartar_1.md.\n 1 file changed, 1 insertion(+)\n create mode 100644 fitxer_a_descartar_1.md\n\n$ echo \"Contingut a descartar 2\" &gt; fitxer_a_descartar_2.md\n\n$ git add fitxer_a_descartar_2.md\n\n$ git commit -m \"Afegit fitxer_a_descartar_2.md.\"\n\n[proves 819d75e] Afegit fitxer_a_descartar_2.md.\n 1 file changed, 1 insertion(+)\n create mode 100644 fitxer_a_descartar_2.md\n\n$ echo \"Contingut a descartar 3\" &gt; fitxer_a_descartar_3.md\n\n$ git add fitxer_a_descartar_3.md\n\n$ git commit -m \"Afegit fitxer_a_descartar_3.md.\"\n\n[proves 0d27dd0] Afegit fitxer_a_descartar_3.md.\n 1 file changed, 1 insertion(+)\n create mode 100644 fitxer_a_descartar_3.md\n</code></pre> <p>El log de git queda de la manera seg\u00fcent:</p> <pre><code>$ git log --oneline\n\n0d27dd0 (HEAD -&gt; proves) Afegit fitxer_a_descartar_3.md.\n819d75e Afegit fitxer_a_descartar_2.md.\nf91a296 Afegit fitxer_a_descartar_1.md.\n35d135f (master) Afegit prova1.md\n5513ed9 Modificat fitxer1.md\n63d1a06 Afegit fitxer1.md\n</code></pre> <p>Si el que desitgem ara \u00e9s descartar els canvis realitzats i tornar al punt on vam fer la bifurcaci\u00f3 de m\u00e0ster (identificador SHA-1 35d135f), ho podem fer amb:</p> <pre><code>$ git reset --hard 35d135f\n\nHEAD is now at 35d135f Afegit prova1.md\n</code></pre> <p>Amb aix\u00f2 s'han descartat tots els canvis realitzats a partir del commit indicat:</p> <pre><code>$ git log --oneline\n\n35d135f (HEAD -&gt; master, proves) Afegit prova1.md\n5513ed9 Modificat fitxer1.md\n63d1a06 Afegit fitxer1.md\n</code></pre> <p>Hem de destacar que aquesta operaci\u00f3 de reset pot realitzar-se tamb\u00e9 a la branca m\u00e0ster o qualsevol altra branca i resetejar qualsevol commit indicant el seu dientificador SHA-1. En aquest cas l'hem utilitzat en el cas particular de tornar a l'estat en qu\u00e8 fusionem la branca amb la branca principal, per\u00f2 podria ser qualsevol.</p> <ul> <li>Pas 8. Eliminant una branca per complet</li> </ul> <p>Finalment, si el que desitgem \u00e9s eliminar completament una branca, farem servir l'ordre <code>git branch</code>, amb el par\u00e0metre <code>-d</code> o <code>-D</code>, i indicant-li el nom de branca a eliminar.</p> <p>Si la branca que volem eliminar ha estat fusionada amb la branca m\u00e0ster i totes dues s\u00f3n iguals, podem utilitzar el par\u00e0metre <code>-d</code>:</p> <pre><code>$ git branch -d proves\n\nDeleted branch proves (was 35d135f).\n</code></pre> <p>D'altra banda, en cas que la branca no estigu\u00e9s fusionada, ens avisar\u00e0 amb un missatge semblant al seg\u00fcent:</p> <pre><code>error: The branch 'proves' is not fully merged\n</code></pre> <p>De manera que si volem descartar realment els canvis sense fussionar les branques, farem servir el par\u00e0metre <code>-D</code>:</p> <pre><code>$ git branch -D proves\n</code></pre>"},{"location":"7.github/","title":"7. Repositoris remots amb Git. Github.","text":""},{"location":"7.github/#introduccio","title":"Introducci\u00f3","text":"<p>Com ja hem comentat, Git \u00e9s un sistema de control de versions distribu\u00eft, de manera que el repositori es troba f\u00edsicament distribu\u00eft entre diferents equips.</p> <p>En l'apartat anterior, hem vist com treballar amb Git de forma local, inicialitzant repositoris, afegint continguts, i creant diferents branques sobre les quals treballar amb codi inestable o de proves.</p> <p>L'actual mercat de treball s'ha descentralitzat notablement, donant lloc a equips de treball deslocalitzats i fent necessaris certs mecanismes de coordinaci\u00f3 i organitzaci\u00f3 del treball en aquests equips.</p> <p>En aquest apartat abordarem el treball amb Git de forma distribu\u00efda, per poder accedir a repositoris remots, i poder combinar el nostre treball amb el d'altres desenvolupadors del nostre equip.</p> <p>D'altra banda, introduirem la plataforma de desenvolupament col\u00b7laboratiu Github, que ens permet allotjar els nostres projectes i gestionar el control de versions amb Git. La plataforma, creada el 2008, s'utilitza principalment per allotjar projectes de programari lliure de forma p\u00fablica, i el 2018 va ser adquirida per Microsoft. Actualment, Github compta amb m\u00e9s de 100 milions d'usuaris, i m\u00e9s de 420 milions de projectes.</p> <p>A m\u00e9s del codi i el control de versions per als projectes, ofereix altres serveis, com una wiki, p\u00e0gina web, eines gr\u00e0fiques i col\u00b7laboratives o l'IDE al n\u00favol Codespaces, per interactuar amb els repositoris, entre altres.</p>"},{"location":"7.github/#repositoris-remots","title":"Repositoris remots","text":"<p>Per ara hem vist com crear i gestionar repositoris amb Git, aix\u00ed com treballar amb diferents branques, sempre de forma local. Quan treballem en un equip deslocalitzat, necessitem compartir aquest treball local. \u00c9s ac\u00ed on entra en acci\u00f3 l'arquitectura distribu\u00efda de Git.</p> <p>Com ja sabem, Git \u00e9s un SCV distribu\u00eft. Aix\u00f2 significa que el repositori complet pot estar ubicat en diferents ordinadors, en lloc de centralitzar-se en un \u00fanic servidor. No obstant aix\u00f2, aix\u00f2 no significa que no es requerisca d'un servidor que s'encarregue de mantenir el que seria el repositori principal.</p>"},{"location":"7.github/#directoris-de-treball-i-repositoris-de-tipus-bare","title":"Directoris de treball i repositoris de tipus bare","text":"<p>En els exemples pr\u00e0ctics anteriors hem utilitzat l'ordre <code>git init</code> per inicialitzar un directori com a directori de treball en el qual poder realitzar un control de versions de forma local. En aquest directori de treball, Git genera en la pr\u00f2pia arrel el directori ocult <code>.git</code>, dins del qual s'ubica tota la informaci\u00f3 necess\u00e0ria per al control de versions de forma local.</p> <p>Quan diversos desenvolupadors necessiten compartir el seu treball, ho faran a trav\u00e9s d'un repositori de tipus bare, la traducci\u00f3 del qual podria ser repositori descobert, buit o net, i que s'ubicar\u00e0 en un servidor centralitzat. Els equips de treball, utilitzaran una c\u00f2pia d'aquest repositori per treballar de forma local, i sincronitzaran el seu treball amb el repositori central.</p> <p>Aquesta arquitectura podria veure's de la seg\u00fcent manera:</p> <p></p> <p>Aquesta segueix sent una arquitectura distribu\u00efda, ja que el repositori es troba en els diferents equips de treball, en forma de repositori local, per\u00f2 a m\u00e9s, existeix un servidor que emmagatzema el repositori descobert. Aquest repositori no tindr\u00e0 directori de treball, de manera que el seu contingut tindr\u00e0 la mateixa estructura que el contingut del directori <code>.git</code> dels repositoris locals.</p> <p>El flux de treball en aquests casos ser\u00e0 el seg\u00fcent:</p> <ol> <li>Creaci\u00f3 del repositori de tipus bare en el servidor. (<code>git init --bare</code>)</li> <li>Clonaci\u00f3 del repositori en cada equip de treball. (<code>git clone adre\u00e7a_del_repositori</code>)</li> <li>Treball en la c\u00f2pia local del repositori i el directori de treball. Aci s'afegeixen o eliminen recursos (<code>add/rm</code>), es confirmen en el repositori local (<code>commit</code>), etc\u00e8tera.</li> <li>Sincronitzaci\u00f3 entre el repositori local i el del servidor. Quan s'envien dades al servidor es realitza una operaci\u00f3 de <code>PUSH</code> (<code>git push</code>), i quan desitgem obtenir dades del servidor s'utilitza <code>FETCH</code> (<code>git fetch</code>) i <code>PULL</code> (<code>git pull</code>).</li> </ol> <p>Profunditzarem en aquest flux de treball de forma pr\u00e0ctica en el cas pr\u00e0ctic seg\u00fcent.</p> <p>Mans a l'obra...</p> <p>En aquest punt, podem tractar ja el primer punt de l'apartat pr\u00e0ctic \"Repositoris Remots\", on treballarem amb m\u00e9s detall i de forma pr\u00e0ctica la creaci\u00f3 i gesti\u00f3 de repositoris remots.</p> <p>Anem a la pr\u00e0ctica!</p>"},{"location":"7.github/#github","title":"Github","text":"<p>Quan desitgem crear els nostres projectes per treballar en equip, o simplement per disposar d'un repositori centralitzat a Internet amb el qual portar el control de versions dels nostres projectes mitjan\u00e7ant Git, Internet ens ofereix un gran ventall de possibilitats.</p> <p>Potser la m\u00e9s popular d'elles sigui Github, encara que des de la compra d'aquesta per part de Microsoft i les retic\u00e8ncies que aquest fet va generar en la comunitat, han crescut altres plataformes com Gitlab o Bitbucket.</p> <p>Aix\u00ed i tot, Github compta amb una creixent base d'usuaris i projectes (m\u00e9s de 100 milions d'usuaris i m\u00e9s de 430 milions de projectes).</p> <p>Github es defineix com una plataforma de desenvolupament col\u00b7laboratiu, per la qual cosa a m\u00e9s de l'allotjament i el control de versions mitjan\u00e7ant Git, tamb\u00e9 ens ofereix eines per a la gesti\u00f3 de projectes i el treball en equip, com una wiki o webs de documentaci\u00f3, entre moltes altres.</p> <p>Mans a l'obra amb Github...</p> <p>En aquest punt, podem tractar ja el primer punt de l'apartat pr\u00e0ctic \"Github\", on crearem i configurarem el nostre compte en Git, aix\u00ed com el nostre primer repositori.</p> <p>Anem a la pr\u00e0ctica!</p>"},{"location":"8.github_practic/","title":"8. Treballant en remot amb Git i Github.","text":""},{"location":"8.github_practic/#repositoris-remots","title":"Repositoris remots","text":"<p>Anteriorment hem vist com crear un repositori a partir d'un directori de treball en la m\u00e0quina local.</p> <p>Ara veurem com obtenir un repositori ubicat en una altra m\u00e0quina. A aquesta operaci\u00f3 se li coneix com a clonaci\u00f3 d'un repositori.</p> <p>Quan parlem de clonar un repositori ens referim a portar al nostre equip un espai de treball remot complet, incloses totes les confirmacions i branques realitzades en l'altre equip.</p> <p>Encara que Git treballa de forma distribu\u00efda, necessitarem un repositori de refer\u00e8ncia, que fa\u00e7a de servidor.</p>"},{"location":"8.github_practic/#pas-1-creacio-del-servidor","title":"Pas 1. Creaci\u00f3 del servidor","text":"<p>Quan utilitzem <code>git init</code>, establim el directori actual com a directori de treball. Aix\u00f2 implica la creaci\u00f3 d'un subdirectori ocult <code>.git</code> amb tota la informaci\u00f3 sobre el control de les versions. Aix\u00f2 ens serveix per treballar localment, creant els nostres commits, branques, etc. per\u00f2 no ens serveix d'aquesta manera per treballar de forma distribu\u00efda.</p> <p>Perqu\u00e8 en el directori actual es genere un repositori que puguem compartir, necessitem el que es coneix com un repositori descobert (bare), que tindr\u00e0 una estructura diferent als directoris de treball, ja que prescindir\u00e0 de la carpeta <code>.git</code> i utilitzar\u00e0 el propi directori base per guardar el seu contingut.</p> <p>En primer lloc, creem el directori en el qual desitgem crear el repositori:</p> <pre><code>$ mkdir projecteCompartit\n</code></pre> <p>Una vegada creat, accedim al directori i inicialitzem el repositori descobert:</p> <pre><code>$ cd projecteCompartit\n\n$ git init --bare\n\nconsell: S'est\u00e0 utilitzant \u00abmaster\u00bb com a nom de la branca inicial. Aquest nom de branca\nconsell: per defecte es pot canviar. Per a configurar el nom inicial de la branca que\nconsell: s'utilitzar\u00e0 en tots els repositoris nous, i que suprimir\u00e0 aquest av\u00eds, useu:\nconsell: \nconsell:        git config --global init.defaultBranch &lt;nom&gt;\nconsell: \nconsell: Els noms m\u00e9s usats habitualment en lloc de \u00abmaster\u00bb s\u00f3n \u00abmain\u00bb, \u00abtrunk\u00bb i\nconsell: \u00abdevelopment\u00bb. La branca acabada de crear es pot canviar de nom amb l'ordre:\nconsell: \nconsell:        git branch -m &lt;nom&gt;\n\nS'ha inicialitzat un repositori buit del Git en /tmp/projecteCompartit/\n</code></pre> <p>Nom de la branca inicial</p> <p>Tal i com ens indica a l'av\u00eds, podem canviar el nom predeterminat de les branques inicials configurant el par\u00e0metre de git <code>init.defaultBranch</code>. </p> <p>Si ja hem creat el repositori i volem canviar el nom d'aquesta branca, ho fem amb <code>git branch -m nom</code>. Si pe rexemple volem utilitzar <code>main</code> en lloc de <code>master</code>, tal i com fa github, podem fer:</p> <pre><code>$ git branch -m main\n</code></pre> <p>Si consultem el contingut del directori, veurem que t\u00e9 la mateixa estructura que el directori <code>.git</code> en un repositori local.</p> <pre><code>$ ls\nbranches config description HEAD hooks info objects refs\n</code></pre>"},{"location":"8.github_practic/#pas-2-clonacio-del-repositori-en-lordinador-local","title":"Pas 2. Clonaci\u00f3 del repositori (en l'ordinador local)","text":"<p>En general, per clonar un projecte farem:</p> <pre><code>git clone origen [dest\u00ed]\n</code></pre> <p>D'aquesta manera, si per exemple desitgem clonar un repositori que es troba en una carpeta del nostre propi equip, farem, per exemple:</p> <pre><code>$ git clone ~/scv/projecteCompartit ~/scv/projecte3\n\nS'est\u00e0 clonant a \u00ab/home/dam/scv/projecte3\u00bb...\nwarning: Sembla que heu clonat un repositori buit.\nfet.\n</code></pre> <p>Amb aix\u00f2 hem clonat el projecte <code>projecteCompartit</code> en una carpeta anomenada <code>projecte3</code>. Si ometem aquesta segona carpeta, el repositori es clonar\u00e0 en el directori actual amb el mateix nom que la carpeta original.</p> <p>D'altra banda, si el que volem \u00e9s clonar un repositori remot, el que farem ser\u00e0 connectar-nos a ell, b\u00e9 a trav\u00e9s dels protocols HTTPS, o SSH.</p> <p>Suposem que l'ordinador on hem creat el repositori compartit t\u00e9 l'adre\u00e7a IP <code>192.168.1.132</code>. En aquest cas hauriem d'utilitzar l'adre\u00e7a IP de l'ordinador al qual ens volem connectar. Podem utilitzar fins i tot nostra pr\u00f2pia m\u00e0quina consultant la nostra adre\u00e7a IP o directament utilitzant l'adre\u00e7a IP local de l'equip <code>127.0.0.1</code>.</p> <p>Ens connectar\u00edem a ell amb:</p> <pre><code>$ git clone ssh://dam@192.168.1.132/home/dam/scv/projecteCompartit\n\nCloning into 'projecteCompartit'...\ndam@192.168.1.132's password: \nwarning: You appear to have cloned an empty repository.\n</code></pre> <p>Observa que no hem indicat una ruta de dest\u00ed, amb la qual cosa es clonar\u00e0 el repositori compartit en una carpeta amb el mateix nom en el directori actual.</p> <p>Aix\u00f2 ens demanar\u00e0 la contrasenya de l'usuari amb el qual ens hem connectat per SSH. Si no desitgem utilitzar el mateix usuari que en local, podr\u00edem crear un nou usuari per realitzar aquestes tasques.</p> <p>Finalment, el sistema ens avisa que hem clonat un repositori buit. Aix\u00f2 es deu al fet que el repositori ha estat inicialitzat, per\u00f2 encara no disposa de contingut.</p>"},{"location":"8.github_practic/#pas-3-afegint-contingut-al-repositori","title":"Pas 3. Afegint contingut al repositori","text":"<p>Ara, des de l'ordinador local, ens situem en la carpeta on h\u00e0gem clonat el repositori:</p> <pre><code>$ cd projecteCompartit/\n</code></pre> <p>Afegim contingut, per exemple un fitxer anomenat <code>fitxer1.md</code> amb el contingut \u201c# Projecte Compartit\u201d:</p> <pre><code>$ echo \"# Projecte Compartit\" &gt; fitxer1.md\n</code></pre> <p>L'afegim per confirmar en el seg\u00fcent commit:</p> <pre><code>$ git add fitxer1.md \n</code></pre> <p>I fem la confirmaci\u00f3:</p> <pre><code>$ git commit -m \"Afegit fitxer1.md\"\n\n[master (root-commit) c76e80e] Afegit fitxer1.md\n 1 file changed, 1 insertion(+)\n create mode 100644 fitxer1.md\n</code></pre> <p>Fixa't que ens mostra el commit <code>[master (root-commit) c76e80e]</code> (<code>[main (comissi\u00f3 arrel) 8fbbb4c]</code>), indicant que es tracta de la branca <code>master</code> (o <code>main</code> si hem canviat el nom), i a m\u00e9s \u00e9s el commit arrel. Aix\u00f2 est\u00e0 relacionat amb l'av\u00eds de repositori buit que ens ha mostrat quan hem clonat el repositori, i indica que es tracta del primer commit que es fa en ell.</p> <p>Si ara comprovem l'estat del repositori: <pre><code>$ git status\n\nOn branch master\nYour branch is based on 'origin/master', but the upstream is gone.\n (use \"git branch --unset-upstream\" to fixup)\nnothing to commit, working tree clean\n</code></pre></p> <p>O b\u00e9:</p> <pre><code>En la branca main\nLa vostra branca est\u00e0 basada en \u00aborigin/main\u00bb, per\u00f2 la font no hi \u00e9s.\n  (useu \u00abgit branch --unset-upstream\u00bb per a arreglar-ho)\n\nno hi ha res a cometre, l'arbre de treball est\u00e0 net\n</code></pre> <p>Ens indica que ens trobem en la branca <code>master</code>/<code>main</code>, per\u00f2 que aquesta no existeix en <code>upstream</code> (l'origen de la clonaci\u00f3). En aquesta situaci\u00f3, aix\u00f2 \u00e9s normal, ja que no hem sincronitzat encara aquest primer commit en el servidor.</p>"},{"location":"8.github_practic/#pas-4-enviant-el-commit-al-servidor","title":"Pas 4. Enviant el commit al servidor","text":"<p>Els canvis realitzats s'han fet en la nostra c\u00f2pia local del projecte, per la qual cosa si volem compartir-los amb la resta de col\u00b7laboradors del projecte, haurem de sincronitzar-la amb el servidor. Per enviar aquests canvis al servidor, utilitzarem l'ordre <code>git push</code>:</p> <pre><code>$ git push origin master\n\ndam@192.168.1.132's password: \nEnumerating objects: 3, done.\nCounting objects: 100% (3/3), done.\nWriting objects: 100% (3/3), 261 bytes \n 261.00 KiB/s, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nTo ssh://192.168.1.132/home/dam/scv/projecteCompartit\n * [new branch] master -&gt; master\n</code></pre> <p>O b\u00e9:</p> <pre><code>$ git push origin main\nS'estan enumerant els objectes: 3, fet.\nS'estan comptant els objectes: 100% (3/3), fet.\nS'estan escrivint els objectes: 100% (3/3), 245 bytes | 245.00 KiB/s, fet.\nTotal 3 (0 difer\u00e8ncies), reusats 0 (0 difer\u00e8ncies), paquets reusats 0\nTo ssh://192.168.1.132/home/dam/scv/projecteCompartit\n * [new branch]      main -&gt; main\n</code></pre> <p>Amb aix\u00f2, indiquem que pujarem a l'origen (<code>origin</code>) la nostra branca <code>master</code>/<code>main</code>. Fixa't que amb aix\u00f2, s'ha creat la branca nova <code>master</code>/<code>main</code>, que encara no existia en el repositori.</p> <p>Les opcions <code>origin</code> i <code>master</code>/<code>main</code> poden eliminar-se, deixant \u00fanicament l'ordre com <code>git push</code>. Si no indiquem el servidor <code>remote</code>, git escollir\u00e0 el que tinguem configurat, que en aquest cas \u00e9s <code>origin</code>. Podem comprovar quin o quins s\u00f3n els nostres servidors remots amb:</p> <pre><code>$ git remote\n\norigin\n</code></pre> <p>I obtenir m\u00e9s informaci\u00f3 sobre ells amb: <pre><code>$ git remote -v\n\norigin  ssh://dam@192.168.1.132/home/dam/scv/projecteCompartit (fetch)\norigin  ssh://dam@192.168.1.132/home/dam/scv/projecteCompartit (push)\n</code></pre></p> <p>Amb el que obtenim tamb\u00e9 quin \u00e9s l'usuari, el host i el directori dels repositoris.</p> <p>Si ara comprovem de nou l'estat:</p> <pre><code>$ git status\n\nOn branch master\nYour branch is up to date with 'origin/master'.\nnothing to commit, working tree clean\n</code></pre> <p>o b\u00e9:</p> <pre><code> git status\nEn la branca main\nLa vostra branca est\u00e0 al dia amb \u00aborigin/main\u00bb.\n\nno hi ha res a cometre, l'arbre de treball est\u00e0 net\n</code></pre> <p>Ens indica que ja estem actualitzats (<code>up to date</code>) amb la branca <code>master</code>/<code>main</code> del nostre origen.</p> <p>Exercici 1. Clona el repositori <code>projecteCompartit</code> en el teu ordinador, per\u00f2 guarda'l amb el nom <code>projecteCompartit2</code>. Crea en ell un nou fitxer <code>fitxer2.md</code> amb el contingut \u201cFitxer creat des d'un altre lloc\u201d, afig-lo al control de versions i envia'l al servidor (aix\u00f2 podria fer-se tamb\u00e9 des d'un altre ordinador).</p> <p>Ens situem en la carpeta on desitgem fer la c\u00f2pia, i llancem el clonat indicant la carpeta dest\u00ed amb:</p> <pre><code>$ git clone ssh://\n\n$ git clone ssh://dam@192.168.1.132/home/dam/scv/projecteCompartit projecteCompartit2\n\nCloning into 'projecteCompartit2'...\ndam@192.168.1.132's password: \nremote: Enumerating objects: 3, done.\nremote: Counting objects: 100% (3/3), done.\nReceiving objects: 100% (3/3), 260 bytes \n260.00 KiB/s, done.\nremote: Total 3 (delta 0), reused 0 (delta 0)\n</code></pre> <p>Ara entrem dins i creem el fitxer:</p> <pre><code>$ cd projecteCompartit2/\n$ echo \"Fitxer creat des d'un altre lloc\" &gt; fitxer2.md\n</code></pre> <p>l'afegim al control de versions, i el confirmem:</p> <pre><code>$ git add fitxer2.md \n$ git commit -a -m \"Afegit fitxer2.md\"\n\n[master 4e23327] Afegit fitxer2.md\n1 file changed, 1 insertion(+)\ncreate mode 100644 fitxer2.md\n</code></pre> <p>Observem l'estat ara:</p> <pre><code>$ git status\n\nOn branch master\nYour branch is ahead of 'origin/master' by 1 commit.\n(use \"git push\" to publish your local commits)\nnothing to commit, working tree clean\n</code></pre> <p>Com veus, ens indica que la nostra branca <code>master</code> difereix de la branca <code>master</code> en origen. Per pujar aquests canvis a l'origen farem:</p> <pre><code>$ git push\n</code></pre>"},{"location":"8.github_practic/#pas-5-portar-contingut-del-servidor","title":"Pas 5. Portar contingut del servidor","text":"<p>Quan desitgem obtenir les modificacions que han fet sobre el projecte altres desenvolupadors, utilitzarem les ordres de <code>git fetch</code> i <code>git pull</code>.</p> <p>Per a aix\u00f2, partirem de les modificacions realitzades en el repositori en l'exercici anterior.</p> <ul> <li><code>git fetch [nom-remot]</code>: Permet obtenir els canvis realitzats en el projecte remot des que el vam clonar o des que vam obtenir els canvis per \u00faltima vegada. Aquest comandament \u00fanicament porta les dades, per\u00f2 no les combina amb el nostre directori de treball. Serveix per veure els canvis, i aplicar-los manualment quan es cregui convenient.</li> <li><code>git pull [nom-remot]</code>: Permet obtenir els canvis realitzats en el projecte des que el vam clonar o des que vam obtenir els canvis per \u00faltima vegada, i a m\u00e9s, combina aquests amb el nostre directori de treball. Aquest flux de treball ser\u00e0 bastant m\u00e9s c\u00f2mode i r\u00e0pid que utilitzar <code>fetch</code>, encara que treu una mica de control sobre el repositori.</li> </ul> <p>Aix\u00ed doncs, per obtenir els \u00faltims canvis en el repositori remot, fem:</p> <pre><code>$ git fetch\n\ndam@192.168.1.132's password: \nremote: Enumerating objects: 4, done.\nremote: Counting objects: 100% (4/4), done.\nremote: Compressing objects: 100% (2/2), done.\nremote: Total 3 (delta 0), reused 0 (delta 0)\nUnpacking objects: 100% (3/3), 307 bytes \n 307.00 KiB/s, done.\nFrom ssh://192.168.1.132/home/dam/scv/projecteCompartit\n fedaee7..4e23327 master -&gt; origin/master\n</code></pre> <p>Podem obviar l'<code>origin</code>, ja que \u00e9s el <code>remote</code> per defecte. Si ara consultem l'estat:</p> <pre><code>$ git status\n\nOn branch master\nYour branch is behind 'origin/master' by 1 commit, and can be fast-forwarded.\n (use \"git pull\" to update your local branch)\nnothing to commit, working tree clean\n</code></pre> <p>Ens indica que estem en la branca <code>master</code>, i que aquesta est\u00e0 per sota de la branca <code>master</code> en origen, diferint una confirmaci\u00f3.</p> <p>Si consultem el contingut del directori de treball actual, veurem que aquest encara conserva el contingut del commit inicial:</p> <pre><code>$ ls\nfitxer1.md\n</code></pre> <p>Si ara utilitzem <code>pull</code> per obtenir els \u00faltims canvis i combinar-los:</p> <pre><code>$ git pull\n\ndam@192.168.1.132's password: \nUpdating fedaee7..4e23327\nFast-forward\n fitxer2.md \n 1 +\n 1 file changed, 1 insertion(+)\n create mode 100644 fitxer2.md\n</code></pre> <p>Ja tindrem sincronitzada la nostra c\u00f2pia local amb el contingut del servidor:</p> <pre><code>$ ls\nfitxer1.md fitxer2.md\n</code></pre> <p>I si consultem l'estat ja ens indica que estem actualitzats amb la branca <code>master</code> d'origen.</p> <pre><code>$ git status\n\nOn branch master\nYour branch is up to date with 'origin/master'.\nnothing to commit, working tree clean\n</code></pre> <p>Podeu obtenir m\u00e9s informaci\u00f3 sobre el treball amb repositoris remots en Git a la documentaci\u00f3 Fundamentos de Git - Trabajar con remotos, de la pr\u00f2pia documentaci\u00f3 del projecte</p>"},{"location":"8.github_practic/#github","title":"Github","text":"<p>La plataforma de desenvolupament col\u00b7laboratiu Github ens permet crear repositoris git centralitzats i compartits de tipus descobert (bare).</p> <p>En aquest apartat anem a crear un compte en aquesta plataforma i crearem el nostre primer repositori p\u00fablic.</p>"},{"location":"8.github_practic/#creacio-dun-compte","title":"Creaci\u00f3 d'un compte","text":"<p>En primer lloc, accedim al lloc web de GitHub i creem un compte gratu\u00eft. Per a aix\u00f2, no hem de fer m\u00e9s que introduir la nostra adre\u00e7a de correu on se'ns demana i fer clic en el bot\u00f3 de <code>Sign up for Github</code> (Compte, les seg\u00fcents captures poden estar desactualitzades, per\u00f2 el procediment en general \u00e9s el mateix).</p> <p></p> <p>S'iniciar\u00e0 ara un petit assistent en el qual confirmem o introdu\u00efm el nostre correu si no ho hav\u00edem fet, escollim una contrasenya, un nom d'usuari, diem si volem rebre actualitzacions, i finalment verifiquem el compte resolent un petit trencaclosques.</p> <p></p> <p>Acabat aquest assistent, fem clic en <code>Create Account</code>. En aquest moment, se'ns enviar\u00e0 al correu indicat un codi de verificaci\u00f3, per completar la creaci\u00f3 del compte.</p> <p>Fet aix\u00f2, ja ens apareixer\u00e0 la pantalla inicial de Github, presentant diverses opcions:</p> <p></p> <p>Des d'ac\u00ed podr\u00edem crear ja un repositori, seleccionant l'opci\u00f3 <code>Create a Repository</code>. De moment, farem clic en <code>Skip this for now</code> per anar a la pantalla principal, des de la qual tindrem acc\u00e9s a totes les opcions que ens ofereix Github.</p> <p></p> <p>D'aquesta pantalla principal de Github anem a destacar tres zones:</p> <ul> <li>1. En la columna central, veurem tota l'activitat recent, tant pr\u00f2pia com dels nostres contactes.</li> <li>2. La columna de l'esquerra ens mostrar\u00e0 algunes dades sobre els nostres repositoris, equips, etc. Des d'ac\u00ed podem comen\u00e7ar a crear repositoris.</li> <li> <p>3. En la part superior, disposem d'una barra de men\u00fa, amb un enlla\u00e7 a la p\u00e0gina principal, un quadre de cerca, un men\u00fa amb quatre entrades:</p> <ul> <li><code>Pull Requests</code>: Per accedir i validar les peticions de fusi\u00f3 de codi d'altres usuaris sobre els nostres repositoris,</li> <li><code>Issues</code>: Per gestionar anotacions i suggeriments que es fan sobre el nostre repositori, ja sigui per corregir errors, peticions de noves funcionalitats o preguntes sobre el funcionament entre altres.</li> <li><code>Marketplace</code>: Per afegir extensions i altres funcionalitats a Github.</li> <li><code>Explore</code>: Per explorar repositoris que Github considera que poden ser del nostre inter\u00e8s.</li> </ul> <p>A m\u00e9s, en aquesta barra superior, disposem de tres icones:</p> <ul> <li>La campana, que ens mostra si tenim alguna notificaci\u00f3,</li> <li>La icona d'Afegeix (signe \u201c+\u201d), que ens serveix per gestionar nous repositoris, organitzacions o projectes. En un projecte, a part de la gesti\u00f3 del repositori tindrem altres opcions relacionades amb la gesti\u00f3 de projectes, com pugui ser la gesti\u00f3 de tasques.</li> <li>La icona amb el nostre avatar, sobre el qual podem controlar diversos aspectes relacionats amb el nostre compte (perfil, repositoris, equips, etc\u00e8tera).</li> </ul> </li> </ul>"},{"location":"8.github_practic/#creacio-dun-token-dacces-personal","title":"Creaci\u00f3 d'un Token d'Acc\u00e9s Personal","text":"<p>Una vegada creat el nostre compte en Github i abans de comen\u00e7ar a crear un repositori, anem a crear un token d'acc\u00e9s personal (PAT, Personal Access Token).</p> <p>Quan treballem des de la l\u00ednia d'ordres amb Git sobre els nostres repositoris emmagatzemats en Github, necessitarem algun mode d'autenticar-nos en la pr\u00f2pia plataforma. Tradicionalment, ha estat suficient amb indicar, en el moment de publicar els nostres canvis en el servidor, les nostres credencials. \u00c9s a dir, el nostre usuari en Github i la nostra contrasenya.</p> <p>Amb la finalitat d'incrementar la seguretat en la plataforma, des del 13 d'agost de 2021, Github no permet aquest tipus d'autenticaci\u00f3 des de la l\u00ednia d'ordres, i requereix fer-ho mitjan\u00e7ant HTTPS amb un token d'acc\u00e9s generat per la pr\u00f2pia plataforma.</p> <p>Anem a veure doncs, com generar aquest token, que haurem d'emmagatzemar en el nostre equip i utilitzar quan se'ns demani una contrasenya.</p> <ul> <li>Pas 1. Localitzem la icona amb la nostra foto de perfil en la part superior dreta, i fem clic en ella per accedir a la nostra configuraci\u00f3 de Github (<code>Settings</code>).</li> <li>Pas 2. Fem clic en l'opci\u00f3 de par\u00e0metres del desenvolupador (<code>Developer Settings</code>) en el panell de l'esquerra.</li> <li>Pas 3. En la p\u00e0gina de par\u00e0metres del desenvolupador, en el panell de l'esquerra fem clic en <code>Personal Access Tokens</code>.</li> <li>Pas 4. En la secci\u00f3 de <code>Personal Access Tokens</code> seleccionem <code>Generate New Token</code>.</li> <li>Pas 5. Indiquem una descripci\u00f3 per al nostre token, per exemple \u201cToken per a l'acc\u00e9s per terminal\u201d, aix\u00ed com l'\u00e0mbit o abast d'aquest token. Aix\u00f2 determinar\u00e0 qu\u00e8 es podr\u00e0 i qu\u00e8 no es podr\u00e0 fer amb aquest token. En el nostre cas, anem a seleccionar totes les opcions d'interacci\u00f3 amb el repositori (<code>repo</code>, <code>admin:repo_hook</code> i <code>delete_repo</code>), i fem clic en <code>Generate Token</code>.</li> <li>Pas 6. Se'ns generar\u00e0 un token que haurem de copiar i conservar per utilitzar com a contrasenya d'acc\u00e9s per terminal. Per copiar-lo podem fer clic en la icona de c\u00f2pia que es troba a la seva dreta. Tingueu especial precauci\u00f3 amb ell i guardeu-lo b\u00e9, ja que per q\u00fcestions de seguretat, aquest token no se us tornar\u00e0 a mostrar una vegada eixiu de la p\u00e0gina.</li> </ul> <p></p> <p>Documentaci\u00f3 oficial</p> <p>Disposeu de m\u00e9s informaci\u00f3 sobre aquest proc\u00e9s en els seg\u00fcents enlla\u00e7os:</p> <ul> <li>Token authentication requirements for Git operations</li> <li>Crear un token d'acc\u00e9s personal</li> </ul>"},{"location":"8.github_practic/#creacio-dun-repositori","title":"Creaci\u00f3 d'un repositori","text":"<p>Anem a crear ara el nostre primer repositori en Github. Per a aix\u00f2, des de la finestra inicial, seguirem els seg\u00fcents passos.</p> <p>Pas 1. Create Repository En primer lloc, b\u00e9 des de la secci\u00f3 <code>Create your First Project</code> de la secci\u00f3 de l'esquerra, o b\u00e9 des de la primera entrada del submen\u00fa d'Afegeix (<code>+</code>), fem clic en <code>Create Repository</code>.</p> <p>Aix\u00f2 ens portar\u00e0 a la p\u00e0gina de creaci\u00f3 del nou repositori.</p> <p>Pas 2. Emplenant les dades del repositori</p> <p>Per crear el repositori haurem de facilitar certa informaci\u00f3 sobre aquest:</p> <ul> <li>El nom,</li> <li>Una descripci\u00f3,</li> <li>Si ser\u00e0 p\u00fablic o privat,</li> <li>Opcions d'inicialitzaci\u00f3 del repositori, com crear un fitxer <code>README.md</code>, un <code>.gitignore</code>, o una llic\u00e8ncia.</li> </ul> <p>En el nostre cas, hem afegit les seg\u00fcents dades:</p> <p></p> <p>Fixa't en certs detalls:</p> <ul> <li>El nom del repositori est\u00e0 vinculat a l'usuari. D'aquesta manera, diferents usuaris podran tenir repositoris amb el mateix nom, i es facilita tamb\u00e9 la importaci\u00f3 de repositoris d'altres usuaris. Aquest tindr\u00e0 doncs un format tipus <code>nomDeUsuari/Repositori</code>, en el nostre cas, <code>AlumnoDAM-MGH/mi-primer-repo</code>. En el vostre cas, utilitzareu <code>elTeuNomDUsuari/el-meu-primer-repo</code>.</li> <li>Hem seleccionat que s'inicialitzi el repositori amb un fitxer <code>README</code>, per\u00f2 sense <code>.gitignore</code> ni llic\u00e8ncia. Aquest pas podem ometre'l, en aquest cas, haur\u00edem d'inicialitzar el repositori manualment. Si el deixem sense inicialitzar, Github ens indicar\u00e0 quins passos hem de realitzar des de la terminal per completar la inicialitzaci\u00f3.</li> <li>D'altra banda, ens indica que la branca per defecte generada \u00e9s <code>main</code>. Si recordeu, en git, aquesta branca principal per defecte es deia <code>master</code>, per\u00f2 es podia canviar. Inicialment, en Github tamb\u00e9 era aix\u00ed, per\u00f2 des d'octubre de 2020, s'utilitza <code>main</code> en lloc de <code>master</code>.</li> </ul> <p>Pas 3. Creaci\u00f3 del repositori</p> <p>Una vegada tenim les dades emplenades, fem clic en <code>Create Repository</code>, amb el que ja tindrem llest el nostre repositori.</p> <p>Els repositoris que creem disposaran tamb\u00e9 d'una web des de la qual podrem consultar el codi del repositori, gestionar-lo i modificar-lo:</p> <p></p> <p>En aquesta p\u00e0gina tenim diversos elements d'inter\u00e8s:</p> <ul> <li>En la part superior esquerra tenim la ruta al nostre repositori. Si ens trobem en qualsevol subcarpeta d'aquest, ens la mostrar\u00e0 ac\u00ed, donant la possibilitat de retrocedir en l'estructura de directoris.</li> <li>A la part superior dreta, tenim informaci\u00f3 sobre el nombre d'usuaris que estan pendents del nostre projecte (<code>Watch/Unwatch</code>), els que l'han valorat positivament (<code>Star</code>) o les bifurcacions que altres usuaris hagin fet del projecte (<code>Fork</code>). Des d'aquests botons, tamb\u00e9 podem seguir o deixar de seguir el projecte, afegir-li estrelles o crear un fork.</li> <li>Despr\u00e9s tenim un men\u00fa amb les diferents opcions del projecte: Explorar el codi (<code>code</code>), els assumptes pendents (<code>issues</code>), les peticions de fusi\u00f3 de codi (<code>pull requests</code>), la Wiki, o els ajustos (<code>Settings</code>) del projecte, entre altres.</li> <li>Posteriorment tenim diversos botons, entre els quals podrem canviar entre branques (ara se'ns mostra la branca <code>Main</code>), afegir fitxers, o b\u00e9 obtenir el codi del repositori (<code>Code</code>).</li> <li>En la part central, i amb major grand\u00e0ria, observem el contingut del nostre repositori, juntament amb informaci\u00f3 relativa als commits realitzats o el <code>HEAD</code>. Com podeu comprovar, tamb\u00e9 ens mostra el contingut del fitxer <code>README.md</code>. En general, en qualsevol carpeta que tinguem, podem afegir un fitxer <code>README.md</code>, que Github interpreta que \u00e9s el document de descripci\u00f3 b\u00e9 del projecte o repositori, o b\u00e9 de la carpeta en la qual estiguem.</li> </ul> <p>Pas 4. Clonant el repositori Una vegada creat aquest repositori, anem a descarregar-lo en el nostre equip. Per a aix\u00f2, busquem el bot\u00f3 verd amb el text <code>Code</code>, i despleguem el submen\u00fa amb les diferents opcions de clonaci\u00f3:</p> <p></p> <p>Des d'ac\u00ed, podem clonar el repositori b\u00e9 a trav\u00e9s de HTTPS, SSH, o la interf\u00edcie de l\u00ednia d'ordres (CLI) de Github. Tamb\u00e9 podem descarregar el contingut del projecte en format ZIP, sense informaci\u00f3 sobre el control de versions.</p> <p>En el nostre cas utilitzarem la primera opci\u00f3, per realitzar la clonaci\u00f3 per HTTPS.</p> <p>Aix\u00ed doncs, seleccionarem el text <code>https://github.com/AlumnoDAM-MGH/mi-primer-repo.git</code> i el copiarem, o b\u00e9 podem fer-ho directament amb el bot\u00f3 de copiar situat a la seva dreta.</p> <p>Amb aquest text copiat, obrim una terminal en el nostre equip i utilitzem aquesta adre\u00e7a com a origen per fer la clonaci\u00f3: <pre><code>$ git clone https://github.com/AlumnoDAM-MGH/mi-primer-repo.git\n\nCloning into 'mi-primer-repo'...\nremote: Enumerating objects: 3, done.\nremote: Counting objects: 100% (3/3), done.\nremote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0\nUnpacking objects: 100% (3/3), 626 bytes \n 626.00 KiB/s, done.\n</code></pre></p> <p>Una vegada clonat, podem consultar els nostres remotes, accedint a la carpeta pr\u00e8viament: <pre><code>$ cd mi-primer-repo/\n$ git remote -v\n\norigin  https://github.com/AlumnoDAM-MGH/mi-primer-repo.git (fetch)\norigin  https://github.com/AlumnoDAM-MGH/mi-primer-repo.git (push)\n</code></pre></p> <p>Pas 5. Afegint contingut. En apartats anteriors ja hem vist com treballar amb repositoris remots. Anem a repassar-ho afegint una mica de contingut al nostre repositori git local i sincronitzant-lo amb el repositori d'origen.</p> <p>En primer lloc, anem a crear una carpeta nova dins de la carpeta de treball del nostre projecte, que anomenarem <code>imatges</code>. Dins d'ella ubicarem una imatge qualsevol. Pots descarregar-la d'Internet, utilitzar una del teu equip, o la mateixa que s'ha utilitzat en aquest exemple, descarregant-la del repositori de AlumnoDAM-MGH. Una vegada tinguem aix\u00f2 preparat, afegirem la carpeta <code>imatges</code> al sistema de control de versions.</p> <p>Per a tot aix\u00f2, suposant que ja ens trobem en la carpeta del projecte i que la imatge que anem a utilitzar es troba en la nostra carpeta d'usuari i porta per nom <code>mgh_github.png</code>, farem:</p> <pre><code>$ mkdir imatges\n$ cp ~/mgh_github.png imatges/\n$ git add imatges/\n</code></pre> <p>Fet aix\u00f2, editarem el fitxer <code>README.md</code> i li afegirem el seg\u00fcent contingut, amb el qual ampliem el par\u00e0graf de presentaci\u00f3 i embebem la imatge afegida en la carpeta d'imatges:</p> <pre><code># El nostre primer repositori en Github\n\nAquest \u00e9s el nostre primer repositori en Github, una plataforma de desenvolupament col\u00b7laboratiu que ens permet crear repositoris git centralitzats i compartits.\n\n!Logo de McGraw Hill i Octocat\n</code></pre> <p>Ara, tamb\u00e9 afegim aquests canvis perqu\u00e8 s'incloguin en la seg\u00fcent confirmaci\u00f3:</p> <pre><code>$ git add README.md \n</code></pre>"},{"location":"8.github_practic/#pas-6-confirmant-i-pujant-els-canvis","title":"Pas 6. Confirmant i pujant els canvis.","text":"<p>Si ara comprovem l'estat del repositori, veurem que tenim preparats diversos arxius nous per a la seg\u00fcent confirmaci\u00f3, juntament amb modificacions en el fitxer <code>README.md</code>:</p> <p><pre><code>$ git status\n</code></pre> <pre><code>On branch main\nYour branch is up to date with 'origin/main'.\nChanges to be committed:\n (use \"git restore --staged &lt;file&gt;...\" to unstage)\n    modified: README.md\n    new file: imatges/mgh_github.png\n</code></pre></p> <p>Aix\u00ed doncs, fem la confirmaci\u00f3: <pre><code>$ git commit -m \"S'ha afegit la carpeta d'imatges\"\n</code></pre> <pre><code>[main 0cf57c5] S'ha afegit la carpeta d'imatges\n 2 files changed, 7 insertions(+), 2 deletions(-)\n create mode 100644 imatges/mgh_github.png\n</code></pre></p> <p>Si ara comprovem de nou l'estat: <pre><code>$ git status\n</code></pre> <pre><code>On branch main\nYour branch is ahead of 'origin/main' by 1 commit.\n (use \"git push\" to publish your local commits)\nnothing to commit, working tree clean\n</code></pre></p> <p>Com veiem, ens indica que la nostra branca <code>main</code> es troba a una confirmaci\u00f3 per davant (<code>ahead by 1 commit</code>) de la branca <code>main</code> en origen, per la qual cosa haurem de publicar aquests canvis mitjan\u00e7ant l'ordre <code>git push</code>:</p> <p><pre><code>$ git push\n</code></pre> <pre><code>Username for 'https://github.com': AlumnoDAM-MGH \nPassword for 'https://AlumnoDAM-MGH@github.com': \nEnumerating objects: 7, done.\nCounting objects: 100% (7/7), done.\nDelta compression using up to 8 threads\nCompressing objects: 100% (4/4), done.\nWriting objects: 100% (5/5), 27.06 KiB \n 2.71 MiB/s, done.\nTotal 5 (delta 0), reused 0 (delta 0)\nTo https://github.com/AlumnoDAM-MGH/mi-primer-repo.git\n e053842..0cf57c5 main -&gt; main\n</code></pre></p> <p>Com veiem, ens demanar\u00e0 les nostres credencials de Github per poder fer el <code>push</code> sobre el nostre propi repositori. Recorda, que en lloc de la teva contrasenya al portal, has d'utilitzar el teu token d'acc\u00e9s personal, generat anteriorment. Si ara actualitzem la p\u00e0gina del repositori de Github, veurem que s'han actualitzat els continguts:</p> <p></p>"},{"location":"8.github_practic/#branques-i-forks","title":"Branques i forks","text":"<p>Recordem que Github \u00e9s una de les majors plataformes d'allotjament de projectes basats en programari lliure. Una de les premisses d'aquest tipus de projectes \u00e9s la possibilitat de compartir el codi, modificar-lo i adaptar-lo a les nostres necessitats.</p> <p>Github ens brinda la possibilitat de crear c\u00f2pies completes d'un projecte al nostre compte d'usuari. Aix\u00f2 es coneix com a <code>fork</code>, i permet adaptar projectes a les nostres necessitats, o crear projectes nous basant-nos en un ja existent.</p> <p>Aquest concepte de <code>fork</code> \u00e9s diferent del de crear una branca, ja que genera una c\u00f2pia f\u00edsica completa del repositori, amb la intenci\u00f3 de comen\u00e7ar un desenvolupament independent a l'original. En canvi, una branca suposa una bifurcaci\u00f3, per\u00f2 dins del repositori original, amb la intenci\u00f3 de realitzar canvis que despr\u00e9s s'aplequin a la branca principal.</p> <p>No obstant aix\u00f2, mitjan\u00e7ant un <code>fork</code>, tamb\u00e9 podrem col\u00b7laborar amb el projecte original, encara que no siguem membres del seu equip de desenvolupament. Quan creiem que els canvis que hem realitzat poden ser positius, o resolen algun error del codi original, podem fer un <code>pull request</code> al projecte original perqu\u00e8 els desenvolupadors considerin combinar el seu codi amb el nostre.</p> Exercici 2. Crea un <code>fork</code> en el teu compte d'usuari d'un projecte d'algun company, o b\u00e9 del propi repositori que s'ha creat d'exemple com AlumnoDAM-MGH. Clona'l en el teu equip, realitza canvis i puja'ls de nou al repositori en el teu compte. Disposes de m\u00e9s informaci\u00f3 sobre els forks a la documentacio oficial de Github <p>Per a aquest exercici haur\u00edem d'obrir la p\u00e0gina del repositori que vulguem bifurcar i fer clic en la icona de <code>Fork</code>, ubicada en la part superior dreta:</p> <p></p> <p>Fet aix\u00f2, ens demanar\u00e0 en quina compte de grup o usuari anem a crear la bifurcaci\u00f3:</p> <p></p> <p>I despr\u00e9s d'un breu temps d'espera, tindrem el repositori en el nostre compte, des d'on podrem clonar-lo en el nostre equip i treballar amb ell tal com hem fet al llarg dels exemples.</p> <p></p>"},{"location":"cps_amp/","title":"Cps amp","text":""},{"location":"cps_amp/#el-scv-subversion","title":"El SCV Subversion","text":"<p>En aquest apartat treballarem amb el sistema de control de versions Subversion. Encara que la majoria de projectes i organitzacions utilitzen en la pr\u00e0ctica Git, que veurem en els seg\u00fcents apartats, con\u00e9ixer Subversion, igual que RCS, ens ser\u00e0 \u00fatil com a bona introducci\u00f3 a altres sistemes.</p> <p>Donat que Subversion \u00e9s un sistema centralitzat, necessitarem un servidor per emmagatzemar el repositori. Ac\u00ed podem optar per crear el nostre propi servidor o b\u00e9 utilitzar algun servei p\u00fablic d'emmagatzematge amb Subversion, com per exemple SourceForge. Utilitzarem aquest \u00faltim.</p>"},{"location":"cps_amp/#preparacio-creacio-del-compte-i-el-repositori","title":"Preparaci\u00f3: Creaci\u00f3 del compte i el repositori","text":""},{"location":"cps_amp/#pas-1-registre-en-sourceforge","title":"Pas 1. Registre en SourceForge","text":"<p>En primer lloc, accedirem al lloc web de SourceForge (https://sourceforge.net/) per registrar-nos com a usuaris fent clic en l'enlla\u00e7 Join o b\u00e9 accedint a https://sourceforge.net/user/registration.</p> <p>En aquesta p\u00e0gina de registre introduirem les nostres dades (substitueix nom d'usuari, correu i contrasenya pels teus) i farem clic en Register.</p> <p>Una vegada completat el registre, se'ns enviar\u00e0 un correu electr\u00f2nic de confirmaci\u00f3 per activar el nostre compte. Accedim al correu, consultem el missatge i fem clic en Activate Your Account.</p> <p>Fet aix\u00f2, se'ns redirigir\u00e0 de nou a SourceForge i ens demanar\u00e0 el nostre nom d'usuari i contrasenya per accedir-hi.</p> <p>Continuar\u00e9 amb la resta del document. Vaig b\u00e9 fins ara amb el format i la traducci\u00f3?</p> <p>Perfecte, continuar\u00e9 amb la traducci\u00f3 literal i el format en Markdown:</p>"},{"location":"cps_amp/#pas-2-creacio-del-repositori","title":"Pas 2. Creaci\u00f3 del repositori","text":"<p>Per crear un nou repositori, farem clic en l'enlla\u00e7 Create, situat a la part superior dreta de la p\u00e0gina. Aix\u00f2 ens portar\u00e0 a la p\u00e0gina d'inici de creaci\u00f3 de projectes, on haurem de seleccionar Create Your Project Now.</p> <p>Aix\u00f2 ens obrir\u00e0 la p\u00e0gina de configuraci\u00f3 del projecte. Com veurem, disposem de m\u00faltiples opcions per a ell (Wiki, p\u00e0gina web, etc.), aix\u00ed com l'acc\u00e9s mitjan\u00e7ant diferents sistemes de control de versions (Git, Subversion, Mercurial). De totes aquestes opcions, marcarem \u00fanicament l'opci\u00f3 de Subversion, desactivant la resta, ja que nom\u00e9s utilitzarem aquesta opci\u00f3. Si posteriorment voleu utilitzar SourceForge per emmagatzemar els vostres projectes, podeu explorar totes les opcions possibles.</p> <p>Amb l'opci\u00f3 de Subversion marcada i acceptats els termes d'\u00fas, creem el nostre projecte mitjan\u00e7ant el bot\u00f3 Create. \u00c9s possible que en aquests moments se'ns demane un n\u00famero de tel\u00e8fon m\u00f2bil per enviar un PIN de validaci\u00f3. Aix\u00f2 nom\u00e9s es far\u00e0 en aquest moment.</p> <p>Fet aix\u00f2, ja tindrem acc\u00e9s a la web del nostre projecte en SourceForge. Podem seguir un petit tour per la interf\u00edcie.</p> <p>Si ho desitgeu, i tal com s'explica en el tour, podeu afegir informaci\u00f3 al vostre projecte, utilitzar tiquets, incorporar col\u00b7laboradors, etc. Com que de moment nom\u00e9s ens interessa treballar amb Subversion, anirem directament a l'apartat de Codi (Code).</p>"},{"location":"cps_amp/#pas-3-creacio-dels-directoris-per-defecte","title":"Pas 3. Creaci\u00f3 dels directoris per defecte","text":"<p>Quan accedim a l'apartat de codi, SourceForge ens suggereix que creem certs directoris per defecte, indicant-nos els passos per fer-ho:</p> <p>L'estructura recomanada per a projectes en Subversion inclou les seg\u00fcents carpetes:</p> <ul> <li>trunk: la l\u00ednia principal o troncal de desenvolupament.</li> <li>branches: diferents rames o bifurcacions de codi a partir de la branca principal, utilitzades per afegir noves funcionalitats a una aplicaci\u00f3 (veurem aquest concepte amb m\u00e9s detall en Git).</li> <li>tags: que representen instant\u00e0nies (snapshots) preses del projecte en un moment determinat, per exemple, contenint les versions estables de l'aplicaci\u00f3.</li> </ul> <p>Aix\u00ed doncs, crearem aquestes carpetes en el repositori tal com ens indica. Per fer-ho, farem un checkout del repositori. Aquest concepte, que ja hem introdu\u00eft en RCS, \u00e9s molt semblant en Subversion i consisteix a obtenir una c\u00f2pia local de treball des del repositori.</p> <p>En primer lloc, dins de la carpeta que vulguem utilitzar per al control de versions en el nostre equip, farem el checkout seguint la sintaxi:</p> <pre><code>svn checkout --username=Usuari Repositori_Remot Directori_Local\n</code></pre> <p>L'adre\u00e7a del repositori remot s'especifica a trav\u00e9s del protocol svn sobre un t\u00fanel SSH (svn+ssh://) per mantenir una comunicaci\u00f3 segura. A m\u00e9s, aquest protocol requerir\u00e0 d'autenticaci\u00f3.</p> <p>En el nostre cas, farem (recorda utilitzar el teu nom d'usuari i la ruta que t'indica SourceForge):</p> <pre><code>$ svn checkout --username=alumno-dam-mgh svn+ssh://alumno-dam-mgh@svn.code.sf.net/p/primer-proyecto-en-svn/code/ primer-proyecto-en-svn-code\n...\nThe authenticity of host 'svn.code.sf.net (216.105.38.17)' can't be established.\nECDSA key fingerprint is SHA256:FeVkoYYBjuQzb5QVAgm3BkmeN5TTgL2qfmqz9tCPRL4.\nAre you sure you want to continue connecting (yes/no/[fingerprint])? yes\nPassword: \nChecked out revision 0.\n</code></pre> <p>Com veiem, ens demanar\u00e0 confirmaci\u00f3 per connectar-nos a trav\u00e9s de SSH amb el repositori, i tamb\u00e9 ens demanar\u00e0 la nostra contrasenya en SourceForge.</p> <p>Fet aix\u00f2, ja ens diu que tenim la revisi\u00f3 0. Ara anem a crear les tres carpetes dins del directori:</p> <pre><code>$ cd primer-proyecto-en-svn-code\n$ mkdir trunk branches tags\n</code></pre> <p>I les afegim al sistema de control de versions. Per a aix\u00f2, utilitzarem l'ordre svn add, indicant els noms d'aquestes carpetes:</p> <pre><code>$ svn add trunk branches tags\nA         trunk\nA         branches\nA         tags\n</code></pre> <p>La sortida d'aquesta ordre ens mostra una l\u00ednia per recurs afegit o modificat al control de versions. Quan la l\u00ednia comen\u00e7a per la lletra A, ens indica que s'ha afegit el recurs.</p> <p>Ara ja tenim aquestes carpetes sota el control de versions, per\u00f2 ens falta sincronitzar-les amb el servidor. Aix\u00f2 ho farem mitjan\u00e7ant un commit (svn ci), que \u00e9s l'operaci\u00f3 amb la qual enviem les dades que tenim en la carpeta local al repositori remot:</p> <pre><code>$ svn ci -m \"Add initial directories\"\nPassword: \nAdding         branches\nAdding         tags\nAdding         trunk\nCommitting transaction...\nCommitted revision 1.\n</code></pre> <p>Amb aix\u00f2, veiem que ara el n\u00famero de revisi\u00f3 ja \u00e9s el 1 i es troba sincronitzada amb el repositori.</p> <p>Si ara tornem a la p\u00e0gina del nostre projecte en SourceForge i la refresquem en el navegador, veurem que ja tenim disponibles aquestes carpetes en el projecte.</p>"},{"location":"cps_amp/#treballant-en-equip-amb-el-repositori","title":"Treballant en equip amb el repositori","text":"<p>En aquest apartat simularem el treball en equip o amb diversos ordinadors contra el servidor de Subversion del nostre projecte.</p> <p>Per a aix\u00f2, descarregarem de nou el repositori, per\u00f2 ho farem en un directori diferent del primer. Des d'aquesta segona c\u00f2pia, el modificarem i pujarem els canvis. En el nostre cas, aix\u00f2 ser\u00e0 una c\u00f2pia en el nostre ordinador, per\u00f2 podria tractar-se d'una c\u00f2pia en l'ordinador de qualsevol col\u00b7laborador del nostre projecte. Finalment, veurem com actualitzar aquests canvis des del servidor.</p>"},{"location":"cps_amp/#pas-1-obtenint-una-copia-local-nova-del-projecte","title":"Pas 1. Obtenint una c\u00f2pia local nova del projecte","text":"<p>Per obtenir una c\u00f2pia local nova del projecte, farem:</p> <pre><code>$ svn checkout --username=alumno-dam-mgh svn+ssh://alumno-dam-mgh@svn.code.sf.net/p/primer-proyecto-en-svn/code/ copia_proyecto\nPassword: \nA    copia_proyecto/branches\nA    copia_proyecto/tags\nA    copia_proyecto/trunk\nChecked out revision 1.\n</code></pre> <p>Com veiem, s'ha creat la carpeta copia_proyecto amb la revisi\u00f3 1, incorporant les carpetes branches, tags i trunk creades anteriorment.</p> <p>D'acord, continuar\u00e9 amb la traducci\u00f3 literal i la conversi\u00f3 a Markdown sense preguntar m\u00e9s.</p>"},{"location":"cps_amp/#pas-2-afegint-contingut-i-pujant-lo-al-repositori-des-de-la-copia","title":"Pas 2. Afegint contingut i pujant-lo al repositori des de la c\u00f2pia","text":"<p>Crearem un fitxer nou en la carpeta trunk del projecte que anomenarem fitxer1.md amb el seg\u00fcent contingut. Pots utilitzar l'editor de text o codi que desitges:</p> <pre><code># Projecte amb Subversion\n\nAquest \u00e9s el nostre primer projecte en Sourceforge utilitzant Subversion per al m\u00f2dul d'Entorns de Desenvolupament.\n</code></pre> <p>El guardem i tornem a la terminal per comprovar l'estat del SCV. Per a aix\u00f2, utilitzarem l'ordre svn st (de status) des del directori de treball:</p> <pre><code>$ svn st\n?       trunk/fichero1.md\n</code></pre> <p>Com podem veure, ens mostra una l\u00ednia que comen\u00e7a amb el signe d'interrogaci\u00f3 i la ruta trunk/fichero1.md. Aix\u00f2 significa que el fitxer fichero1.md dins del directori trunk no es troba encara sota el sistema de control de versions.</p> <p>Per afegir-lo, utilitzarem de nou l'ordre svn add:</p> <pre><code>$ svn add trunk/fichero1.md \nA         trunk/fichero1.md\n</code></pre> <p>Ara ja ens indica que el fitxer1.md ha sigut incorporat al SCV.</p> <p>Si ara consultem l'estat amb svn st, obtindrem la mateixa sortida, indicant que hem afegit aquest fitxer al control de versions.</p> <p>Aix\u00ed i tot, aquest fitxer est\u00e0 afegit en la nostra c\u00f2pia de treball local, per la qual cosa hem d'enviar-lo al servidor. Per a aix\u00f2, fem un commit com en el pas anterior:</p> <pre><code>$ svn ci -m \"Added fichero1.md\"\nPassword: \nAdding         trunk/fichero1.md\nTransmitting file data .done\nCommitting transaction...\nCommitted revision 2.\n</code></pre> <p>Amb aix\u00f2, ja tenim la segona revisi\u00f3 del projecte en el repositori. Si naveguem per la web, podrem trobar i consultar aquest fitxer. Observa que, en tractar-se d'un fitxer en format Markdown, la p\u00e0gina ja ens mostra el document formatat en lloc de mostrar el codi font.</p>"},{"location":"cps_amp/#pas-3-actualitzant-la-carpeta-de-treball-original","title":"Pas 3. Actualitzant la carpeta de treball original","text":"<p>Quan treballem amb altres desenvolupadors en un mateix projecte, \u00e9s habitual que cadascun tinga la seua c\u00f2pia de treball local del repositori i l'actualitze cada vegada que realitze canvis en ell. En aquests casos, sempre \u00e9s una bona pr\u00e0ctica actualitzar la nostra c\u00f2pia de treball amb el contingut del repositori abans de realitzar qualsevol canvi.</p> <p>Tornem a la nostra carpeta original i actualitzem el contingut amb l'ordre update de Subversion (svn up):</p> <pre><code>$ cd primer-proyecto-en-svn-code/\n$ svn up\nUpdating '.':\nPassword: \nA    trunk/fichero1.md\nUpdated to revision 2.\n</code></pre> <p>Com podem veure, en actualitzar, la nostra c\u00f2pia de treball local s'ha actualitzat afegint el fitxer1.md a la carpeta trunk.</p>"},{"location":"cps_amp/#pas-4-modificant-recursos-existents","title":"Pas 4. Modificant recursos existents","text":"<p>Fins ara hem vist com afegir nous recursos al control de versions. Ara veurem com modificar fitxers existents i pujar-los.</p> <p>Des de la c\u00f2pia inicial que acabem d'actualitzar, modifiquem el fitxer1.md amb el seg\u00fcent contingut:</p> <pre><code># Projecte amb Subversion\n\nAquest \u00e9s el nostre primer projecte en Sourceforge utilitzant Subversion per al m\u00f2dul d'Entorns de Desenvolupament.\n\nEn aquest cas pr\u00e0ctic estem treballant els diferents ordrements de subversion:\n\n* `svn co`: Per fer un *checkout*.\n* `svn ci`: Per fer un *commit* sobre el repositori.\n* `svn st`: Per comprovar l'estat.\n* `svn add`: Per afegir un recurs al control de versions.\n* `svn up`: Per actualitzar la nostra c\u00f2pia de treball local des del repositori.\n</code></pre> <p>Guardem el fitxer i comprovem l'estat:</p> <pre><code>$ svn st\nM       trunk/fichero1.md\n</code></pre> <p>Com podem veure, ara en lloc d'una A, ens mostra una M, indicant que el recurs ha sigut modificat. Ara nom\u00e9s ens queda confirmar aquests canvis en el servidor amb un commit:</p> <pre><code>$ svn ci -m \"Modificat fichero1.md\"\nPassword: \nSending        trunk/fichero1.md\nTransmitting file data .done\nCommitting transaction...\nCommitted revision 3.\n</code></pre> <p>Amb aix\u00f2 obtenim la versi\u00f3 3 del projecte en el repositori.</p>"},{"location":"cps_amp/#exercici-1","title":"Exercici 1","text":"<p>Des de la segona c\u00f2pia de treball que hem creat del repositori, crea un nou fitxer dins del directori trunk anomenat fichero2. Afig-lo al control de versions i puja'l al repositori.</p> <p>Ara, des de la primera c\u00f2pia de treball del projecte, intenta crear el mateix fitxer amb alguna cosa de contingut i prova a pujar-lo al repositori. \u00c9s possible? On ha estat l'error?</p>"},{"location":"cps_amp/#solucio","title":"Soluci\u00f3","text":"<p>Creem el nou fitxer dins de la carpeta trunk. Per a aix\u00f2, podem utilitzar l'ordre touch, que ens crear\u00e0 un fitxer sense contingut:</p> <pre><code>$ touch trunk/fichero2\n</code></pre> <p>Si observem ara l'estat de la carpeta de treball:</p> <pre><code>$ svn st\n?       fichero2\n</code></pre> <p>Veiem que existeix un fitxer que no est\u00e0 sota el control de versions, aix\u00ed que l'afegim:</p> <pre><code>$ svn add trunk/fichero2 \nA         fichero2\n</code></pre> <p>Una vegada afegit, el pugem al servidor:</p> <pre><code>$ svn ci -m \"Added fichero2\"\nPassword: [introdu\u00efm la contrasenya]\nAdding         fichero2\nTransmitting file data .done\nCommitting transaction...\nCommitted revision 4.\n</code></pre> <p>Ara, des de la primera c\u00f2pia de treball del projecte, intentem crear el mateix fitxer amb contingut. Per a aix\u00f2, podem utilitzar l'ordre echo, que mostra un missatge, i redirigir-lo al fitxer trunk/fichero2. Amb aix\u00f2, aconseguim escriure el missatge en el fitxer:</p> <pre><code>$ echo \"Provant l'exercici2\" &gt; trunk/fichero2\n</code></pre> <p>Ara afegim el fitxer al control de versions:</p> <pre><code>$ svn add trunk/fichero2 \nA         trunk/fichero2\n</code></pre> <p>I intentem pujar-lo al servidor:</p> <pre><code>$ svn ci -m \"Fichero2 des de la primera c\u00f2pia\"\nPassword: \nAdding         trunk/fichero2\nTransmitting file data .done\nCommitting transaction...\nsvn: E160020: Commit failed (details follow):\nsvn: E160020: File already exists: filesystem 'c4543e9e-acd8-420a-86bb-cb6327f0ec99' transaction '4-4' path '/trunk/fichero2'\n</code></pre> <p>Com era d'esperar, la transacci\u00f3 falla, ja que el fitxer que volem escriure ja es troba en el repositori.</p> <p>Aix\u00f2 \u00e9s un problema habitual quan treballem juntament amb diversos desenvolupadors en un projecte. Per aix\u00f2 \u00e9s una bona pr\u00e0ctica actualitzar el repositori abans de comen\u00e7ar a modificar el codi.</p> <p>Veiem en quin estat es troba el directori de treball mitjan\u00e7ant svn st:</p> <pre><code>$ svn st\nA       trunk/fichero2\n</code></pre> <p>Com veiem, el fitxer est\u00e0 en el control de versions, per\u00f2 encara no s'ha pujat al servidor.</p> <p>Si ara intentem actualitzar el contingut amb l'ordre update:</p> <pre><code>$ svn up\nUpdating '.':\nPassword: \n   C trunk/fichero2\nAt revision 4.\n</code></pre> <p>He completat el document fins al final. Si necessites m\u00e9s ajustos o traduccions, avisa'm!</p>"}]}