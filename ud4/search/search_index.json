{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Inici","text":""},{"location":"#resultats-daprenentatge","title":"Resultats d'aprenentatge","text":"<ul> <li>RA1. Reconeix els elements i eines que intervenen en el desenvolupament d'un programa inform\u00e0tic, analitzant les seues caracter\u00edstiques i les fases en les quals actuen fins a arribar a la seua posada en funcionament.</li> <li>RA2. Avalua entorns integrats de desenvolupament analitzant les seues caracter\u00edstiques per a editar codi font i generar executables.</li> </ul>"},{"location":"#criteris-davaluacio","title":"Criteris d'avaluaci\u00f3","text":"<ul> <li>RA1.d) RA1.d) S'han reconegut les caracter\u00edstiques de la generaci\u00f3 de codi intermedi per a la seua execuci\u00f3 en m\u00e0quines virtuals.</li> <li>RA2.f) S'han generat executables a partir d'un mateix codi font amb diversos entorns de desenvolupament.</li> <li>RA2.g) S'han identificat les caracter\u00edstiques comunes i espec\u00edfiques de diversos entorns de desenvolupament.</li> </ul> <p>Comencem!</p>"},{"location":"1.intro/","title":"La plataforma Java","text":""},{"location":"1.intro/#la-plataforma-java","title":"La plataforma Java","text":"<p>La plataforma Java \u00e9s un entorn per al desenvolupament d\u2019aplicacions multiplataforma, que t\u00e9 com a llenguatge de desenvolupament principal el propi llenguatge Java. Com ja coment\u00e0rem en la primera unitat, les aplicacions Java s\u00f3n compilades a un llenguatge intermedi o bytecode, que s\u2019executen sobre la m\u00e0quina virtual de Java (JVM).</p> <p>Aquesta m\u00e0quina virtual, juntament amb les biblioteques de Java, conformen el que \u00e9s l\u2019entorn d\u2019execuci\u00f3 de Java, Java Runtime Environment o JRE, que \u00e9s l\u2019entorn que necessitarem per a executar qualsevol aplicaci\u00f3 Java en un equip.</p> <p>Ara b\u00e9, quan ens dediquem al desenvolupament d\u2019aplicacions Java, necessitarem un altre component de la plataforma, el JDK, Java Development Kit o Kit de desenvolupament de Java. Aquest component \u00e9s el que contindr\u00e0 les eines necess\u00e0ries per a compilar a bytecode els nostres programes en llenguatge font. En general, a aquest conjunt d\u2019eines de desenvolupament se\u2019ls coneix de forma gen\u00e8rica com a Software Development Kits (SDK).</p> <p></p> <p>Quan instal\u00b7lem Java en el nostre ordinador, a m\u00e9s de la m\u00e0quina virtual, s\u2019instal\u00b7len una s\u00e8rie de biblioteques; programari addicional que ens proporciona certes funcionalitats d\u2019\u00fas com\u00fa, i que es coneixen com la biblioteca est\u00e0ndard de Java. Aquestes biblioteques proporcionen una interf\u00edcie de programaci\u00f3 d\u2019aplicacions o API (Application Programming Interface).</p> <p>Existeixen, a m\u00e9s, diverses edicions de la plataforma Java. La que utilitzarem habitualment ser\u00e0 l\u2019edici\u00f3 est\u00e0ndard, JavaSE (Java Standard Edition). Quan parlem habitualment de JDK, solem referir-nos a aquesta edici\u00f3, que ofereix una API per al desenvolupament d\u2019aplicacions d\u2019escriptori independents i basades en interf\u00edcies gr\u00e0fiques. Per a aplicacions comercials a major escala, com aplicacions web o aplicacions distribu\u00efdes, la plataforma Java compta amb l\u2019edici\u00f3 empresarial Java Enterprise Edition o JavaEE. Aquesta edici\u00f3 est\u00e0 constru\u00efda sobre JavaSE, a la qual incorpora una API d\u2019alt nivell. Empreses com Oracle, RedHat i IBM ofereixen implementacions pr\u00f2pies d\u2019aquesta API. Per altra banda, cal mencionar JavaME, o l\u2019edici\u00f3 Micro, amb una API pensada espec\u00edficament per al desenvolupament d\u2019aplicacions en dispositius m\u00f2bils i integrats.</p>"},{"location":"1.intro/#implementacions-del-jdk","title":"Implementacions del JDK","text":"<p>Java va ser desenvolupat en la d\u00e8cada dels 90 per Sun Microsystems. L\u2019any 2010, Sun va ser adquirida per Oracle, i amb ella, totes les seues tecnologies, Java inclosa. Abans d\u2019aix\u00f2, en 2007, Sun va llicenciar la majoria de les seues tecnologies sota la Llic\u00e8ncia P\u00fablica General de GNU (GNU/GPL).</p> <p>Aix\u00ed doncs, existeixen actualment dues versions principals del JDK: la mantinguda per Oracle (Oracle JDK) i OpenJDK, la versi\u00f3 lliure, fruit d\u2019aquest esfor\u00e7 de Sun abans de la seua venda a Oracle, mantinguda per la comunitat OpenJDK.</p> <p>Respecte al llan\u00e7ament de versions del JDK d\u2019Oracle, des de Java 10 es llancen noves versions cada 6 mesos, amb un per\u00edode de suport curt, mentre que les versions LTS (Long Term Support), es llancen cada 3 anys. Les \u00faltimes versions del JDK d\u2019Oracle s\u00f3n:</p> <ul> <li>JavaSE 21 (LTS), Setembre de 2023.</li> <li>JavaSE 22, Mar\u00e7 de 2024.</li> <li>JavaSE 23, Octubre de 2024.</li> </ul> <p>A m\u00e9s, des de Gener de 2019, es requereix d\u2019una llic\u00e8ncia d\u2019Oracle per a accedir a les actualitzacions i el suport.</p> <p>Per la seua banda, OpenJDK, encara que siga de codi obert, no deixa de ser una implementaci\u00f3 oficial de JavaSE. De fet, el JDK d\u2019Oracle es basa en OpenJDK, i igual que aquest, ofereix noves versions cada 6 mesos, corresponent-se el n\u00famero de versi\u00f3 amb el del JDK d\u2019Oracle.</p> <p>A m\u00e9s d\u2019aquestes, existeixen altres implementacions de Java, com Amazon Corretto, IBM JDK o Azul Zulu, entre altres.</p>"},{"location":"1.intro/#installacio-dopenjdk","title":"Instal\u00b7laci\u00f3 d'OpenJDK","text":""},{"location":"1.intro/#installacio-en-sistemes-linux","title":"Instal\u00b7laci\u00f3 en sistemes Linux","text":"<p>OpenJDK es troba disponible en tots els repositoris de programari de les principals distribucions de GNU/Linux. Anem a instal\u00b7lar la versi\u00f3 21 de l\u2019OpenJDK en un sistema basat en Ubuntu. Per a aix\u00f2, podem fer-ho b\u00e9 des del centre de programari que ofereix la distribuci\u00f3, o mitjan\u00e7ant la l\u00ednia d'ordres. Utilitzarem aquest segon m\u00e8tode, per ser m\u00e9s gen\u00e8ric.</p> <p>Obrirem una nova terminal, i en primer lloc actualitzem la mem\u00f2ria cau de paquets de programari amb l'ordre (escrivim l'ordre sense el prompt $ i premem intro):</p> <pre><code>sudo apt update\n</code></pre> <p>Aix\u00f2 ens demanar\u00e0 la contrasenya d\u2019administrador, i despr\u00e9s d\u2019aix\u00f2, descarregar\u00e0 l\u2019\u00faltima llista de paquets disponibles per a la nostra distribuci\u00f3.</p> <p>Una vegada tinguem la mem\u00f2ria cach\u00e9 de paquets actualitzada, instal\u00b7lem la versi\u00f3 LTS m\u00e9s recent del JDK amb:</p> <pre><code>sudo apt install default-jdk\n</code></pre> <p>En aquest cas, la versi\u00f3 que instal\u00b7la de l\u2019OpenJDK \u00e9s la 21 (<code>openjdk-21-jdk</code>), que es correspon amb l\u2019\u00faltima LTS. Fixeu-vos que a part d\u2019aquest, la instal\u00b7laci\u00f3 arrossega diversos paquets com a depend\u00e8ncies (\u00e9s a dir, que OpenJDK requereix d\u2019ells per a funcionar). Entre ells es troba el paquet <code>openjdk-21-jre</code>, que \u00e9s el que implementa el Java Runtime Environment, que com hem dit anteriorment, forma part del JDK.</p> <p>En Ubuntu, la instal\u00b7laci\u00f3 es realitza per defecte en la carpeta <code>/usr/lib/jvm/java-21-openjdk-amd64</code>. A m\u00e9s, es genera l\u2019enlla\u00e7 <code>/usr/bin/java</code> que apunta a <code>/etc/alternatives/java</code>, que al seu torn \u00e9s tamb\u00e9 un enlla\u00e7 a /<code>usr/lib/jvm/java-21-openjdk-amd64/bin/java</code>. Els alternatives ens serviran per a utilitzar diversos entorns Java en el nostre ordinador. Igual que s\u2019ha fet amb l'ordre <code>java</code>, que \u00e9s qui invoca la m\u00e0quina virtual, s\u2019han generat els enlla\u00e7os corresponents per al compilador <code>javac</code>. Podem comprovar les versions d'ambd\u00f3s escrivint en un terminal:</p> <pre><code>$ java --version\n...\n$javac --version\n</code></pre> <p>Si b\u00e9 amb aix\u00f2 ja tenim disponibles des de qualsevol lloc les ordres java i javac, configurarem la variable d'entorn <code>JAVA_HOME</code>, necess\u00e0ria en algunes aplicacions Java, i que cont\u00e9 la carpeta d'instal\u00b7laci\u00f3. A m\u00e9s, actualitzarem la variable del sistema <code>PATH</code> perqu\u00e8 incloga tamb\u00e9 aquesta carpeta. Per aix\u00f2, a la nostra carpet ad'usuari editar\u00edem el fitxer <code>~/.bashrc</code> i afegirem al final les seg\u00fcents l\u00ednies (no ho feu encara!):</p> <pre><code># JAVA_HOME\nif [ -d /usr/lib/jvm/java-21-openjdk-amd64/ ]; then\n    export JAVA_HOME=\"/usr/lib/jvm/java-21-openjdk-amd64/\"\nfi\n\n# Afegim el path dels binaris per a Java\nif [ -d \"$JAVA_HOME/bin\" ] ; then\n    PATH=$JAVA_HOME/bin:$PATH\nfi\n</code></pre> <p>Amb aix\u00f2 establir\u00edem Java 21 com a Java predeterminat. Ara b\u00e9, si modifiquem la versi\u00f3 de java predeterminada amb:</p> <pre><code>$ sudo update-alternatives --config java\n\n  Selecci\u00f3    Cam\u00ed                                        Prioritat  Estat\n------------------------------------------------------------\n* 0            /usr/lib/jvm/java-21-openjdk-amd64/bin/java   2111      mode autom\u00e0tic\n  1            /usr/lib/jvm/java-17-openjdk-amd64/bin/java   1711      mode manual\n  2            /usr/lib/jvm/java-21-openjdk-amd64/bin/java   2111      mode manual\n</code></pre> <p>I seleccionem una versi\u00f3 diferent a la 21, el <code>$JAVA_HOME</code> ja no es modificar\u00eda. Una forma diferent de fer-ho seria afegint al <code>~/.bashrc</code> el seg\u00fcent:</p> <pre><code># Estableix JAVA_HOME basat en l'alternativa seleccionada\nexport JAVA_HOME=$(dirname $(dirname $(readlink -f $(which java))))\n\n# Afegim el path dels binaris per a Java\nexport PATH=$JAVA_HOME/bin:$PATH\n</code></pre> <p>Amb aix\u00f2, agafaria el JAVA que h\u00e0gem configurat amb l'<code>update-alternatives</code>. De tota manera, i per tal que els canvis tinguen efecte, caldr\u00e0 fer un source d'aquest fitxer:</p> <pre><code>source ~/.bashrc\n</code></pre> <p>O b\u00e9 obrir una terminal nova.</p>"},{"location":"1.intro/#installacio-a-windows","title":"Instal\u00b7laci\u00f3 a Windows","text":"<p>Per a la instal\u00b7laci\u00f3 i configuraci\u00f3 del JDK a Windows comen\u00e7arem descarregant l'OpenJDK des del lloc web de l'arxiu de version: https://jdk.java.net/archive/. Els binaris de la versi\u00f3 21 estaran a l'apartat 21.0.2 (build 21.0.2+13).</p> <p></p> <p>Des d'aquesta p\u00e0gina, descarreguem el binari per a Windows/x64, i el descomprimim des d'on l'h\u00e0gem descarregat (bot\u00f3 dret del ratol\u00ed, i Extraure-ho tot). Si, per exemple, ho hem descomprimit a C:\\java, de manera que ens genera la carpeta per al JDK C:\\java\\jdk-21.0.1. Podem descomprimir-lo on siga, sempre que recordem aquesta ruta per establir les variables corresponents.</p> <p>Per poder accedir al JDK des de qualsevol lloc, cal crear la variable d'entorn <code>JAVA_HOME</code> i actualitzar el <code>PATH</code>, per llan\u00e7ar java des de qualsevol ubicaci\u00f3.</p> <p>Per crear <code>JAVA_HOME</code>, haurem d'obrir la finestra de configuraci\u00f3 de variables del sistema. Per aix\u00f2, des del men\u00fa d'inici, busquem Sistema de Windows &gt; Panell de Control. I des d'aquest panell de Control, Sistema i Seguretat &gt; Seguretat i Manteniment &gt; Configuraci\u00f3 avan\u00e7ada del sistema. I a la finestra que apareix, disposem d'un bot\u00f3 per configurar les variables d'entorn. Tamb\u00e9 podrem accedir-hi m\u00e9s f\u00e0cilment cercant amb la lupa Editar les variables d'entorn.</p> <p></p> <p>A la finestra per establir les variables, ens situarem a la part de Variables del Sistema, i seleccionarem Nova. El nom d'aquesta nova variable ser\u00e0 <code>JAVA_HOME</code>, i us donarem per valor la ubicaci\u00f3 de la carpeta on es va instal\u00b7lar el JDK (en el nostre cas <code>C:\\java\\jdk-21.0.1</code>):</p> <p></p> <p>Ara ens queda modificar la variable PATH. Per aix\u00f2, des de la finestra anterior, busquem la variable Path a les variables del sistema, la seleccionem i fem clic al bot\u00f3 d'Editar. A la finestra d'edici\u00f3 de la variable, seleccionarem l'opci\u00f3 Examinar per cercar el directori bin de la instal\u00b7laci\u00f3 del JDK i afegir-lo al Path.</p> <p></p> <p>Donem a acceptar a totes les finestres, i ja tindrem disponible el nostre JDK en tot el sistema. Per exemple, podem obrir una terminal i escriure:</p> <pre><code>C:\\Users\\Alumne&gt; java --version\n</code></pre>"},{"location":"2.vscode/","title":"Java i Visual Studio Code","text":""},{"location":"2.vscode/#visual-studio-code-i-java","title":"Visual Studio Code i Java","text":"<p>A la segona unitat vam veure com instal\u00b7lar Visual Studio Code, i algunes extensions per a python. Anem a veure com configurar-lo per tal de poder utilitzar-lo en el desenvolupament d'aplicacions Java. Aprofitarem aix\u00ed tota la pot\u00e8ncia de Java i la lleugeresa de l'editor. En aquest apartat veurem com afegir el suport per a Java a Visual Studio Code, i com configurar-lo perqu\u00e8 utilitze les eines del JDK instal\u00b7lat pr\u00e8viament.</p>"},{"location":"2.vscode/#extensions-per-a-java","title":"Extensions per a Java","text":"<p>Visual Studio Code disposa de centenars d'extensions relacionades amb Java. Per comen\u00e7ar, utilitzarem l'extensi\u00f3 <code>Extension Pack for Java</code>. Per a aix\u00f2, fem clic en el bot\u00f3 de l'activitat d'Extensions, la busquem en la barra superior, i fem clic en el bot\u00f3 d'instal\u00b7lar:</p> <p></p> <p>Realment, no es tracta d'una extensi\u00f3 en si, sin\u00f3 d'un conjunt d'extensions, format per:</p> <ul> <li>L'extensi\u00f3 Language Support for Java(TM) by Red Hat, amb el suport de Java per a l'IDE Eclipse que ens ofereix ressaltat i comprovaci\u00f3 de la sintaxi i errors de compilaci\u00f3, autocompletat de codi, refactoritzaci\u00f3, suport a JavaDoc, o petits fragments de codi reutilitzable d'\u00fas com\u00fa (snippets).</li> <li>L'extensi\u00f3 Project Manager for Java, que es complementa amb l'anterior i proporciona eines d'exploraci\u00f3, creaci\u00f3 i construcci\u00f3 de projectes Java.</li> <li>L'extensi\u00f3 Debugger for Java, amb un depurador lleuger que permet llan\u00e7ar les aplicacions, afegir punts de ruptura, pausar i continuar l'execuci\u00f3, seguiment de variables, etc\u00e8tera.</li> <li>L'extensi\u00f3 Java Test Runner, per a executar diferents proves de funcionament, aix\u00ed com tests unitaris de JUnit, depuraci\u00f3 o logs.</li> <li>L'extensi\u00f3 Maven for Java, per a la gesti\u00f3 de projectes Maven, dels quals parlarem en seg\u00fcents apartats. Aquesta extensi\u00f3 ens facilita un explorador de projectes, i proporciona eines per a la seua generaci\u00f3, validaci\u00f3, compilaci\u00f3, realitzaci\u00f3 de tests o desplegament.</li> <li>L'extensi\u00f3 Gradle for Java, per a la gesti\u00f3 de projectes en el sistema Gradle, que tamb\u00e9 treballarem m\u00e9s endavant.</li> <li>L'extensi\u00f3 Visual Studio IntelliCode, que ofereix algunes caracter\u00edstiques de desenvolupament basades en intel\u00b7lig\u00e8ncia artificial, de manera que \u00e9s capa\u00e7 d'inferir qu\u00e8 anem a escriure segons el context del codi i l'aprenentatge autom\u00e0tic a partir del codi ja generat.</li> </ul> <p>En principi, aix\u00f2 hauria de ser suficient per tindre VSCode configurat per treballar amb Java.</p> <p>En ocasions, si no s'ha configurat correctament el JAVA_HOME, cal indicar la ruta espec\u00edficament a trav\u00e9s de la propietat <code>\"java.jdt.ls.java.home\"</code> de la configuraci\u00f3.</p> <p>Una altra extensi\u00f3 interessant que podeu utilitzar \u00e9s la Java Snippets de Seudev:</p> <p></p> <p>Aquesta extensi\u00f3 ofereix una s\u00e8rie de snippets o fragments/plantilles de codi d'\u00fas com\u00fa, que ens poden agilitzar la creaci\u00f3 d'aplicacions. En la documentaci\u00f3 a la web o al propi VSCode de l'extensi\u00f3 podeu veure quines s\u00f3n les abreviacions que utilitza per als snippets.</p>"},{"location":"2.vscode/#el-nostre-primer-codi-java-en-vscode-depuracio","title":"El nostre primer codi Java en VSCode. Depuraci\u00f3.","text":"<p>Una vegada instal\u00b7lades les extensions i configurat l'entorn, anem a crear el nostre primer codi. Per a aix\u00f2, creem un nou fitxer en la nostra carpeta o espai de treball, que anomenarem <code>Hola.java</code>.</p> <p>Si dins el fitxer en blanc premem la lletra <code>c</code> l'extensi\u00f3 de Java Snippets ens suggerir\u00e0 utilitzar l'snippet per definir una classe, i amb l'abreviaci\u00f3 <code>main</code> ens permet generar el m\u00e8tode <code>main</code>. Finalment, dins aquest main, podem escriure <code>sout</code>, per fer directament un <code>System.out.println</code>.</p> <p>Amb tot aix\u00f2 fem un primer \"Hola M\u00f3n\":</p> <pre><code>public class Hola {\n    public static void main(String[] args) {\n        System.out.println(\"Hola M\u00f3n\");\n    }\n}\n</code></pre> <p>Aquest codi podem llan\u00e7ar-lo de dues formes:</p> <ol> <li>A trav\u00e9s de la terminal, obrint una nova terminal, i despr\u00e9s compilant-lo amb <code>javac</code> per generar el fitxer <code>.class</code> amb el bytecode i executant-lo amb <code>java</code>:</li> </ol> <pre><code>$ javac Hola.java\n\n$ java Hola\n\nHola M\u00f3n\n</code></pre> <ol> <li>Directament des de l'IDE, amb el bot\u00f3 d'executar, situat a la part superior a la dreta, seleccionant Run Java:</li> </ol> <p></p> <p>Si parem atenci\u00f3 tamb\u00e9 a la finestra on es troba el codi, veurem que sobre la declaraci\u00f3 del <code>main</code> tenim tamb\u00e9 dues opcions Run i Debug que podem fer servir tamb\u00e9 per llan\u00e7ar el codi i per depurar-lo. Una altra opci\u00f3 per executar el codi \u00e9s mitjan\u00e7ant la combinaci\u00f3 de tecles <code>Ctrl+F5</code>.</p>"},{"location":"2.vscode/#depuracio-del-codi","title":"Depuraci\u00f3 del codi","text":"<p>L'opci\u00f3 de Debug inicia la depuraci\u00f3 del programa. Aix\u00f2 ens permet executar pas a pas el nostre programa, per al que necessitem establir un punt de ruptura o breakpoint. Fer aix\u00f2 \u00e9s bastant senzill. Si ens fixem en l'editor, quan passem el ratol\u00ed pel costat esquerre dels n\u00fameros de l\u00ednia, apareixen uns punts de color taronja. Si fem clic en un d'ells, s'estableix un breakpoint en aquesta l\u00ednia, de manera que l'execuci\u00f3 es pare quan arribe a ell, i ens permeta realitzar una execuci\u00f3 pas a pas. No totes les l\u00ednies de codi s\u00f3n susceptibles de ser punts de ruptura. Per exemple, les l\u00ednies on obrim o tanquem claus \u00fanicament no poden ser-ho, ja que no contenen codi que s'execute.</p> <p>Per exemple, podem provar el seg\u00fcent codi que fa un bucle amb un if intern:</p> <pre><code>public class Hola {\n\n    public static void main(String[] args) {\n        System.out.println(\"Hola M\u00f3n\");\n\n        for (int i = 0; i &lt; 5; i++) {\n            if (i%2==0)\n                System.out.println(i+\" \u00e9s parell\");\n        }\n    }\n\n}\n</code></pre> <p>Si afegim un breakpoint en la l\u00ednia del segon <code>println</code>, i comencem la depuraci\u00f3, veurem que l'execuci\u00f3 es para abans de mostrar aquesta l\u00ednia, i que la barra d'estat ha passat a color taronja, indicant que estem en mode depuraci\u00f3. La interf\u00edcie haur\u00e0 canviat lleugerament, mostrant a la part esquerra alguns detalls de l'execuci\u00f3, com el valor de les variables que es troben actives o la pila de crides, entre altres coses:</p> <p></p> <p>Per a continuar amb l'execuci\u00f3 fins al final, farem clic en la primera icona blava de la barra de depuraci\u00f3 que va apar\u00e8ixer en la part superior (o premem F5), o si desitgem executar pas a pas, utilitzarem la segona icona (o premem F10). Per a eliminar un breakpoint \u00fanicament haurem de tornar a fer clic sobre el cercle taronja que apareix al costat de la l\u00ednia.</p>"},{"location":"3.netbeans/","title":"Netbeans","text":""},{"location":"3.netbeans/#netbeans","title":"Netbeans","text":"<p>En aquest apartat anem a introduir-nos en l'IDE Netbeans, per al desenvolupament d'aplicacions Java. NetBeans \u00e9s un entorn de desenvolupament integrat (IDE) de codi obert, desenvolupada per l'Apache Foundation, que proporciona eines potents per a la creaci\u00f3, depuraci\u00f3 i execuci\u00f3 de programes Java.</p>"},{"location":"3.netbeans/#installacio-de-netbeans","title":"Instal\u00b7laci\u00f3 de NetBeans","text":"<p>Per tal d'instal\u00b7lar Apache Netbeans, i amb les variables JAVA_HOME i PATH actualitzades, descarregarem l'IDE des de la mateixa web del projecte, concretament des de la p\u00e0gina de desc\u00e0rregues.</p> <p>To i que podem descarregar els fitxers executables per als nostres sistemes, anem a descarregar els binaris, que s\u00f3n independents de la plataforma, i s'executen sobre la m\u00e0quina virtual de Java: <code>netbeans-23-bin.zip</code>.</p> <p>Una vegada descarregat el fitxer, per exemple a una carpeta <code>devtools</code>, dins el vostre directori d'usuari, el descomprimim, i busquem a dins la carpeta <code>bin</code> l'executable. Per a Linux aquest ser\u00e0 <code>netbeans</code> i per a Windows <code>netbeans.exe</code> o <code>netbeans64.exe</code>.</p>"},{"location":"3.netbeans/#creacio-dun-projecte-java","title":"Creaci\u00f3 d'un Projecte Java","text":"<p>Per crear un projecte, seguirem els seg\u00fcents pasos:</p> <ol> <li>Dins de Netbeans seleccionem File &gt; New Project o fem clic en el bot\u00f3 de \"Nou Projecte\" en la barra d'eines.</li> <li>En l'assistent de nou projecte, seleccionem Java with Ant&gt; Java Application i fem clic en Next.</li> <li>Introduim el nom del projecte (per exemple, <code>HolaMon</code>) i especifiquem la seua ubicaci\u00f3.      </li> <li>Fem clic en Finish per crear el projecte.</li> </ol> <p>Aix\u00f2 es generar\u00e0 una estructura l\u00f2gica de paquets per al projecte, que podem vore a la part esquerra, sota la pestanya <code>Project</code>:</p> <p></p> <p>Aix\u00f2 ens diu que tenim el projecte HolaMon, que t\u00e9 com a paquet font <code>holamon</code>. </p> <p>A la pestanya Files, podem veure tamb\u00e9 l'estructura de directoris reals que ha creat, i que es correspon a un projecte Java de tipus Ant:</p> <p></p> <p>Com veiem, dins la carpeta HolaMon, entre d'altres, tenim la carpeta <code>src</code> amb el codi font del programa, seguint l'estructura indicada de paquets, en aquest cas, el paquet <code>holamon</code>, que t\u00e9 la carpeta <code>holamon</code>.</p> <p>Si examinem el codi que hi ha a dins, veurem el seg\u00fcent codi autogenerat, amb una plantilla est\u00e0ndard. Observeu el nom del paquet amb <code>package holamon</code>:</p> <pre><code>/*\n * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license\n * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Main.java to edit this template\n */\npackage holamon;\n\n/**\n *\n * @author joamuran\n */\npublic class HolaMon {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        // TODO code application logic here\n    }\n\n}\n</code></pre> <p>Sobre l'estructura de carpetes i els paquets</p> <p>Els <code>packages</code> o paqauets en Java s\u00f3n una manera d\u2019organitzar les classes i altres tipus de dades en grups l\u00f2gics, i ajuda a mantenir el codi net i estructurat, facilitant la gesti\u00f3 i reutilitzaci\u00f3 del codi. Els packages tamb\u00e9 permeten evitar conflictes de noms entre classes, ja que dues classes amb el mateix nom poden coexistir en packages diferents.</p> <p>El nom dels packages est\u00e0 estretament relacionat amb l'estructura de carpetes on es troben. Un nom de paquet pot contindre punts (<code>.</code>) per separar subpaquets. Per exemple, un paquet: <code>com.ieseljust.edd.holamon</code>, seria un paquet <code>holamon</code> dins el paquet <code>edd</code>, que est\u00e0 dins de <code>ieseljust</code>, que est\u00e0 dins de <code>com</code>. \u00c9s habitual fer \u00fas del nom completament qualificat de l'organitzaci\u00f3 com a prefix del nom dels paquets. </p> <p>Aquesta organitzaci\u00f3 en subpaquets es traduir\u00e0 posteriorment en una organitzaci\u00f3 completa de carpetes dins la carpeta src, de manera que cada paquet dins altre \u00e9s una carpeta dins d'altre. \u00c9s a dir, el paquet <code>com.ieseljust.edd.holamon</code>, generar\u00e0 l'estructura de carpetes:</p> <pre><code>src/\n\u2514\u2500\u2500 com\n    \u2514\u2500\u2500 ieseljust\n        \u2514\u2500\u2500 edd\n            \u2514\u2500\u2500 holamon\n</code></pre>"},{"location":"3.netbeans/#edicio-execucio-i-depuracio","title":"Edici\u00f3, execuci\u00f3 i depuraci\u00f3","text":"<p>B\u00e9, una vegada creat i examinada la classe, anem a editar el codi generat, completant-lo amb:</p> <pre><code>package holamon;\n\npublic class HolaMon {\n\n    public static void main(String[] args) {\n        System.out.println(\"Hola M\u00f3n\");\n\n        for (int i = 0; i &lt; 5; i++) {\n            if (i%2==0)\n                System.out.println(i+\" \u00e9s parell\");\n        }\n    }\n\n}\n</code></pre> <p>Per  tal d'executar el codi, farem clic en el bot\u00f3 Run Project o b\u00e9 amb la tecla F6.</p>"},{"location":"3.netbeans/#depuracio","title":"Depuraci\u00f3","text":"<p>Per afegir un punt de ruptura, fem clic en el marge esquerre de la l\u00ednia on volguem afegir-lo (per exemple, en la l\u00ednia <code>System.out.println(i+\" \u00e9s parell\");</code>).</p> <p>Per iniciar la depuraci\u00f3, farem clic dret sobre el projecte, i seleccionarem <code>Debug</code>, o b\u00e9, directament, seleccionem <code>Debug Project</code> sota el men\u00fa <code>Debug</code>, o des de la barra d'eines.</p> <p>El programa s\u2019executar\u00e0 fins al punt de ruptura, permetent-nos inspeccionar el valor de les variables i executar el codi pas a pas.</p> <p></p> <p>Per tal de realitzar l'execuci\u00f3 pas a pas, fem \u00fas de les icones de la barra d\u2019eines de depuraci\u00f3 per a continuar l\u2019execuci\u00f3 (F5 per continuar, F7 per entrar en una funci\u00f3, F8 per saltar a la seg\u00fcent l\u00ednia).</p>"},{"location":"3.netbeans/#actualitzacions-de-netbeans","title":"Actualitzacions de Netbeans","text":"<p>Per tal d'actualitzar Netbeans, podem seleccionar, des del men\u00fa Help l'opci\u00f3 Check for Updates. En cas que hi hagen actualitzacions disponibles, se'ns proporcionaran les instruccions per descarregar-les i instal\u00b7lar-les.</p> <p>En cas contrari, ens dir\u00e0 que l'IDE ja est\u00e0 actualitzat:</p> <p></p>"},{"location":"4.Eines_Automatitzacio/","title":"Eines d'automatitzaci\u00f3","text":""},{"location":"4.Eines_Automatitzacio/#presentacio","title":"Presentaci\u00f3","text":"<p>Una altra de les tasques d'especial import\u00e0ncia en la fase d'implementaci\u00f3, i a la qual generalment no es presta l'atenci\u00f3 que requeriria \u00e9s l'automatitzaci\u00f3 de tasques de construcci\u00f3 i gesti\u00f3 de depend\u00e8ncies. Estes eines ens ajudaran d'una banda a gestionar projectes amb m\u00faltiples fitxers font, gestionar les depend\u00e8ncies que t\u00e9 el nostre programari respecte a biblioteques de tercers, aix\u00ed com a generar l'empaquetat  de les nostres aplicacions.</p> <p>En el m\u00f3n de Java existixen principalment tres eines d'este tipus: Apache Ant, Apache Maven i Gradle. Veurem les principals caracter\u00edstiques que tenen estes eines i aprendrem a crear i gestionar el cicle de construcci\u00f3 de l'aplicaci\u00f3 en cadascuna d'elles.</p>"},{"location":"4.Eines_Automatitzacio/#eines-dautomatitzacio","title":"Eines d'automatitzaci\u00f3","text":"<p>Com hem comentat, les eines d'automatitzaci\u00f3 comencen a ser d'utilitat quan els nostres programes comencen a cr\u00e9ixer i a dependre de llibreries de tercers. Per a exemplificar totes les eines, anem a partir d'un senzill programa, a l'estil \u201cHola M\u00f3n\u201d, per\u00f2 amb tots els ingredients necessaris.</p>"},{"location":"4.Eines_Automatitzacio/#exemple-de-partida-un-hola-mon-amb-dos-fitxers","title":"Exemple de partida: un Hola M\u00f3n amb dos fitxers","text":"<p>Disposem de dos fitxers <code>Main.java</code> i <code>Saluda.java</code>, organitzats en la seg\u00fcent estructura de directoris en la carpeta <code>saludaBase</code>: . <pre><code>\u2514\u2500\u2500 src\n \u00a0\u00a0\u00a0\u2514\u2500\u2500 com\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2514\u2500\u2500 ieseljust\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2514\u2500\u2500 edd\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u251c\u2500\u2500 Hola.java\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2514\u2500\u2500 Saluda.java\n</code></pre></p> <p>I amb el seg\u00fcent contingut:</p> <ul> <li>Fitxer <code>src/com/ieseljust/edd/Saluda.java</code></li> </ul> <pre><code>package com.ieseljust.edd;\n\npublic class Saluda {\n    public static void saluda(String nombre) {\n        System.out.println(\"Hola \"+nombre);\n    }\n}\n</code></pre> <ul> <li>Fitxer <code>src/com/ieseljust/Hola.java</code></li> </ul> <pre><code>package com.ieseljust.edd;\n\npublic class Hola {\n    public static void main(String[] args) {\n        String nombre=args.length&gt;0?args[0]:\"\";\n        Saluda.saluda(nombre);\n    }\n}\n</code></pre> <p>Expliquem un poc el contingut. En primer lloc, quan treballem amb diversos fitxers font a Java, podem organitzar el codi en carpetes, que donen lloc al que es coneix com a paquets (<code>package</code> en angl\u00e9s). Els noms de paquets s'escriuen en min\u00fascula, i generalment, les empreses utilitzen el seu domini d'Internet a la inversa, com a part d'aquest. Per exemple, si el nostre domini fora <code>ieseljust.com</code>, el paquet de la nostra aplicaci\u00f3 podria ser <code>com.ieseljust.edd</code>. Aix\u00f2 t\u00e9 dos implicacions en els fitxers font:</p> <ul> <li>D'una banda, cal indicar que pertanyen a aquest paquet, mitjan\u00e7ant la directiva al principi del fitxer: <code>package com.ieseljust.edd</code>.</li> <li>D'altra banda, ha d'existir esta correlaci\u00f3 entre el nom del paquet i l'estructura de carpetes al que es correspon: <code>com/ieseljust/edd</code> amb <code>com.ieseljust.edd</code>. Observeu que hem situat el directori <code>com</code>, dins d'un altre directori <code>src</code>. Este directori <code>src</code> (abreviatura de source) ser\u00e0 el directori arrel per al nostre codi font.</li> </ul> <p>D'altra banda, observem que el programa es compon de dos fitxers: el principal (<code>Hola.java</code>) que \u00e9s qui cont\u00e9 el m\u00e8tode <code>main</code>, i d'altra banda, el fitxer <code>Saluda.java</code>, que oferix la funcionalitat saluda. A m\u00e9s, el m\u00e8tode principal Main recull un argument opcional de la l\u00ednia d'ordes per a personalitzar el missatge que mostrar\u00e0 per pantalla.</p> <p>Per a compilar el codi anterior, podriem situar-nos en la carpeta arrel del codi <code>saludaBase/src</code> i fer:</p> <pre><code>$ javac com/ieseljust/edd/Saluda.java\n$ javac com/ieseljust/edd/Hola.java\n</code></pre> <p>Amb aix\u00f2 generem en la carpeta <code>com/ieseljust/edd</code> els dos fitxers en btyecode Saluda.class i Hola.class.</p> <p>Realment, nom\u00e9s amb la segona orde, \u00e9s a dir, compilant el fitxer <code>Hola.java</code> hauria sigut suficient, ja que el compilador detecta que s'utilitza una funcionalitat que est\u00e0 implementada en un altre fitxer font del mateix paquet i compilar\u00e0 tamb\u00e9 aquest.</p> <p>Finalment, per a executar el codi anterior, utilitzarem:</p> <pre><code>$ java com.ieseljust.edd.Hola Jose\n</code></pre> <p>Fixeu-vos que ara per a executar el nostre programa hem utilitzat el nom de la classe Hola precedida del nom del paquet. A m\u00e9s, podem passar-li qualsevol argument al nostre programa perqu\u00e8 emeta una salutaci\u00f3 personalitzada.</p>"},{"location":"4.Eines_Automatitzacio/#classpath-i-desti-de-la-compilacio","title":"Classpath i dest\u00ed de la compilaci\u00f3","text":"<p>Generalment, no \u00e9s bona idea mantenir el codi font i les classes generades al mateix directori. Per aix\u00f2, sol generar-se un directori espec\u00edfica per a aquestes classes generades.</p> <p>Anem a crear un directori que anomenarem <code>build</code>, i utilitzarem aquest com a dest\u00ed de la compilaci\u00f3. Des de l'arrel del projecte, farem:</p> <pre><code>mkdir build\n</code></pre> <p>de manera que tindrem:</p> <pre><code>.\n\u251c\u2500\u2500 build\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 com\n        \u2514\u2500\u2500 ieseljust\n            \u2514\u2500\u2500 edd\n</code></pre> <p>Per a la compilaci\u00f3, anem a introduir dos arguments a <code>javac</code>:</p> <ul> <li><code>-d</code>, que ens permet especificar el dest\u00ed dels fitxers en bytecode; al nostre cas utilitzarem <code>-d build</code>, i</li> <li><code>-classpath</code>, per especificar el ClassPath, o el directori on estaran les classes que necessitem, que en aquest cas, tamb\u00e9 ser\u00e0 el directori build.</li> </ul> <p>Aix\u00ed, per compilar el nostre exemple, farem, des de l'arrel del projecte el seg\u00fcent:</p> <ul> <li>Compilem el fitxer <code>Saluda.java</code> indicant que guarde les classes en bytecode en la carpeta <code>build</code>:</li> </ul> <pre><code>$ javac -d build/ src/com/ieseljust/edd/Saluda.java \n</code></pre> <ul> <li>Compilem el fitxer <code>Hola.java</code> indicant que guarde les classes en bytecode en la carpeta <code>build</code> i indicant, a m\u00e9s que aquesta \u00e9s la que cont\u00e9 les classes que necessitarem per al nostre programa:</li> </ul> <pre><code>$ javac -d build -classpath build src/com/ieseljust/edd/Hola.java \n</code></pre> <p>Compte!</p> <p>Si no especifiquem el Classpath, ens donar\u00e0 el seg\u00fcent error:</p> <p><pre><code>$ javac -d build src/com/ieseljust/edd/Hola.java \n src/com/ieseljust/edd/Hola.java:6: error: cannot find symbol\n         Saluda.saluda(nombre);\n         ^\n symbol:   variable Saluda\n location: class Hola\n 1 error\n</code></pre>  Que inndica que no troba qu\u00e8 \u00e9s <code>Saluda</code>, ja que la busca al mateix directori. Per indicar-li on estar\u00e0 la classe, cal indicar necess\u00e0riament el classpath.</p> <p>Amb tot, aix\u00f2 ens generar\u00e0 la seg\u00fcent estructura:</p> <pre><code>.\n\u251c\u2500\u2500 build\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 com\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 ieseljust\n\u2502\u00a0\u00a0         \u2514\u2500\u2500 edd\n\u2502\u00a0\u00a0             \u251c\u2500\u2500 Hola.class\n\u2502\u00a0\u00a0             \u2514\u2500\u2500 Saluda.class\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 com\n        \u2514\u2500\u2500 ieseljust\n            \u2514\u2500\u2500 edd\n                \u251c\u2500\u2500 Hola.java\n                \u2514\u2500\u2500 Saluda.java\n</code></pre> <p>Ara, per tal d'executar el nostre codi, caldr\u00e0 indicar tamb\u00e9 on es troba el classpath, de manera que farem:</p> <pre><code>$ java -cp build com.ieseljust.edd.Hola 1DAM!\n</code></pre> <p>Si no especifiquem el classpath, ens donar\u00e0 l'error:</p> <pre><code>Error: Could not find or load main class com.ieseljust.edd.Hola\nCaused by: java.lang.ClassNotFoundException: com.ieseljust.edd.Hola\n</code></pre> <p>I de fet, no ens deixar\u00e0 ni autocompletar el nom del paquet.</p> <p>De moment, hem utilitzat dos fitxers, i la compilaci\u00f3 podria fer-se de forma manual sense problemes, per\u00f2 quan el nostre codi font comen\u00e7a a cr\u00e9ixer, i definim subpaquets i llibreries de tercers, el manteniment manual pot resultar m\u00e9s complex. Per a aix\u00f2, i partint d'aquest exemple base, anem a veure com podriem automatitzar tot el proc\u00e9s.</p> <p>Activitat</p> <p>Crea una classe anomenada <code>Calculadora</code> en un paquet format pel teu nom (per exemple <code>com.jose.edd</code>) amb els seg\u00fcents m\u00e8todes (funcions):</p> <ul> <li><code>public static int suma(int a, int b)</code>: Que suma a i b i retorna el resultat,</li> <li><code>public static int resta(int a, int b)</code>: Que resta a i b i retorna el resultat,</li> <li><code>public static int multiplica(int a, int b)</code>: Que multiplica a i b i retorna el resultat,</li> <li><code>public static int divideix(int a, int b)</code>: Que divideix a entre b i retorna el resultat. Si b \u00e9s 0, mostra l'error i torna un 0.</li> </ul> <p>I una altra classe que a la funci\u00f3 principal fa\u00e7a \u00fas d'aquestes funcions, i mostre els resultats per pantalla.</p> <p>Crea el directori build, i fes \u00fas d'aquest com a classpath.</p> <p>Indica a un fitxer Markdown el proc\u00e9s que has seguit, incloent el codi font, les ordres per compilar i per executar, i l'estructura de carpetes resultant. Fes una breu explicaci\u00f3 de cada cosa.</p>"},{"location":"4.Eines_Automatitzacio/#apache-ant","title":"Apache ant","text":"<p>Apache Ant \u00e9s una llibreria de Java que ens permet automatitzar el proc\u00e9s de construcci\u00f3 d'aplicacions. Encara que s'utilitza principalment a Java, tamb\u00e9 suporta altres llenguatges. Inicialment, va formar part del projecte Apache Tomcat, per\u00f2 l'any 2000 es va llan\u00e7ar com a projecte independent.</p>"},{"location":"4.Eines_Automatitzacio/#installacio-en-linux","title":"Instal\u00b7laci\u00f3 en Linux","text":"<p>Apache Ant est\u00e0 disponible en els repositoris de totes les distribucions GNU/Linux. Per a la seua instal\u00b7laci\u00f3 en Ubuntu o derivades, utilitzarem l'eina de l\u00ednia d'ordres Advanced Package Tool, m\u00e9s coneguda com apt. En primer lloc, refresquem la llista de paquets amb:</p> <pre><code>$ sudo apt update\n</code></pre> <p>I despr\u00e9s instal\u00b7lem ant amb:</p> <pre><code>$ sudo apt install ant\n</code></pre> <p>Documentaci\u00f3</p> <p>Teniu disponible a la documentaci\u00f3 oficial d'Ant el proc\u00e9s detallat d'instal\u00b7laci\u00f3 en els diferents sistemes.</p> <p>Cal tindre en compte que la majoria d'IDEs per a Java (Eclipse, Netbeans, IntelliJ), ja porten ant incorporat, pel que probablement podrieu utilitzar aquesdt.</p> <p>Instal\u00b7laci\u00f3 al Home d'usuari</p> <p>Si no podem o no desitgem instal\u00b7lar <code>ant</code> com a administradors, podem fer-ho a la nostra carpeta d'usuaris, i incloure la ruta als executables des del PATH.</p> <p>Per a aix\u00f2 seguim els seg\u00fcents pasos:</p> <ol> <li> <p>Descarreguem Apache Ant des de la web. Anem a descarregar, per exemple el fitxer apache-ant-1.10.15-bin.tar.gz, i el deixarem a la nostra carpeta <code>~/devtools</code>.</p> </li> <li> <p>Fet aix\u00f2, ans situem en aquesta carpeta i descomprimim el fitxer:</p> </li> </ol> <pre><code>~$ cd ~/devtools/\n~/devtools$ tar -xvzf apache-ant-1.10.15-bin.tar.gz \n</code></pre> <ol> <li>Afegim al fitxer .bashrc el seg\u00fcent fragment:</li> </ol> <pre><code># Ant\n\nif [ -d \"$HOME/devtools/apache-ant-1.10.15/bin\" ]; then\n        PATH=$HOME/devtools/apache-ant-1.10.15/bin:$PATH\nfi\n</code></pre> <p>Fet aix\u00f2, ja podem obrir una nova terminal i comprovar la versi\u00f3:</p> <pre><code>~$ ant -v\nApache Ant(TM) version 1.10.15 compiled on August 25 2024\nTrying the default build file: build.xml\nBuildfile: build.xml does not exist!\nBuild failed\n</code></pre>"},{"location":"4.Eines_Automatitzacio/#el-fitxer-buildxml","title":"El fitxer build.xml","text":"<p>Tot projecte en Ant es basa en un fitxer de construcci\u00f3, anomenat generalment build.xml, situat en l'arrel del projecte, i que cont\u00e9 els diferents objectius o targets, que no s\u00f3n m\u00e9s que les diferents fases de construcci\u00f3 del projecte.</p> <p>Veiem estos targets mitjan\u00e7ant el seg\u00fcent exemple de fitxer per a un nou projecte que anomenarem saludaAnt:</p> <pre><code>&lt;project name=\"saludaAnt\"&gt;\n    &lt;target name=\"clean\"&gt;\n        &lt;delete dir=\"build\" /&gt;\n    &lt;/target&gt;\n\n    &lt;target name=\"compile\" depends=\"clean\"&gt;\n        &lt;mkdir dir=\"build\" /&gt;\n        &lt;javac includeantruntime=\"false\" \n        srcdir=\"src/com/ieseljust/edd\" destdir=\"build\" /&gt;\n    &lt;/target&gt;\n\n    &lt;target name=\"run\" depends=\"compile\"&gt;\n        &lt;property name=\"arg0\" value=\"\"/&gt;\n        &lt;java classpath=\"build\" classname=\"com.ieseljust.edd.Hola\"&gt;\n            &lt;arg value=\"${arg0}\"/&gt;\n        &lt;/java&gt;\n    &lt;/target&gt;\n&lt;/project&gt;\n</code></pre> <p>Com podem veure, este fitxer XML cont\u00e9 un element arrel <code>&lt;project&gt;</code> amb l'atribut <code>name=\u201dsaludaAnt\u201d</code>, i que cont\u00e9 tres elements <code>target</code> amb diferent valor per a <code>name</code>. Com hem comentat, estos <code>targets</code> es correspondran a diferents fases del projecte de construcci\u00f3:</p> <ul> <li><code>clean</code>: S'encarrega de netejar el projecte. Com podem veure, cont\u00e9 un element <code>delete</code> amb un atribut <code>dir</code>, amb valor <code>build</code>. Amb aix\u00f2, el que indiquem \u00e9s que en la fase de neteja del projecte, el que es far\u00e0 ser\u00e0 esborrar la carpeta anomenada build.</li> <li><code>compile</code>: S'encarrega de la compilaci\u00f3 del nostre projecte. En primer lloc, observeu que t\u00e9 l'atribut <code>depends=\u201dclean\u201d</code>, que indica que la fase de compilaci\u00f3, dep\u00e9n de la fase de neteja Aix\u00f2 \u00e9s, per a compilar el nostre projecte, necessitem netejar-lo abans. Aquest target inclou dos etiquetes: <code>mkdir</code> i <code>javac</code>. Amb la primera, el que fa \u00e9s crear una nova carpeta anomenada <code>build</code>, en la qual situarem els arxius compilats, i amb l'etiqueta <code>javac</code>, el que fa \u00e9s configurar la compilaci\u00f3: Amb l'atribut <code>includeantruntime=\"false\"</code> indiquem que no incloga les biblioteques d'<code>ant</code> en la carpeta build i evitar un missatge d'alerta posterior. Amb <code>srcdir</code>, indiquem quina \u00e9s la carpeta on es troba el codi font (Sourcedir), al nostre cas, <code>src/com/ieseljust/edd</code>. Tamb\u00e9 indiquem quina ser\u00e0 la carpeta de dest\u00ed de les classe scompilades. En aquest cas, la carpeta <code>build</code>. Si observeu, estem generant amb aix\u00f2 el mateix esquema que f\u00e8iem de forma manual.</li> <li><code>run</code>: S'encarrega de l'execuci\u00f3 de l'aplicaci\u00f3. Com veiem, dep\u00e9n de la fase de compilaci\u00f3, ja que, per a executar nostre bytecode haurem de compilar-ho pr\u00e8viament. Aquuest target cont\u00e9 l'etiqueta <code>&lt;java&gt;</code> que invoca a la m\u00e0quina virtual de Java per a llan\u00e7ar la classe <code>com.ieseljust.edd.Hola</code>, on se situa el nostre m\u00e8tode Main. A m\u00e9s, establix l'atribut <code>classpath</code> al valor <code>build</code>, per a indicar que la resta de recursos del programa estaran en esta carpeta build que hem creat. Dins d'esta etiqueta, tamb\u00e9 hem afegit una altra etiqueta <code>&lt;arg&gt;</code>, amb valor \"<code>${arg0}\"</code>, amb el que indiquem que es passar\u00e0 al programa principal el primer argument que es proporcione en la invocaci\u00f3 d'<code>ant</code>. A m\u00e9s, s'ha afegit un valor per defecte per a este argument que ser\u00e0 la cadena buida, mitjan\u00e7ant l'etiqueta <code>&lt;property name=\"*arg0\" value=\"\"/&gt;</code>.</li> </ul>"},{"location":"4.Eines_Automatitzacio/#us-dant-i-el-fitxer-buildxml","title":"\u00das d'<code>ant</code> i el fitxer <code>build.xml</code>","text":"<p>Una vegada generat el fitxer <code>build.xml</code> en el nostre projecte, podem invocar a <code>ant</code> proporcionant-li els diferents <code>targets</code>:</p> <ul> <li>Si desitgem compilar el projecte, des d'una terminal, farem:</li> </ul> <pre><code>$ ant compile\nBuildfile: /home/joamuran/tmp/SaludaAnt/build.xml\n\nclean:\n\ncompile:\n    [mkdir] Created dir: /home/joamuran/tmp/SaludaAnt/build\n    [javac] Compiling 2 source files to /home/joamuran/tmp/SaludaAnt/build\n\nBUILD SUCCESSFUL\nTotal time: 0 seconds\n</code></pre> <p>Com veiem en els missatges que ens retorna <code>ant</code>, en primer lloc es llan\u00e7a la tasca <code>clean</code>. Si \u00e9s la primera vegada que ho executem, esta tasca no fa res, ja que no tenim res a netejar. Si ja existira la carpeta <code>build</code> d'altres compilacions, en este pas esborraria.</p> <p>Una vegada feta la neteja, es fa la tasca de compilaci\u00f3, amb el que es crear\u00e0 la carpeta <code>build</code>, i despr\u00e9s s'invoca al compilador de java per a generar els fitxers en bytecode</p> <p>Despr\u00e9s de la compilaci\u00f3, l'estructura del nostre projecte queda com seguix:</p> <pre><code>.\n\u251c\u2500\u2500 build\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 com\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 ieseljust\n\u2502\u00a0\u00a0         \u2514\u2500\u2500 edd\n\u2502\u00a0\u00a0             \u251c\u2500\u2500 Hola.class\n\u2502\u00a0\u00a0             \u2514\u2500\u2500 Saluda.class\n\u251c\u2500\u2500 build.xml\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 com\n        \u2514\u2500\u2500 ieseljust\n            \u2514\u2500\u2500 edd\n                \u251c\u2500\u2500 Hola.java\n                \u2514\u2500\u2500 Saluda.java\n</code></pre> <p>Com podem veure, s'ha generat la carpeta build indicada en el target compile del fitxer build.xml. Dins d'esta carpeta, s'ha replicat tota l'estructura de carpetes corresponent al paquet, per\u00f2 que cont\u00e9 els fitxers .*class.</p> <p>Si ara volem executar el projecte, farem:</p> <pre><code>$ ant run -Darg0=Jose\nBuildfile: /home/joamuran/tmp/SaludaAnt/build.xml\n\nclean:\n   [delete] Deleting directory /home/joamuran/tmp/SaludaAnt/build\n\ncompile:\n    [mkdir] Created dir: /home/joamuran/tmp/SaludaAnt/build\n    [javac] Compiling 2 source files to /home/joamuran/tmp/SaludaAnt/build\n\nrun:\n     [java] Hola Jose\n\nBUILD SUCCESSFUL\nTotal time: 0 seconds\n</code></pre> <p>Observeu que a l'ordre <code>ant run</code> hem d'oferir-li els arguments mitjan\u00e7ant <code>Darg0=Jose</code>. \u00c9s a dir, afegim l'opci\u00f3 <code>-D</code>, seguida del nom d'argument usat en el <code>build.xml</code></p> <p>A m\u00e9s, en este cas, com no hem llan\u00e7at <code>ant clean</code> pr\u00e8viament, la tasca <code>clean</code> si que ha esborrat la carpeta de classes, posteriorment realitza la compilaci\u00f3 i finalment l'execuci\u00f3. Si desitj\u00e0rem netejar tot el projecte, s\u00ed que realitzar\u00edem ara el  <code>ant clean</code>.</p>"},{"location":"4.Eines_Automatitzacio/#ant-i-vscode","title":"Ant i VSCode","text":"<p>Com hem vist, <code>ant</code> pot usar-se de forma pr\u00e0ctica des de la l\u00ednia d'ordres. De totes maneres, podem fer \u00fas d'<code>ant</code> de manera integrada amb l'entorn de desenvolupament.</p> <p>La forma m\u00e9s senzilla d'utilitzar ant amb Visual Studio Code \u00e9s mitjan\u00e7ant la terminal integrada. No obstant aix\u00f2, disposem de l'extensi\u00f3 Ant Target Runner, que ens afig una nova vista en la barra lateral on se'ns mostren els diferents targets, i de forma niuada, les depend\u00e8ncies entre estos. A m\u00e9s, en esta vista, si polsem el bot\u00f3 dret del ratol\u00ed sobre un target d'esta vista, ens dona la possibilitat d'executar el target (Run Ant Target) o b\u00e9 d'anar a la seua definici\u00f3 (Reveal Definition).</p>"},{"location":"5.Maven/","title":"Maven","text":""},{"location":"5.Maven/#maven-i-gradle","title":"Maven i Gradle","text":"<p>Maven va sorgir en el si d'Apache, amb la finalitat de simplificar els processos de construcci\u00f3 en el Projecte Jakarta Turbine. Este projecte estava compost de diversos subprojectes, cadascun amb una estructura particular, i els seus respectius arxius de compilaci\u00f3 d'Ant, diferents entre ells. En este context, es va decidir desenvolupar una forma est\u00e0ndard de construcci\u00f3 de projectes que oferira a m\u00e9s una forma senzilla de publicar les aplicacions. El resultat va ser Maven, que es va integrar inicialment a Jakarta, i posteriorment es va alliberar com a projecte de nivell superior de l'Apache Software Foundation.</p> <p>Mitjan\u00e7ant Maven, podem doncs generar aplicacions que seguixen una estructura i un proc\u00e9s de construcci\u00f3 ben definits i coneguts, seguint a m\u00e9s bones pr\u00e0ctiques. No obstant aix\u00f2, a vegades este mecanisme \u00e9s massa r\u00edgid, i resulta bastant complicat abordar el desenvolupament d'aplicacions que no seguisquen un model est\u00e1ndard. \u00c9s ac\u00ed on apareix Gradle, aprofitant les bondats d'Ant i Maven i evitant els seus defectes.</p> <p>En els seg\u00fcents apartats veurem una xicoteta introducci\u00f3 als conceptes m\u00e9s rellevants de cadascuna d'estes eines, i es plantejaran un parell d'exemples pr\u00e0ctics on es posaran en pr\u00e0ctica.</p>"},{"location":"5.Maven/#apache-maven","title":"Apache Maven","text":"<p>Apache Maven \u00e9s una eina que ens permet crear i gestionar projectes Java, de manera similar a com f\u00e9iem amb Ant, per\u00f2 des d'un punt de partida diferent. La idea subjacent d'Apache Maven \u00e9s oferir suport al cicle de vida de construcci\u00f3 segons est\u00e0ndards, de manera que les nostres aplicacions siguen m\u00e9s homog\u00e8nies i tinguen en compte bones pr\u00e0ctiques. Seguix el principi de convenci\u00f3 sobre configuraci\u00f3 (CoC), segons el qual, s'establixen unes certes convencions que simplifiquen la presa de decisions per part del programador.</p> <p>D'esta manera, es promou la construcci\u00f3 de solucions de programari homog\u00e8nies, i que redu\u00efxen la variabilitat.</p> <p>Entre les diferents ajudes que oferix Maven trobem la construcci\u00f3 d'aplicacions, el manteniment de la documentaci\u00f3, la gesti\u00f3 de depend\u00e8ncies, de versions i la distribuci\u00f3 de l'aplicaci\u00f3.</p> <p>Un dels conceptes que treballa Maven, i amb el qual ens trobarem llegint la seua documentaci\u00f3 \u00e9s el de artifact, la traducci\u00f3 literal del qual seria artefacte. Este concepte fa refer\u00e8ncia al que anomenarem una soluci\u00f3, o un producte programari reutilitzable, que \u00e9s gestionat per Maven. Aix\u00f2 implicar\u00e0 que tinga una estructura concreta i seguisca unes certes convencions.</p>"},{"location":"5.Maven/#arquetips","title":"Arquetips","text":"<p>Com hem comentat, el principal objectiu de Maven \u00e9s homogene\u00eftzar l'estructura de pr\u00e0cticament qualsevol tipus d'aplicaci\u00f3. Per a aix\u00f2 introdu\u00efx el concepte d'arquetip.</p> <p>Note</p> <p>Un arquetipus (archetype) en Maven \u00e9s un model original, a partir del qual creem l'esquelet de solucions que segueixen el mateix patr\u00f3 o s\u00f3n del mateix tipus.</p> <p>Els arquetips ens ofereixen una forma consistent d'aplicar bones pr\u00e0ctiques. Mitjan\u00e7ant ells, podem tindre un projecte en funcionament de manera r\u00e0pida i amb una estructura ben definida i coneguda, amb el que a m\u00e9s es facilitar\u00e0 el manteniment posterior i el treball en equip.</p> <p>Entre els arquetips m\u00e9s rellevants podr\u00edem trobar <code>maven-archetype-quickstart</code>, per a generar un projecte de tipus Hola M\u00f3n,  <code>maven-archetype-simple</code>, per a generar un projecte simple, o b\u00e9 <code>maven-archetype-webapp</code>, per a una aplicaci\u00f3 web.</p>"},{"location":"5.Maven/#el-cicle-de-vida-de-construccio","title":"El cicle de vida de construcci\u00f3","text":"<p>Maven introdu\u00efx el concepte de cicle de vida de construcci\u00f3 (que no hem de confondre amb el cicle de vida de desenvolupament). El cicle de vida de construcci\u00f3 es podria definir com:</p> <p>Note</p> <p>Un proc\u00e9s ben definit per a la construcci\u00f3 i distribuci\u00f3 de solucions (artifats).</p> <p>Maven distingix tres cicles de vida en el proc\u00e9s de construcci\u00f3:</p> <ul> <li>Default: El cicle de vida per defecte que gestiona la construcci\u00f3 en si de la soluci\u00f3,</li> <li>Clean: El cicle de vida que s'encarrega de la neteja del projecte,</li> <li>Site: El cicle de vida per a la generaci\u00f3 de documentaci\u00f3.</li> </ul> <p>Cadascun d'estos cicle de vida es compon de diferents etapes, i en cadascuna d'elles es realitzen diferents accions. El cicle de vida m\u00e9s important \u00e9s el Default, que es compon de 22 fases, encara que les m\u00e9s importants s\u00f3n:</p> Fase Tasques validate Comprova que l'estructura del projecte \u00e9s correcta i tota la informaci\u00f3 necess\u00e0ria es troba en el seu lloc. compile Compila els fonts, generant el bytecode corresponent. test Realitza proves unit\u00e0ries sobre els fonts generats amb JUnit. Parlarem d'estes proves en la seg\u00fcent unitat. package Empaqueta tots els <code>.class</code> obtinguts en un format distribuible , mitjan\u00e7ant un arxiu JAR. verify Realitza les comprovacions corresponents a les proves d'integraci\u00f3, per a garantir criteris de qualitat. install Instal\u00b7la el paquet en un directori local que fa de repositori, de manera que puga usar-se en altres projectes de manera local. deploy Desplega el paquet generat en un repositori remot, de manera que puga usar-se amb altres desenvolupadors i projectes. <p>Estes fases podran llan\u00e7ar-se de manera individual, per\u00f2 tenint en consideraci\u00f3 que per a llan\u00e7ar una fase s'ha de passar per les anteriors. \u00c9s a dir, si volem compilar el projecte (sense empaquetar ni desplegar), deurem primer passar per la fase de validaci\u00f3 i despr\u00e9s per la fase de compilaci\u00f3.</p> <p>Quan desenvolupem aplicacions d'escriptori que no requerisquen la seua instal\u00b7laci\u00f3 en un servidor, ser\u00e0 suficient amb llan\u00e7ar la fase verify, per a realitzar la compilaci\u00f3, empaquetat i verificar la integraci\u00f3.</p>"},{"location":"5.Maven/#complements-plugins-i-objectius-goals","title":"Complements (plugins) i objectius (goals)","text":"<p>Com hem comentat, cadascuna de les fases del cicle de vida fa diverses tasques, m\u00e9s conegudes com a objectius  o goals.</p> <p>Els objectius (goals) representen doncs una tasca espec\u00edfica, que contribu\u00efx a la construcci\u00f3 o gesti\u00f3 d'una soluci\u00f3, i s'organitzen en complements (plugins).</p> <p>Encara que cada fase del cicle de vida es componga, de diversos objectius, pot ser que existisquen objectius no vinculats a cap fase del cicle de vida o vinculats a m\u00e9s d'una fase. Un objectiu no vinculat a cap fase pot invocar-se directament fora del cicle de vida, de manera que no passe per cap fase pr\u00e8viament.</p> <p>Vegem en la seg\u00fcent taula la relaci\u00f3 d'algunes de les fases del cicle de vida per defecte i alguns objectius que es llancen en ella, al costat del complement en qu\u00e8 estos es troben.</p> Fase Objectiu (Goal) Complement (plugin) compile compiler:compile maven-compiler-plugin test-compile compiler:testCompile maven-compiler-plugin test surefire:test maven-surefire-plugin package jar:jar maven-jar-plugin verify verifier:verify maven-verifier-plugin install install:install maven-install-plugin deploy deploy:deploy maven-deploy-plugin <p>Com podem veure, s'ha incl\u00f2s, a tall d'exemple, la fase test-compile, de la qual no hem parlat abans. Esta fase s'encarrega de compilar el codi font de les proves. Com veiem, l'objectiu testCompile que llan\u00e7a es troba en el complement maven-compiler-plugin, que tamb\u00e9 inclou l'objectiu compile de la fase de compilaci\u00f3. Aix\u00ed doncs, tenim un plugin* que cont\u00e9 objectius que es llancen en dos fases diferents.</p>"},{"location":"5.Maven/#el-pom","title":"El POM","text":"<p>El Model d'Objectes del Projecte (Project Object Model, POM) \u00e9s un fitxer XML que descriu la configuraci\u00f3 del projecte en Maven, i proporciona la major part d'informaci\u00f3 necess\u00e0ria per a la seua construcci\u00f3. Pot arribar a ser un arxiu llarg i complex, per\u00f2 no \u00e9s necessari entendre tot el seu contingut per a traure tota l'efectivitat de Maven.</p> <p>El model cont\u00e9 valors predeterminats per a la majoria de projectes, com poden ser el directori de compilaci\u00f3 (target), el directori dels fonts (src/main/java), el directori dels fonts de les proves (src/test/java), etc.</p> <p>Quan es llan\u00e7a un objectiu, Maven llig este fitxer per a obtindre la informaci\u00f3 necess\u00e0ria i despr\u00e9s executar l'objectiu.</p> <p>A m\u00e9s dels valors per defecte, podem especificar les depend\u00e8ncies del projecte, especificar objectius, perfils de compilaci\u00f3, o informaci\u00f3 com el nom, l'organitzaci\u00f3, la descripci\u00f3 o la versi\u00f3 entre altres.</p> <p>Maven proporciona molts valors per defecte a trav\u00e9s del que es coneix com el Super POM. Estos valors per defecte es combinaran amb els valors definits en el fitxer en l'arrel del projecte pom.xml per a obtindre el que es coneix com el POM efectiu, que \u00e9s el que s'aplicar\u00e0 al projecte en q\u00fcesti\u00f3.</p>"},{"location":"5.Maven/#exemple-practic-amb-maven","title":"Exemple pr\u00e0ctic amb Maven","text":"<p>Anem a vore com fer \u00fas de Maven per gestionar els nostres projecte Java. Per a aix\u00f2 partirem d'una distribuci\u00f3 Linux basada en Ubuntu 24.</p> <p>El primer que haurem de fer \u00e9s instal\u00b7lar l'eina. Si som administradors del sistema, podem actualitzar la llista de paquets de la nostra distribuci\u00f3 (<code>sudo apt update</code>), i instal\u00b7lar el paquet maven (<code>sudo apt install maven</code>).</p> <p>Ara b\u00e9, si no disposem de perm\u00eds d'administrador o volem instal\u00b7lar una versi\u00f3 m\u00e9s actualitzada que la dels repositoris d'Ubuntu, podem fer la instal\u00b7laci\u00f3 al nostre Home d'usuari, descarregant els binaris i incloent les rutes als executables des del PATH.</p> <p>Per a aix\u00f2 seguim els seg\u00fcents pasos:</p> <ol> <li> <p>Descarreguem Apache Maven des de la web. Anem a descarregar, per exemple el fitxer apache-maven-3.9.9-bin.tar.gz, i el deixarem a la nostra carpeta <code>~/devtools</code>.</p> </li> <li> <p>Fet aix\u00f2, ans situem en aquesta carpeta i descomprimim el fitxer:</p> </li> </ol> <pre><code>~$ cd ~/devtools/\n~/devtools$ tar -xvzf apache-maven-3.9.9-src.tar.gz\n</code></pre> <ol> <li>Afegim al fitxer .bashrc el seg\u00fcent fragment:</li> </ol> <pre><code># Maven\n\nif [ -d \"$HOME/devtools/apache-maven-3.9.9/bin\" ]; then\n        PATH=$HOME/devtools/apache-maven-3.9.9/bin:$PATH\nfi\n</code></pre> <p>Fet aix\u00f2, ja podem obrir una nova terminal i comprovar la versi\u00f3:</p> <pre><code>$ mvn -v\nApache Maven 3.9.9 (8e8579a9e76f7d015ee5ec7bfcdc97d260186937)\nMaven home: /home/usuari/devtools/apache-maven-3.9.9\nJava version: 21.0.5, vendor: Ubuntu, runtime: /usr/lib/jvm/java-21-openjdk-amd64\nDefault locale: ca_ES, platform encoding: UTF-8\nOS name: \"linux\", version: \"6.8.0-49-generic\", arch: \"amd64\", family: \"unix\"\n</code></pre> <p>Com podem veure, hem instal\u00b7lat la versi\u00f3 3.9.9.</p> <p>L'ordre <code>mvn -v</code> a m\u00e9s d'informaci\u00f3 sobre la versi\u00f3, ens mostra la ubicaci\u00f3 de les instal\u00b7lacions de Maven i la m\u00e0quina virtual de Java, aix\u00ed com informaci\u00f3 gen\u00e8rica sobre el sistema i la configuraci\u00f3 de l'idioma.</p>"},{"location":"5.Maven/#creacio-del-projecte","title":"Creaci\u00f3 del projecte","text":"<p>Per a crear un projecte en Maven hem d'utilitzar el mecanisme d'arquetips que ens oferix. Per a aix\u00f2, utilitzarem l'orde <code>mvn archetype:generate</code>, la qual admet un mode interactiu i un altre no interactiu. El mode interactiu el tractarem posteriorment. En este apartat veurem el mode no interactiu, en el qual li oferirem a l'ordre de generaci\u00f3 del projecte algunes opcions, i deixarem unes altres amb les seues opcions per defecte.</p>"},{"location":"5.Maven/#pas-1-creacio-del-projecte-a-partir-de-larquetip","title":"Pas 1. Creaci\u00f3 del projecte a partir de l'arquetip","text":"<p>Per a crear el projecte amb Maven, a partir d'un arquetip, ens situem en la carpeta on desitgem crear la carpeta amb el projecte, i llancem la seg\u00fcent orde:</p> <pre><code>mvn archetype:generate -DgroupId=com.ieseljust.edd -DartifactId=saludaMaven -DarchetypeArtifactId=maven-archetype-quickstart -DarchetypeVersion=1.5 -DinteractiveMode=false \n</code></pre> <p>Vegem les diferents opcions:</p> <ul> <li><code>Archetype:generate</code>: Indiquem a Maven que volem executar l'objectiu (goal) <code>generate</code> del plugin <code>archetype</code>. Recordem que en Maven, els goals s\u00f3n equiparables als tasks de'Ant: Este objectiu en concret, ens genera un projecte simple basat en un arquetip. Podem dir que un plugin \u00e9s una col\u00b7lecci\u00f3 d'objectius amb un prop\u00f2sit com\u00fa.</li> <li><code>DgroupId</code>: Indiquem l'identificador \u00fanic de l'organitzaci\u00f3 que crea el projecte, basat normalment en el domini completament qualificat de l'organitzaci\u00f3 (fully qualified domain), en este cas <code>com.ieseljust.edd</code>.</li> <li><code>DartifactID</code>: Indica el nom del recurs (artifact) que generarem. Tamb\u00e9 ha de ser un nom \u00fanic per al projecte. En este cas, saludaMaven.</li> <li><code>DarchetypeArtifactId</code>: Indica el nom del recurs d'arquetip a partir del qual triar la plantilla per al nostre projecte. En este cas, indiquem el recurs maven-archetipe-quickstart, que generar\u00e0 una aplicaci\u00f3 senzilla i r\u00e0pida, del tipus Hola M\u00f3n.</li> <li><code>DinteractiveMode</code>: Indica si volem utilitzar o no el mode interactiu. En este cas, hem indicat false, per a agilitzar la tasca, i que certs par\u00e0metres prenguen els seus valors per defecte.</li> </ul> <p>Amb tot aix\u00f2, l'eixida de l'orde anterior (i despr\u00e9s de descarregar algun programari addicional ...) \u00e9s la seg\u00fcent:</p> <pre><code>$ ...\n[INFO] ----------------------------------------------------------------------------\n[INFO] ----------------------------------------------------------------------------\n[INFO] Using following parameters for creating project from Archetype: maven-archetype-quickstart:1.5\n[INFO] ----------------------------------------------------------------------------\n[INFO] Parameter: groupId, Value: com.ieseljust.edd\n[INFO] Parameter: artifactId, Value: saludaMaven\n[INFO] Parameter: version, Value: 1.0-SNAPSHOT\n[INFO] Parameter: package, Value: com.ieseljust.edd\n[INFO] Parameter: packageInPathFormat, Value: com/ieseljust/edd\n[INFO] Parameter: junitVersion, Value: 5.11.0\n[INFO] Parameter: package, Value: com.ieseljust.edd\n[INFO] Parameter: groupId, Value: com.ieseljust.edd\n[INFO] Parameter: artifactId, Value: saludaMaven\n[INFO] Parameter: javaCompilerVersion, Value: 17\n[INFO] Parameter: version, Value: 1.0-SNAPSHOT\n[WARNING] Don't override file /tmp/proves_Maven/saludaMaven/src/main/java/com/ieseljust/edd\n[WARNING] Don't override file /tmp/proves_Maven/saludaMaven/src/test/java/com/ieseljust/edd\n[WARNING] CP Don't override file /tmp/proves_Maven/saludaMaven/.mvn\n[INFO] Project created from Archetype in dir: /tmp/proves_Maven/saludaMaven\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  3.546 s\n[INFO] Finished at: 2024-11-25T11:45:06+01:00\n[INFO] ------------------------------------------------------------------------\n</code></pre> <p>Com podrem veure, ens mostra algunes alertes i missatges informatius, amb els valors que ha establit per a alguns par\u00e0metres. A m\u00e9s, es realitzen algunes desc\u00e0rregues des de <code>repo.maven.apache.org</code>. Aquesta adre\u00e7a \u00e9s el repositori de Maven, i cont\u00e9 totes les plantilles i eines que podem utilitzar amb ella.</p> <p>Vegem qu\u00e8 ens ha generat esta orde:</p> <p></p> <p>Com veiem, s'ha creat la carpeta del projecte saludaMaven amb el fitxer <code>pom.xml</code>, que descriu el projecte segons el Project Ojbect Model (POM). Dins d'esta carpeta tenim la carpeta <code>src</code>, amb els arxius font i de proves, degudament organitzats en carpetes segons el nom de domini completament qualificat.</p>"},{"location":"5.Maven/#analitzant-el-pom","title":"Analitzant el POM","text":"<p>Com ja s'ha comentat anteriorment, el fitxer pom.xml descriu la configuraci\u00f3 del projecte en Maven, i proporciona la major part d'informaci\u00f3 necess\u00e0ria per a la seua construcci\u00f3. Pot arribar a ser un arxiu llarg i complex, per\u00f2 no \u00e9s necessari entendre tot el seu contingut per a traure tota l'efectivitat de Maven.</p> <p>Vegem el contingut del nostre arxiu <code>pom.xml</code>:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n\n  &lt;groupId&gt;com.ieseljust.edd&lt;/groupId&gt;\n  &lt;artifactId&gt;saludaMaven&lt;/artifactId&gt;\n  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n\n  &lt;name&gt;saludaMaven&lt;/name&gt;\n  &lt;!-- FIXME change it to the project's website --&gt;\n  &lt;url&gt;http://www.example.com&lt;/url&gt;\n\n  &lt;properties&gt;\n    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;\n    &lt;maven.compiler.release&gt;17&lt;/maven.compiler.release&gt;\n  &lt;/properties&gt;\n\n  &lt;dependencyManagement&gt;\n    &lt;dependencies&gt;\n      &lt;dependency&gt;\n        &lt;groupId&gt;org.junit&lt;/groupId&gt;\n        &lt;artifactId&gt;junit-bom&lt;/artifactId&gt;\n        &lt;version&gt;5.11.0&lt;/version&gt;\n        &lt;type&gt;pom&lt;/type&gt;\n        &lt;scope&gt;import&lt;/scope&gt;\n      &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n  &lt;/dependencyManagement&gt;\n\n  &lt;dependencies&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;\n      &lt;artifactId&gt;junit-jupiter-api&lt;/artifactId&gt;\n      &lt;scope&gt;test&lt;/scope&gt;\n    &lt;/dependency&gt;\n    &lt;!-- Optionally: parameterized tests support --&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;\n      &lt;artifactId&gt;junit-jupiter-params&lt;/artifactId&gt;\n      &lt;scope&gt;test&lt;/scope&gt;\n    &lt;/dependency&gt;\n  &lt;/dependencies&gt;\n\n  &lt;build&gt;\n    &lt;pluginManagement&gt;&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;\n      &lt;plugins&gt;\n        &lt;!-- clean lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#clean_Lifecycle --&gt;\n        &lt;plugin&gt;\n          &lt;artifactId&gt;maven-clean-plugin&lt;/artifactId&gt;\n          &lt;version&gt;3.4.0&lt;/version&gt;\n        &lt;/plugin&gt;\n        &lt;!-- default lifecycle, jar packaging: see https://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging --&gt;\n        &lt;plugin&gt;\n          &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;\n          &lt;version&gt;3.3.1&lt;/version&gt;\n        &lt;/plugin&gt;\n        &lt;plugin&gt;\n          &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;\n          &lt;version&gt;3.13.0&lt;/version&gt;\n        &lt;/plugin&gt;\n        &lt;plugin&gt;\n          &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;\n          &lt;version&gt;3.3.0&lt;/version&gt;\n        &lt;/plugin&gt;\n        &lt;plugin&gt;\n          &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;\n          &lt;version&gt;3.4.2&lt;/version&gt;\n        &lt;/plugin&gt;\n        &lt;plugin&gt;\n          &lt;artifactId&gt;maven-install-plugin&lt;/artifactId&gt;\n          &lt;version&gt;3.1.2&lt;/version&gt;\n        &lt;/plugin&gt;\n        &lt;plugin&gt;\n          &lt;artifactId&gt;maven-deploy-plugin&lt;/artifactId&gt;\n          &lt;version&gt;3.1.2&lt;/version&gt;\n        &lt;/plugin&gt;\n        &lt;!-- site lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#site_Lifecycle --&gt;\n        &lt;plugin&gt;\n          &lt;artifactId&gt;maven-site-plugin&lt;/artifactId&gt;\n          &lt;version&gt;3.12.1&lt;/version&gt;\n        &lt;/plugin&gt;\n        &lt;plugin&gt;\n          &lt;artifactId&gt;maven-project-info-reports-plugin&lt;/artifactId&gt;\n          &lt;version&gt;3.6.1&lt;/version&gt;\n        &lt;/plugin&gt;\n      &lt;/plugins&gt;\n    &lt;/pluginManagement&gt;\n  &lt;/build&gt;\n&lt;/project&gt;\n</code></pre> <p>I la descripci\u00f3 d'alguns elements:</p> <ul> <li><code>project</code>: \u00c9s l'etiqueta arrel del document. Consistix en una cap\u00e7alera XML, on es definix el tipus de document a trav\u00e9s del seu espai de noms.</li> <li><code>modelVersion</code>: Indica la versi\u00f3 de POM que es descriu el document.</li> <li><code>groupId</code>, <code>artifactId</code> i <code>name</code>: fan refer\u00e8ncia a l'identificador de l'organitzaci\u00f3 (groupId), al nom de la soluci\u00f3 (artifactId) i al de l'aplicaci\u00f3 (name)</li> <li><code>version</code>: Indica la versi\u00f3 de l'aplicaci\u00f3. El sufix <code>SNAPSHOT</code>, indica que es tracta de l'\u00faltim codi en una branca de desenvolupament, la qual cosa no garantix l'estabilitat d'este. Generalment, s'usa quan estem en fase de desenvolupament i proves, fins que alliberem una release estable.</li> <li><code>properties</code>: Establix algunes propietats per al projecte, com ara:<ul> <li><code>project.build.sourceEncoding</code>: Especifica la codificaci\u00f3 dels arxius font, en este cas UTF-8.</li> <li><code>maven.compiler.source</code> i <code>maven.compiler.target</code>: Especifica les propietats per al compilador, indicant que tant els fonts com el bytecode es correspondr\u00e0 com a m\u00ednim amb la plataforma Java 1.7. Aix\u00f2 es deu al fet que Maven ja no suporta versions de Java anteriors a la 1.6.</li> <li><code>dependencies</code>: Indica les depend\u00e8ncies que t\u00e9 la nostra aplicaci\u00f3. Com veiem, ho fa indicant per a cadascuna el seu identificador d'organitzaci\u00f3 (groupId), de recurs (artifactId), i la versi\u00f3. A m\u00e9s, especifica l'\u00e0mbit (scope) en qu\u00e8 s'aplica la depend\u00e8ncia. En este cas, l'arquetip a partir del que hem generat la nostra aplicaci\u00f3 incorpora la depend\u00e8ncia de JUnit per a realitzar els tests.</li> <li>Secci\u00f3 <code>build</code> i <code>plugins</code>: En esta secci\u00f3 es definixen alguns par\u00e0metres de la construcci\u00f3 i els plugins utilitzats per a aix\u00f2. Podem veure els plugins utilitzats en els diferents cicles de vida (clean, default, site, etc\u00e8tera)</li> </ul> </li> </ul> <p>En principi, si no necessitem afegir cap depend\u00e8ncia o alguna caracter\u00edstica espec\u00edfica per al nostre projecte, no ser\u00e0 necessari fer canvis en el fitxer.</p>"},{"location":"5.Maven/#compilar-i-executar-el-projecte-generat","title":"Compilar i executar el projecte generat","text":"<p>L'arquetip que hem utilitzat per a generar l'aplicaci\u00f3, <code>maven-Archetype-quickstart</code>, ens crea directament un esquelet d'aplicaci\u00f3 del tipus Hola M\u00f3n. Si accedim a l'arxiu <code>src/main/java/com/ieseljust/edd/App.java</code>, veurem un codi bastant familiar:</p> <pre><code>package com.ieseljust.edd;\n\n/**\n * Hello world!\n *\n */\npublic class App \n{\n    public static void main( String[] args )\n    {\n        System.out.println( \"Hello World!\" );\n    }\n}\n</code></pre> <p>Per a compilar i executar este codi utilitzarem l'ordre  <code>maven compile</code>, i realitzarem la invocaci\u00f3 a la m\u00e0quina virtual de java. Vegem-ho per parts.</p> <ul> <li>Pas 1. Compilaci\u00f3</li> </ul> <p>Ens situem en l'arrel del projecte, i executem:</p> <pre><code>$ mvn compile \n\n[INFO] Compiling 1 source file with javac [debug release 17] to target/classes\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  5.062 s\n[INFO] Finished at: 2024-11-25T11:47:17+01:00\n[INFO] ------------------------------------------------------------------------\n</code></pre> <p>Amb aix\u00f2 es genera una nova carpeta target en l'arrel del projecte, amb les classes generades, seguint la seg\u00fcent estructura:</p> <pre><code>target/\n\u251c\u2500\u2500 classes\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 com\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 ieseljust\n\u2502\u00a0\u00a0         \u2514\u2500\u2500 edd\n\u2502\u00a0\u00a0             \u2514\u2500\u2500 App.class\n\u251c\u2500\u2500 generated-sources\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 annotations\n\u2514\u2500\u2500 maven-status\n    \u2514\u2500\u2500 maven-compiler-plugin\n        \u2514\u2500\u2500 compile\n            \u2514\u2500\u2500 default-compile\n                \u251c\u2500\u2500 createdFiles.lst\n                \u2514\u2500\u2500 inputFiles.lst\n</code></pre> <p>Com veiem, es genera la carpeta classes, amb els fitxers <code>.class</code> en bytecode, segons l'estructura del paquet, i a m\u00e9s un parell de carpetes m\u00e9s. Una amb recursos, que contindr\u00e0 una carpeta annotations buida, i una altra maven-status, amb l'estat o resultats dels plugins. En este cas, el resum del plugin de compilaci\u00f3 ens indica quins fitxers es van crear i quins van ser els fitxers d'entrada.</p>"},{"location":"5.Maven/#pas-2-execucio","title":"Pas 2. Execuci\u00f3","text":"<p>Per executar l'aplicaci\u00f3, haurem d'indicar el classpath a java, mitjan\u00e7ant la'opcion -cp, i executar esta, indicant el nom de la classe completament qualificat:</p> <pre><code>$ java -cp target/classes com.ieseljust.edd.App \nHello World!\n</code></pre> <p>Neteja del projecte</p> <p>Per netejar el projecte, utilitzarem l'orde <code>mvn clean</code>, invocant-la des de l'arrel del propi projecte.</p> <pre><code>$ mvn clean \n[INFO] Scanning for projects...\n[INFO] \n[INFO] -------------------&lt; com.ieseljust.edd:saludaMaven &gt;--------------------\n[INFO] Building saludaMaven 1.0-SNAPSHOT\n[INFO]   from pom.xml\n[INFO] --------------------------------[ jar ]---------------------------------\nDownloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-clean-plugin/3.4.0/maven-clean-plugin-3.4.0.pom\nDownloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-clean-plugin/3.4.0/maven-clean-plugin-3.4.0.pom (5.5 kB at 11 kB/s)\nDownloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-clean-plugin/3.4.0/maven-clean-plugin-3.4.0.jar\nDownloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-clean-plugin/3.4.0/maven-clean-plugin-3.4.0.jar (36 kB at 495 kB/s)\n[INFO] \n[INFO] --- clean:3.4.0:clean (default-clean) @ saludaMaven ---\n[INFO] Deleting /tmp/proves_Maven/saludaMaven/target\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  1.115 s\n[INFO] Finished at: 2024-11-25T11:50:40+01:00\n[INFO] ------------------------------------------------------------------------\n</code></pre> <p>Com veiem, amb <code>mvn clean</code>, hem esborrat la carpeta target.</p>"},{"location":"5.Maven/#empaquetat","title":"Empaquetat","text":"<p>Les aplicacions Java solen distribuir-se empaquetades en un fitxer de tipus JAR (Java Arxive), que continga tots els <code>.*class</code> de l'aplicaci\u00f3.</p> <p>Per a crear este fitxer, utilitzarem l'ordre <code>mvn package</code>. Vegem com fer-ho:</p> <ul> <li>Pas 1. Creaci\u00f3 del JAR</li> </ul> <pre><code>$ mvn package\u00a0\n</code></pre> <p>O b\u00e9, si desitgem netejar abans el projecte:</p> <pre><code>$ mvn clean package\u00a0\n</code></pre> <p>Per a completar el cicle de construcci\u00f3 de l'empaquetat, es passa pr\u00e8viament per la compilaci\u00f3 i els tests, generant la carpeta target amb una mica m\u00e9s de contingut que \u00fanicament per a la compilaci\u00f3:</p> <pre><code>target/\n\u251c\u2500\u2500 classes\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 com\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 ieseljust\n\u2502\u00a0\u00a0         \u2514\u2500\u2500 edd\n\u2502\u00a0\u00a0             \u2514\u2500\u2500 App.class\n\u251c\u2500\u2500 generated-sources\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 annotations\n\u251c\u2500\u2500 generated-test-sources\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 test-annotations\n\u251c\u2500\u2500 maven-archiver\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 pom.properties\n\u251c\u2500\u2500 maven-status\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 maven-compiler-plugin\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 compile\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 default-compile\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0     \u251c\u2500\u2500 createdFiles.lst\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0     \u2514\u2500\u2500 inputFiles.lst\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 testCompile\n\u2502\u00a0\u00a0         \u2514\u2500\u2500 default-testCompile\n\u2502\u00a0\u00a0             \u251c\u2500\u2500 createdFiles.lst\n\u2502\u00a0\u00a0             \u2514\u2500\u2500 inputFiles.lst\n\u251c\u2500\u2500 saludaMaven-1.0-SNAPSHOT.jar\n\u251c\u2500\u2500 surefire-reports\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 com.ieseljust.edd.AppTest.txt\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 TEST-com.ieseljust.edd.AppTest.xml\n\u2514\u2500\u2500 test-classes\n    \u2514\u2500\u2500 com\n        \u2514\u2500\u2500 ieseljust\n            \u2514\u2500\u2500 edd\n                \u2514\u2500\u2500 AppTest.class\n</code></pre> <p>A part de les carpetes classes, amb els <code>.*class</code> resultat de la compilaci\u00f3, i les carpetes que ja vam veure que es generen quan es realitza la compilaci\u00f3, s'han generat altres carpetes com <code>maven-archiver</code>, que cont\u00e9 un fitxer <code>pom.properties</code>, amb el groupid, l'artifactid i la versi\u00f3 del projecte, aix\u00ed com la carpeta surefire-reports, amb informes sobre els tests. De totes maneres, el que ens interessa \u00e9s el fitxer generat saludaMaven-1.0-SNAPSHOT.jar, amb l'arxiu de l'aplicaci\u00f3.</p> <ul> <li>Pas 2. Executant el JAR</li> </ul> <p>Per a executar-ho, podem fer-ho amb:</p> <pre><code>java -cp target/saludaMaven-1.0-SNAPSHOT.jar com.ieseljust.edd.App \n</code></pre> <p>Amb aix\u00f2, indiquem com classpath el fitxer JAR, ja que \u00e9s ell qui cont\u00e9 les classes, i a m\u00e9s, la classe principal.</p> <p>No obstant aix\u00f2, la forma habitual d'executar en JAR ser\u00e0 amb l'opci\u00f3 <code>-jar</code> de java:</p> <pre><code>$ java -jar target/saludaMaven-1.0-*SNAPSHOT.jar \n\nno main manifest attribute, in target/saludaMaven-1.0-SNAPSHOT.jar\n</code></pre> <p>Com veiem, ens mostra un error, indicant que no existix un atribut <code>main</code> en el manifest (\u00e9s a dir, no s'indica quina \u00e9s la classe principal). El Manifest, en un fitxer JAR \u00e9s un fitxer situat dins de l'arxiu JAR que definix algunes caracter\u00edstiques d'aquest. Si obrim el JAR generat amb una aplicaci\u00f3 de compressi\u00f3 i descompressi\u00f3 d'arxius, el trobarem en META-INF/MANIFEST.MF, i el seu contingut \u00e9s el seg\u00fcent:</p> <pre><code>Manifest-Version: 1.0\nCreated-By: Maven JAR Plugin 3.4.2\nBuild-Jdk-Spec: 21\n</code></pre> <p>Com veiem, cont\u00e9 informaci\u00f3 sobre la versi\u00f3 del manifest i el JDK, per\u00f2 no s'indica quina \u00e9s la classe principal de l'aplicaci\u00f3.</p> <p>Per tal que Maven afisca ac\u00ed la classe prinipal, haurem d'indicar-li-ho en el pom.xml. Per a aix\u00f2, editem el fitxer i busquem el plugin <code>maven-jar-plugin</code>:</p> <pre><code>&lt;plugin&gt;\n &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;\n  &lt;version&gt;3.4.2&lt;/version&gt;\n&lt;/plugin&gt;\n</code></pre> <p>Ara, el que farem ser\u00e0 afegir una nova etiqueta de configuraci\u00f3, per a indicar-li que s'incloga en el manifest el *Classpath i especificar la classe principal de l'aplicaci\u00f3. Aix\u00ed doncs, ens quedaria:</p> <pre><code>&lt;plugin&gt;\n  &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;\n  &lt;version&gt;3.4.2&lt;/version&gt;\n  &lt;configuration&gt;\n    &lt;archive&gt;\n      &lt;manifest&gt;\n        &lt;addClasspath&gt;true&lt;/addClasspath&gt;\n        &lt;mainClass&gt;com.ieseljust.edd.App&lt;/mainClass&gt;\n      &lt;/manifest&gt;\n    &lt;/archive&gt;\n  &lt;/configuration&gt;\n&lt;/plugin&gt;\n</code></pre> <p>Amb aix\u00f2 ja podem generar de nou el JAR:</p> <pre><code>$ mvn clean package\u00a0\n</code></pre> <p>I executar-lo amb el par\u00e0metre <code>-jar</code>:</p> <pre><code>$ java -jar target/saludaMaven-1.0-SNAPSHOT.jar \u00a0\nHello World!\n</code></pre> <p>Si tornem a extraure el fitxer de Manifest, veurem que ara s\u00ed que cont\u00e9 el nom de la classe principal:</p> <pre><code>Manifest-Version: 1.0\nCreated-By: Maven JAR Plugin 3.4.2\nBuild-Jdk-Spec: 21\nMain-Class: com.ieseljust.edd.App\n</code></pre>"},{"location":"5.Maven/#el-mode-interactiu-de-maven","title":"El mode interactiu de *Maven","text":"<p>Com ja hem comentat, a part del mode batch que hem vist, Maven oferix un mode de funcionament interactiu, que ens va guiant en la creaci\u00f3 dels nostres projectes.</p> <p>Per a crear un projecte Maven des del mode interactiu, nom\u00e9s haurem d'indicar que desitgem executar l'objectiu <code>generate</code> del plugin <code>archerype</code>, sense res m\u00e9s. Aix\u00ed doncs, per a generar un altre projecte, ens situem fora de l'anterior, i executem:</p> <pre><code>mvn archetype:generate \n</code></pre> <p>Despr\u00e9s d'alguns possibles avisos i missatges informatius ens oferix una llista de totes les plantilles disponibles en Maven (en estos moments 3500). De manera predeterminada proposa la creaci\u00f3 d'un projecte de tipus maven-archetype-quickstart (2204), que seria el mateix que hem utilitzat, amb una estructura d'Hola M\u00f3n. Haureu de tindre en compte que este n\u00famero pot variar en diferents versions de Maven.</p> <pre><code>$ mvn archetype:generate.\n\nChoose a number or apply filter (format: [groupId:]artifactId, case sensitive contains): 2204\n</code></pre> <p>Despr\u00e9s ens demana el n\u00famero de versi\u00f3 de l'aplicaci\u00f3. Seleccionem el 5 (la 1.0):</p> <pre><code>Choose org.apache.maven.archetypes:maven-archetype-quickstart version: \n1: 1.0-alpha-1\n2: 1.0-alpha-2\n3: 1.0-alpha-3\n4: 1.0-alpha-4\n5: 1.0\n6: 1.1\n7: 1.3\n8: 1.4\n9: 1.5\nChoose a number: 9: 5\n</code></pre> <p>Despr\u00e9s ens pregunta altres dades, com el <code>groupId</code>, <code>artifact</code>, etc.. Per als quals ja ens oferix un valor v\u00e0lid predeterminat, no far\u00e0 falta reescriure'ls, i podrem polsar Intro per a acceptar estos valors.</p> <pre><code>Define value for property 'groupId': com.ieseljust.edd\nDefine value for property 'artifactId': Saluda2\nDefine value for property 'version' 1.0-SNAPSHOT: \nDefine value for property 'package' com.ieseljust.edd: \nConfirm properties configuration:\ngroupId: com.ieseljust.edd\nartifactId: Saluda2\nversion: 1.0-SNAPSHOT\npackage: com.ieseljust.edd\n Y: y\n</code></pre> <p>Despr\u00e9s de demanar la confirmaci\u00f3 de tot, ja ens mostra el resultat de la creaci\u00f3.</p> <pre><code>[INFO] ----------------------------------------------------------------------------\n[INFO] Using following parameters for creating project from Old (1.x) Archetype: maven-archetype-quickstart:1.0\n[INFO] ----------------------------------------------------------------------------\n[INFO] Parameter: basedir, Value: /tmp/proves\n[INFO] Parameter: package, Value: com.ieseljust.edd\n[INFO] Parameter: groupId, Value: com.ieseljust.edd\n[INFO] Parameter: artifactId, Value: Saluda2\n[INFO] Parameter: packageName, Value: com.ieseljust.edd\n[INFO] Parameter: version, Value: 1.0-SNAPSHOT\n[INFO] project created from Old (1.x) Archetype in dir: /tmp/proves/Saluda2\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  03:51 min\n[INFO] Finished at: 2024-12-03T06:33:22+01:00\n[INFO] ------------------------------------------------------------------------\n</code></pre> <p>En este cas, el pom.xml generat \u00e9s possible que es genere d'una plantilla diferent, i diferisca del que hem generat anteriorment. Les principals difer\u00e8ncies poden ser que no s'especifique les opcions <code>maven.compiler.source</code> i <code>maven.compiler.target</code>, aix\u00ed com la configuraci\u00f3 dels plugins.</p> <p>Aix\u00ed doncs, en primer lloc, haurem d'afegir les opcions relatives al compilador. I en segon, nom\u00e9s aquells plugins que vulguem configurar, ja que la resta prendr\u00e0 les opcions per defecte. En el nostre cas, es tractaria d'afegir la configuraci\u00f3 a l'empaquetat.</p> <p>En resum, haur\u00edem de modificar el nou pom.xml amb el seg\u00fcent contingut:</p> <pre><code>&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\"&gt;\n  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n\n  &lt;groupId&gt;com.ieseljust.edd&lt;/groupId&gt;\n  &lt;artifactId&gt;Saluda2&lt;/artifactId&gt;\n  &lt;packaging&gt;jar&lt;/packaging&gt;\n  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n\n  &lt;name&gt;Saluda2&lt;/name&gt;\n  &lt;url&gt;http://maven.apache.org&lt;/url&gt;\n\n  &lt;!-- Aquest bloc properties \u00e9s nou --&gt;\n  &lt;properties&gt;\n    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;\n    &lt;maven.compiler.release&gt;17&lt;/maven.compiler.release&gt;\n  &lt;/properties&gt;\n\n  &lt;dependencies&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;junit&lt;/groupId&gt;\n      &lt;artifactId&gt;junit&lt;/artifactId&gt;\n      &lt;version&gt;3.8.1&lt;/version&gt;\n      &lt;scope&gt;test&lt;/scope&gt;\n    &lt;/dependency&gt;\n  &lt;/dependencies&gt;\n\n  &lt;!-- Aquest bloc build tamb\u00e9 \u00e9s nou --&gt;\n  &lt;build&gt;\n    &lt;pluginManagement&gt;\n      &lt;plugins&gt;\n        &lt;plugin&gt;\n          &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;\n          &lt;version&gt;3.4.2&lt;/version&gt;\n          &lt;configuration&gt;\n            &lt;archive&gt;\n              &lt;manifest&gt;\n                &lt;addClasspath&gt;true&lt;/addClasspath&gt;\n                &lt;mainClass&gt;com.ieseljust.edd.App&lt;/mainClass&gt;\n              &lt;/manifest&gt;\n            &lt;/archive&gt;\n          &lt;/configuration&gt;\n        &lt;/plugin&gt;\n      &lt;/plugins&gt;\n    &lt;/pluginManagement&gt;\n  &lt;/build&gt;\n\n&lt;/project&gt;\n</code></pre> <p>Amb aix\u00f2 ja podrem compilar i empaquetar el projecte tal com vam fer en el projecte anterior.</p>"},{"location":"5.Maven/#el-plugin-de-maven-per-a-vscode","title":"El plugin de Maven per a VSCode","text":"<p>Com ja sabem, en instal\u00b7lar el plugin Extension Pack for Java, una de les extensions que ens arrossega \u00e9s l'extensi\u00f3 Maven for Java. Esta extensi\u00f3 ens oferix un explorador de projectes Maven i afig les seg\u00fcent funcionalitats:</p> <ol> <li>Suport per a la generaci\u00f3 de projectes a partir d'arquetips Maven,</li> <li>Suport per a generar POM de manera eficient,</li> <li>Oferix dreceres de teclat per a llan\u00e7ar objectius de Maven comuns: clean, validate, compile test, package, verify, install, site i deploy,</li> <li>Manteniment d'un historial d'ordes per a tornar a llan\u00e7ar ordes recents.</li> </ol>"},{"location":"5.Maven/#lexplorador-de-projectes-maven","title":"L'explorador de projectes Maven","text":"<p>Quan obrim una carpeta o espai de treball que cont\u00e9 un fitxer <code>pom.xml</code>, VSCode ens mostra una nova secci\u00f3 en la barra lateral anomenada Maven Projects, amb els projectes Maven del worksapce  i els seus m\u00f2duls.</p> <p></p> <p>Com veiem en la figura anterior, despr\u00e9s d'obrir la carpeta on tenim el projecte de saludaMaven, este se'ns obrir\u00e0 en la pestanya MAVEN. Si fem clic en el nom del projecte, se'ns despleguen els diferents cicles de vida, que podrem executar directament mitjan\u00e7ant la icona Run que ens apareix al costat de cada cicle, aix\u00ed com accedir al fitxer pom.xml des de la icona Open POM File.</p> <p>Si ara fem clic amb el bot\u00f3 dret sobre el projecte saludaMaven (o Saluda2), veurem diferents opcions, algunes d'elles relacionades amb els objectius del LifeCycle (clean, validate, etc.), a m\u00e9s d'acc\u00e9s a l'historial (History), entre altres opcions. Una de les m\u00e9s interessants \u00e9s Show Effective POM.</p> <p></p> <p>Qu\u00e8 \u00e9s l'Efective POM?</p> <p>Quan creem un projecte Maven a partir d'un arquetip, definim per al mateix un conjunt de propietats com ara el groupID, l'artifactID i la versi\u00f3. Estos tres camps s\u00f3n els que es requerixen per a tot projecte, i s\u00f3n el que conformen el POM m\u00e9s simple que podr\u00edem generar. El POM d'un projecte, a m\u00e9s, hereta certes propietats del que es coneix com el Super POM, que vindria a ser com la classe base de la que hereten tots els POM. \u00c9s a dir, un POM es compon dels atributs que definim expl\u00edcitament en funci\u00f3 de l'arquetip que hem utilitzat, i a m\u00e9s, posse\u00efx un conjunt de valors per defecte compartits per tots els projectes, i que no apareixen expl\u00edcitament en el fitxer <code>pom.xml</code>.</p> <p>Tenint tot aix\u00f2 en compte, el POM Efectiu (Effective POM)s'ent\u00e9n com la combinaci\u00f3 de tots dos POM, el Super POM i el POM m\u00e9s simple. A efectes pr\u00e0ctics, si consultem el POM efectiu del nostre projecte, veurem que es tracta d'un fitxer XML bastant m\u00e9s extens que l'original, i en el qual tindrem totes les caracter\u00edstiques que ten\u00edem definides expl\u00edcitament m\u00e9s totes aquelles que hi havia impl\u00edcitament i que s\u00f3n comunes a tots els projectes.</p>"},{"location":"5.Maven/#generacio-dun-projecte-maven-des-de-vscode","title":"Generaci\u00f3 d'un projecte Maven des de VSCode","text":"<p>Visual Studio Code ens permet crear projectes Maven a partir d'arquetips de diferents repositoris. Simplement, el que fa \u00e9s llan\u00e7ar per nosaltres les ordes que hem vist anteriorment en la terminal de VSCode.</p> <p>Vegem com fer-ho. Partint d'una finestra nova de VSCode (<code>Arxiu &gt; Nova Finestra</code>):</p> <ul> <li>Pas 1. En l'activitat de l'Explorador, busquem la pestanya desplegable MAVEN, i el s\u00edmbol \"+\" que apareix a la seua dreta.</li> <li>Pas 2. Fem clic en este s\u00edmbol \"+\" per a crear un projecte Maven nou.</li> </ul> <p></p> <ul> <li>Pas 3. En la paleta d'ordes ens apareixer\u00e0 els diferents arquetips de qu\u00e8 disposem. Busquem quickstart, i seleccionem <code>maven-Archetype-quickstart</code>.</li> </ul> <p></p> <ul> <li>Pas 4. Indiquem la versi\u00f3 (<code>1.0</code>), el groupId (<code>com.ieseljust.edd</code>), i el nom (<code>Salud3)</code> del projecte</li> <li>Pas 5. Fet aix\u00f2, se'ns obrir\u00e0 la terminal integrada de VSCode, i ens demanar\u00e0 la propietat version que falta per configurar. Deixem el valor predeterminat 1.0-SNAPSHOT, i polsem Intro per a crear el projecte:</li> </ul> <p></p> <p>Una vegada generat el projecte, si donem una ullada a l'estructura de carpetes generada i al pom.xml , veurem que \u00e9s pr\u00e0cticament el mateix que hav\u00edem definit per consola.</p>"},{"location":"5.Maven/#actualitzacio-de-la-cache-darquetips","title":"Actualitzaci\u00f3 de la cach\u00e9 d'arquetips","text":"<p>Una altra opci\u00f3 que podem realitzar amb VSCode, \u00e9s actualitzar la cach\u00e9 local dels diferents arquetips des del repositori Maven Central. Per a aix\u00f2, accedirem a la Consola d'Ordes mitjan\u00e7ant Ctrl +Shift + P, i quan se'ns \u00f2briga esta, comen\u00e7arem a escriure Maven:... per a filtrar les diferents opcions, fins a tindre a la vista l'opci\u00f3 de Update Maven Archetype Catalog.</p> <p></p> <p>Activitats</p> <ol> <li>Segueix els passos anteriors i configura un projecte Maven des de la l\u00ednia d'ordres. Modifica el codi font amb el de la teua calculadora. El nom del paquet ser\u00e0 el teu nom i cognoms, en el format com.cognom2.cognom1.nom. Documenta el proc\u00e9s i crea una entrada al teu devlog.</li> <li>Fes el mateix, per\u00f2 ara generant el projecte Maven des de VSCode. Documenta el proc\u00e9s i afig-lo en una entrada al devlog.</li> <li>Explora les opcions de Netbeans per crear un projecte Maven i crea un projecte amb les mateixes caracter\u00edstiques, documentant el proc\u00e9s.</li> </ol>"},{"location":"6.gradle/","title":"6. Gradle","text":""},{"location":"6.gradle/#gradle","title":"Gradle","text":"<p>Com hem vist anteriorment, Ant \u00e9s una eina molt vers\u00e0til, per\u00f2 que descarrega molta responsabilitat en el desenvolupador. En canvi, Maven ofereix mitjan\u00e7ant els arquetips una estructura pr\u00e0cticament predefinida d'aplicaci\u00f3, donant suport a tot el cicle de vida de construcci\u00f3. Aix\u00f2 pot ser que siga un inconvenient quan el nostre projecte no s'ajusta a cap arquetip.</p> <p>En este context, en 2008 va apar\u00e9ixer Gradle, que pret\u00e9n integrar el millor de cada eina: les tasques i facilitat de personalitzaci\u00f3 d'Ant, i la pot\u00e8ncia i el suport al cicle vida de construcci\u00f3 i de proves de Maven.</p> <p>Igual que Maven, Gradle tamb\u00e9 seguix el paradigma de convenci\u00f3 sobre configuraci\u00f3, on totes les opcions de configuraci\u00f3 tindran valors predeterminats comuns o \u00fatils, de manera que \u00fanicament h\u00e0gem de modificar-los en casos especials.</p> <p>Una altra difer\u00e8ncia important respecte a Ant i Maven \u00e9s que Gradle no utilitza el format XML en la seua configuraci\u00f3, sin\u00f3 que els scripts de compilaci\u00f3 s'expressen mitjan\u00e7ant un llenguatge espec\u00edfic de domini (Domain Specific Language, o DSL) basats en Groovy o Kotlin.</p> <p>A m\u00e9s, Gradle permet utilitzar altres llenguatges, a m\u00e9s de Java, com a C++, Scala, Swift o Kotlin, i \u00e9s el sistema de compilaci\u00f3 utilitzat en projectes Android.</p>"},{"location":"6.gradle/#projectes-en-gradle","title":"Projectes en Gradle","text":"<p>Un projecte es compon d'un conjunt de recursos ben organitzats. Estos recursos inclouran, entre altres el codi font i la l\u00f2gica per a la seua construcci\u00f3.</p> <p>Gradle a m\u00e9s, permet que un projecte continga subprojectes (multiprojecte), de manera que tots ells formen part en conjunt de l'aplicaci\u00f3. Per exemple, una aplicaci\u00f3 de missatgeria pot estar compost per dos projectes: un per a l'aplicaci\u00f3 client, i un altre per al servidor.</p> <p>A m\u00e9s, els projectes es registraran en un fitxer anomenat settings.gradle (o settings.gradle.kts), i els subprojectes o subm\u00f2duls tindran els seus respectius fitxers build.gradle (o build.gradle.kts).</p>"},{"location":"6.gradle/#tasques-en-gradle","title":"Tasques en Gradle","text":"<p>Una tasca representa una acci\u00f3, b\u00e9 siga predeterminada o personalitzada, que s'executar\u00e0 durant el proc\u00e9s de construcci\u00f3 dels nostres projectes.</p> <p>El script de construcci\u00f3 del projecte (fitxers <code>build.gradle</code>) permet definir tasques, aix\u00ed com depend\u00e8ncies entre elles. Una depend\u00e8ncia entre tasques significa que per a fer una tasca, \u00e9s necessari que s'haja executat una altra pr\u00e8viament. Per exemple, per a poder llan\u00e7ar la tasca d'executar l'aplicaci\u00f3, pr\u00e8viament ha d'haver-se llan\u00e7at la tasca de compilaci\u00f3.</p> <p>Durant la construcci\u00f3, Gradle garantir\u00e0 que aquestes tasques s'executen de manera \u00fanica i ordenada. \u00c9s a dir, cada tasca s'executar\u00e0 una vegada, i totes les tasques de les quals esta dep\u00e9n s'hauran executat pr\u00e8viament.</p>"},{"location":"6.gradle/#cicle-de-vida-en-gradle","title":"Cicle de vida en Gradle","text":"<p>El cicle de vida de construcci\u00f3 descriu les fases per les quals passem per a construir un projecte. En Gradle, aquest cicle consta \u00fanicament de tres fases: inicialitzaci\u00f3, configuraci\u00f3 execuci\u00f3.</p> <ul> <li> <p>Inicialitzaci\u00f3: Gradle determina quins projectes estaran involucrats en el proc\u00e9s de construcci\u00f3. Per a aix\u00f2, examina el fitxer del projecte <code>settings.gradle</code>, a la recerca dels subprojectes i dels seus respectius fitxers de construcci\u00f3 <code>build.gradle</code>. En finalitzar esta fase, es crea una inst\u00e0ncia de projecte (<code>org.gradle.api.Project</code>) per a cadascun d'ells.</p> </li> <li> <p>Configuraci\u00f3: S'analitzen els scripts de construcci\u00f3 dels projectes identificats en la inicialitzaci\u00f3, i les diferents tasques que componen cadascun. A partir d'aquest an\u00e0lisi, Gradle genera un Graf Ac\u00edclic Dirigit (GAD) de tasques. Un graf \u00e9s la representaci\u00f3 d'un conjunt d'elements (en esta case les tasques), i la relaci\u00f3 entre elles (en este cas la relaci\u00f3 de depend\u00e8ncia). El fet que siga dirigit significa que la relaci\u00f3 \u00e9s unidireccional, en el sentit de la depend\u00e8ncia, i el que siga ac\u00edclic indica que no es produ\u00efxen bucles en el graf. Amb aix\u00f2 assegurem que les tasques s'executaran en l'orde corresponent i solament una vegada.</p> </li> </ul> <p>Vegem, a mode d'exemple el seg\u00fcent grup de tasques i les depend\u00e8ncies entre elles, i el grau ac\u00edclic dirigit que formen. Com podeu observar, les depend\u00e8ncies van en una \u00fanica direcci\u00f3, i les tasques nom\u00e9s s'executen una vegada, encara que depenguen de diverses tasques posteriors.</p> <pre><code>tasca Compilar { }\n\ntasca TestUnitari{\n depenDe Compilar\n}\ntasca Empaquetar{\n depenDe Compilar\n}\ntasca Construir{\n depenDe TestUnitario, Empaquetar\n}\n</code></pre> <pre><code>graph BT\n    TestUnitari --&gt; Compilar\n    Empaquetar --&gt; Compilar \n    Construir --&gt; TestUnitari\n    Construir --&gt; Empaquetar</code></pre> <ul> <li>Execuci\u00f3: En esta fase es llancen les diferents tasques segons l'orde de depend\u00e8ncia generat en el graf de tasques que va obtindre en la fase anterior. En este punt \u00e9s on realment es realitza tot el treball de construcci\u00f3: compilaci\u00f3, c\u00f2pia de recursos, neteja del projecte, generar empaquetats, etc.</li> </ul>"},{"location":"6.gradle/#gradle-en-la-practica","title":"Gradle en la pr\u00e0ctica","text":"<p>Despr\u00e9s d'aprendre a generar projectes mitjan\u00e7ant Maven, aprendrem ara a fer-ho amb Gradle.</p>"},{"location":"6.gradle/#installacio","title":"Instal\u00b7laci\u00f3","text":"<p>Gradle es troba en els repositoris d'Ubuntu, per\u00f2 amb una versi\u00f3 bastant desactualitzada (4.4.1-20), si es compara amb la versi\u00f3 actual (8.11.1 a desembre de 2024).</p> <p>Aix\u00ed doncs, la millor manera de realitzar la instal\u00b7laci\u00f3 \u00e9s fent-ho de manera manual al nostre Home i configurant el path, de manera que tampoc necessitem perm\u00eds d'administrador al sistema.</p> <p>Per a aix\u00f2, ens basarem en les instruccions sobre la instal\u00b7laci\u00f3 indicades en la web de Gradle: https://gradle.org/install/, Podeu consultar l'enlla\u00e7 per a unes instruccions m\u00e9s detallades.</p> <p>Per a aix\u00f2 seguim els seg\u00fcents pasos:</p>"},{"location":"6.gradle/#pas-1-descarrega-dels-binaris","title":"Pas 1. Desc\u00e0rrega dels binaris","text":"<p>Descarreguem els binaris Gradle des de la web. Al nostre cas, la \u00faltima \u00e9s la versi\u00f3 8.11.1, del 20 de novembre, encara que pot ser posterior. </p> <p>Descarregarem aquest fitxer i el deixarem a la nostra carpeta <code>~/devtools</code>.</p>"},{"location":"6.gradle/#pas-2-descompressio","title":"Pas 2. Descompressi\u00f3","text":"<p>Una vegada descarregat, ens situem en la carpeta devtools i descomprimim el fitxer, ja siga des de l'explorador de fitxers o des de la l\u00ednia d'ordres amb:</p> <pre><code>~$ cd ~/devtools/\n~/devtools$ unzip gradle-8.11.1-bin.zip \n</code></pre>"},{"location":"6.gradle/#pas-3-configurar-el-path","title":"Pas 3. Configurar el Path","text":"<p>Per afegir la ruta al Path de forma permanent, caldr\u00e0 afegir al final del fitxer <code>~/.bashrc</code> el seg\u00fcent codi:</p> <pre><code># Gradle\nif [ -d $HOME/devtools/gradle-8.11.1/bin ]; then\n        PATH=$HOME/devtools/gradle-8.11.1/bin:$PATH\nfi\n</code></pre>"},{"location":"6.gradle/#pas-4-comprovacio","title":"Pas 4. Comprovaci\u00f3","text":"<p>Fet aix\u00f2, ja podem obrir una nova terminal (o en la mateixa fer un <code>source ~/.bashrc</code>) i comprovar la versi\u00f3:</p> <pre><code>$ gradle -v\n\n------------------------------------------------------------\nGradle 8.11.1\n------------------------------------------------------------\n\nBuild time:    2024-11-20 16:56:46 UTC\nRevision:      481cb05a490e0ef9f8620f7873b83bd8a72e7c39\n\nKotlin:        2.0.20\nGroovy:        3.0.22\nAnt:           Apache Ant(TM) version 1.10.14 compiled on August 16 2023\nLauncher JVM:  21.0.5 (Ubuntu 21.0.5+11-Ubuntu-1ubuntu124.04)\nDaemon JVM:    /usr/lib/jvm/java-21-openjdk-amd64 (no JDK specified, using current Java home)\nOS:            Linux 6.8.0-49-generic amd64\n</code></pre> <p>Com podem veure, ens mostra informaci\u00f3 sobre les versions tant de Gradle (8.11.1), com de Kotlin (2.0.20), Groovy (3.0.22), Ant (1.10.14), la JVM (21.0.5), o el sistema operatiu.</p>"},{"location":"6.gradle/#creacio-dun-projecte-en-gradle","title":"Creaci\u00f3 d'un projecte en Gradle","text":"<p>Veiem com generar un projecte de tipus Hola M\u00f3n t\u00edpic en Gradle. Ho farem primer amb el mode interactiu.</p> <p>En primer lloc, ens situem en la carpeta on volem crear el projecte, i crearem una carpeta per a aquest, ja que Gradle generar\u00e0 tota l'estructura d'este en la carpeta on ens trobem:</p> <pre><code>$ mkdir HelloGradle \n$ cd HelloGradle \n</code></pre> <p>I ja dins d'esta, utilitzem l'orde <code>gradle init</code> per a iniciar l'assistent (en Windows ser\u00e0 gradle.bat):</p> <pre><code>$ gradle init \n</code></pre> <p>Veiem pas a pas aquest assistent:</p>"},{"location":"6.gradle/#pas-1-tipus-de-projecte","title":"Pas 1. Tipus de projecte","text":"<p>El primer que se'ns pregunta \u00e9s el tipus de projecte a construir: Una aplicaci\u00f3, una llibreria, un plugin de Gradle, o nom\u00e9s una estructura b\u00e0sica. Seleccionarem la primera opci\u00f3: Una aplicaci\u00f3:</p> <pre><code>Select type of build to generate:\n  1: Application\n  2: Library\n  3: Gradle plugin\n  4: Basic (build structure only)\nEnter selection (default: Application) [1..4] 1\n</code></pre>"},{"location":"6.gradle/#pas-2-llenguatge-de-programacio","title":"Pas 2. Llenguatge de programaci\u00f3","text":"<p>En segon lloc, ens pregunta pel llenguatge de programaci\u00f3 del projecte. Seleccionarem l'opci\u00f3 corresponent a Java:</p> <pre><code>Select implementation language:\n  1: Java\n  2: Kotlin\n  3: Groovy\n  4: Scala\n  5: C++\n  6: Swift\nEnter selection (default: Java) [1..6] 1\n</code></pre> <p>Una vegada triat el llenguatge, ens demanar\u00e0 quina versi\u00f3, de les que tenim disponibles anem a utilitzar. Triem la 21.</p> <pre><code>Enter target Java version (min: 7, default: 21): 21\n</code></pre>"},{"location":"6.gradle/#pas-3-nom-del-projecte","title":"Pas 3. Nom del projecte","text":"<p>Ara haurem d'indicar el nom del projecte. Gradle ens suggerix el nom de la carpeta on estem (i que hem generat espec\u00edficament per a\u00f1 projecte). Podem utilitzar aquest mateix nom (confirmant-ho o tornant-ho a escriure) o utilitzar un altre qualsevol:</p> <pre><code>Project name (default: HelloGradle): \n</code></pre>"},{"location":"6.gradle/#pas-4-estructura-de-laplicacio-en-subprojectes","title":"Pas 4. Estructura de l'aplicaci\u00f3 en subprojectes","text":"<p>Despr\u00e9s ens demana l'estructura de l'aplicaci\u00f3: si anem a crear una aplicaci\u00f3 \u00fanica o va a tindre subprojectes, ja que aix\u00f2 determinar\u00e0 l'estructura final d'aquesta.</p> <p>Triarem de moment que ser\u00e0 una aplicaci\u00f3 \u00fanica (Single application project)</p> <pre><code>Select application structure:\n  1: Single application project\n  2: Application and library project\nEnter selection (default: Single application project) [1..2] 1\n</code></pre>"},{"location":"6.gradle/#pas-5-llenguatde-dsl-per-a-lscript-de-construccio","title":"Pas 5. Llenguatde DSL per a l'script de construcci\u00f3","text":"<p>Ara ens demana quin llenguatge espec\u00edfic de domini (Domain Script Language) anem a utilitzar. Podem fer \u00fas de Groovy o de Kotlin. Seleccionarem Groovy.</p> <pre><code>Select build script DSL:\n  1: Kotlin\n  2: Groovy\nEnter selection (default: Kotlin) [1..2] 2\n</code></pre> <p>Per qu\u00e8 Groovy i no Kotlin?</p> <p>Quan creem una aplicaci\u00f3 en Android, aquesta s'organitza com un projecte Gradle. Des de 2018, el llenguatge de programaci\u00f3 recomanat per Google per crear aplicacions natives per a Android va ser Kotlin, en detriment de Java.</p> <p>Aleshores, \u00bfutilitza Android Kotlin Scripts (KTS) per a l'script de construcci\u00f3 del projecte? Avui en dia, encara no. Tot i que avui tant Gradle com Google estan promovent l'\u00fas de Kotlin, quan generem l'esquelet d'una aplicaci\u00f3 per a Android, encara segueix usant-se Groovy com a DSL, principalment per compatibilitat i raons hist\u00f2riques.</p>"},{"location":"6.gradle/#pas-6-framework-per-als-tests","title":"Pas 6. Framework per als tests","text":"<p>El seg\u00fcent pas, ens demana que indiquem el framework que utilitzarem per als tests unitaris. Aprofundireu m\u00e9s en ells en unitats posteriors. De moment, seleccionarem l'opci\u00f3 predeterminada (4).</p> <pre><code>Select test framework:\n  1: JUnit 4\n  2: TestNG\n  3: Spock\n  4: JUnit Jupiter\nEnter selection (default: JUnit Jupiter) [1..4].\n</code></pre>"},{"location":"6.gradle/#pas-7-seleccio-de-les-apis","title":"Pas 7. Selecci\u00f3 de les APIs","text":"<p>Ara ens pregunta si volem utilitzar les APIs i els comportaments m\u00e9s novedosos. De manera predeterminada, i per crear projectes m\u00e9s estables ens recomana no utilitzar aquestes APIs. Ho deixarem aix\u00ed:</p> <pre><code>Generate build using new APIs and behavior (some features may change in the next minor release)? (default: no) [yes, no] \n</code></pre>"},{"location":"6.gradle/#analitzant-lestructura-del-projecte","title":"Analitzant l'estructura del projecte","text":"<p>Una vegada finalitzat l'assistent, se'ns generar\u00e0 la seg\u00fcent estructura de fitxers:</p> <pre><code>HelloGradle/\n\u251c\u2500\u2500 app\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 build.gradle\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 src\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 main\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 java\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 org\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 example\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2514\u2500\u2500 App.java\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 resources\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 test\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 java\n\u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u2514\u2500\u2500 org\n\u2502\u00a0\u00a0         \u2502\u00a0\u00a0     \u2514\u2500\u2500 example\n\u2502\u00a0\u00a0         \u2502\u00a0\u00a0         \u2514\u2500\u2500 AppTest.java\n\u2502\u00a0\u00a0         \u2514\u2500\u2500 resources\n\u251c\u2500\u2500 gradle\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 libs.versions.toml\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 wrapper\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 gradle-wrapper.jar\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 gradle-wrapper.properties\n\u251c\u2500\u2500 gradle.properties\n\u251c\u2500\u2500 gradlew\n\u251c\u2500\u2500 gradlew.bat\n\u2514\u2500\u2500 settings.gradle\n</code></pre> <p>Com veiem, tenim la carpeta app amb la carpeta de codi de l'aplicaci\u00f3 (<code>src</code>), la qual cont\u00e9 les carpetes <code>main</code> amb el codi principal, i <code>test</code> amb el codi dels tests. Com podeu veure, dins d'eixes carpetes tenim la carpeta <code>java</code> amb l'estructura de carpetes corresponent al paquet de l'aplicaci\u00f3 (<code>org.example</code>), i amb el fitxer font <code>App.java</code> per al codi i <code>AppTest.java</code> per als tests.</p> <p>Centrant-nos en la part del codi, si observem el contingut del fitxer <code>App.java</code>, veurem que es tracta, encara que expressat utilitzant funcions, del codi per a mostrar un missatge d'Hola M\u00f3n per pantalla.</p> <pre><code>/*\n * This source file was generated by the Gradle 'init' task\n */\npackage org.example;\n\npublic class App {\n    public String getGreeting() {\n        return \"Hello World!\";\n    }\n\n    public static void main(String[] args) {\n        System.out.println(new App().getGreeting());\n    }\n}\n</code></pre> <p>L'altre fitxer important dins d'esta carpeta app \u00e9s el fitxer <code>build.gradle</code>, que \u00e9s l'script de construcci\u00f3 de l'aplicaci\u00f3:</p> <pre><code>/*\n * This file was generated by the Gradle 'init' task.\n *\n * This generated file contains a sample Java application project to get you started.\n * For more details on building Java &amp; JVM projects, please refer to https://docs.gradle.org/8.11.1/userguide/building_java_projects.html in the Gradle documentation.\n */\n\nplugins {\n    // Apply the application plugin to add support for building a CLI application in Java.\n    id 'application'\n}\n\nrepositories {\n    // Use Maven Central for resolving dependencies.\n    mavenCentral()\n}\n\ndependencies {\n    // Use JUnit Jupiter for testing.\n    testImplementation libs.junit.jupiter\n\n    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'\n\n    // This dependency is used by the application.\n    implementation libs.guava\n}\n\n// Apply a specific Java toolchain to ease working on different environments.\njava {\n    toolchain {\n        languageVersion = JavaLanguageVersion.of(21)\n    }\n}\n\napplication {\n    // Define the main class for the application.\n    mainClass = 'org.example.App'\n}\n\ntasks.named('test') {\n    // Use JUnit Platform for unit tests.\n    useJUnitPlatform()\n}\n</code></pre> <p>Com podem veure, es tracta d'una sintaxi relativament intu\u00eftiva, en la qual definim uns certs par\u00e0metres dins en diferents seccions, acotades per claus (<code>{}</code>):</p> <p>. <code>plugins</code>: Gradle en si proporciona molt poques funcionalitats d'automatitzaci\u00f3, i aquestes s'oferixen mitjan\u00e7ant plugins. En aquest cas, s'inclou el plugin <code>application</code>, per tal d'afegir suport a la construcci\u00f3 d'aplicacions Java en mode CLI (Console Line Interface). . <code>repositories</code>: En aquesta secci\u00f3 es carreguen els diferents repositoris per a descarregar llibreries i depend\u00e8ncies. Per defecte, veiem que carrega <code>mavenCentral()</code>, ja que Gradle \u00e9s compatible amb totes les llibreries de Maven. . <code>dependencies</code>: Ac\u00ed especificarem les llibreries de les quals dep\u00e9n el nostre projecte. En este cas, \u00fanicament dep\u00e9n d'un parell de llibreries necess\u00e0ries per als tests i l'aplicaci\u00f3, per\u00f2 podem afegir tantes depend\u00e8ncies com desitgem. Quan busquem una llibreria en Maven Central, ens indicar\u00e0 com afegir-la a aquest fitxer. . <code>application</code>: Defineix alguns aspectes sobre l'aplicaci\u00f3. En aquest cas, indica el valor <code>mainClass</code>, amb el nom completament qualificat de la classe principal (<code>org.example.app</code>). D'esta manera, Gradle sap ja quina classe ha de carregar quan executem l'aplicaci\u00f3.</p> <p>A m\u00e9s del contingut en la carpeta app, en l'arrel del projecte tenim alguns fitxers m\u00e9s d'inter\u00e9s:</p> <ul> <li><code>settings.gradle</code>: Cont\u00e9 la configuraci\u00f3 del projecte o projectes dels quals consta l'aplicaci\u00f3. En aquest cas, \u00fanicament s'inclou l'aplicaci\u00f3 HelloGradle, que es troba e la carpeta app.</li> </ul> <pre><code>/*\n * This file was generated by the Gradle 'init' task.\n *\n * The settings file is used to specify which projects to include in your build.\n * For more detailed information on multi-project builds, please refer to https://docs.gradle.org/8.11.1/userguide/multi_project_builds.html in the Gradle documentation.\n */\n\nplugins {\n    // Apply the foojay-resolver plugin to allow automatic download of JDKs\n    id 'org.gradle.toolchains.foojay-resolver-convention' version '0.8.0'\n}\n\nrootProject.name = 'HelloGradle'\ninclude('app')\n</code></pre> <ul> <li> <p><code>gradlew</code>, <code>gradlew.bat</code>, i la carpeta <code>gradle/wrapper</code>: El wrapper de Gradle \u00e9s una instal\u00b7laci\u00f3 portable de Gradle dins del projecte, de manera que no es requerix, per exemple, tindre Gradle instal\u00b7lat en el nostre equip si nom\u00e9s anem a construir el projecte. A m\u00e9s, aix\u00f2 proporciona tamb\u00e9 una versi\u00f3 fixa de Gradle per al projecte, de manera que no hi haja cap incompatibilitat entre versions.</p> </li> <li> <p><code>gradle/libs.versions.toml</code>: \u00c9s el fitxer que gestiona les versions de depend\u00e8ncies declarades de forma centralitzada.</p> </li> </ul>"},{"location":"6.gradle/#canviant-el-nom-del-paquet","title":"Canviant el nom del paquet","text":"<p>En versions anteriors de Gradle, se'ns permetia especificar el nom del paquet, que determinava l'estructura de directoris del codi font. Actualment, Gradle assumeix una estructura predeterminada <code>org.example</code> en lloc de demanar expl\u00edcitament el nom del paquet per fer que el proc\u00e9s siga m\u00e9s r\u00e0pid, estandarditzat i consistent amb altres eines de desenvolupament.</p> <p>Aix\u00f2 ens obliga a que, si volem personalitzar aquest nom, ho h\u00e0gem de fer de manera manual despr\u00e9s de la inicialitzaci\u00f3.</p> <p>Aix\u00ed, per tal de canviar el nom del paquet de manera consistent, haurem de:</p> <ul> <li>Canviar l'estructura de la carpeta <code>org/example</code>, ubicada en <code>app/src/main/java</code>.</li> <li>Canviar l'estructura de la carpeta <code>org/example</code> dins la carpeta de tests en <code>app/src/test/java</code>.</li> <li>Canviar el nom dels packages i refer\u00e8ncies a tots els fonts Java.</li> <li>Canviar la propietat <code>mainClass</code> del fitxer <code>build.gradle</code> perqu\u00e8 fa\u00e7a refer\u00e8ncia al paquet generat.</li> </ul> <p>Aix\u00ed doncs, per reempla\u00e7ar el nom del paquet predeterminat <code>org.example</code> per <code>com.ieseljust.edd</code>, farem els seg\u00fcents pasos:</p> <ol> <li>Creem l'estructura de carpetes <code>com/ieseljust/edd</code> dins la carpeta <code>app/src/main/java</code>. Si estem a l'arrel del projecte, podem fer:</li> </ol> <pre><code>$ mkdir -p app/src/main/java/com/ieseljust/edd\n</code></pre> <ol> <li>Creem l'estructura de carpetes <code>com/ieseljust/edd</code> dins <code>app/src/test</code>:</li> </ol> <pre><code>$ mkdir -p app/src/test/java/com/ieseljust/edd\n</code></pre> <p>Despr\u00e9s d'aix\u00f2 tindrem l'estructura de carpetes de la seg\u00fcent manera dins de app:</p> <pre><code>app/\n\u251c\u2500\u2500 build.gradle\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 main\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 com\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 ieseljust\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 edd\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2514\u2500\u2500 hellogradle\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 org\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 example\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2514\u2500\u2500 App.java\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 resources\n    \u2514\u2500\u2500 test\n        \u251c\u2500\u2500 java\n        \u2502\u00a0\u00a0 \u251c\u2500\u2500 com\n        \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 ieseljust\n        \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 edd\n        \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2514\u2500\u2500 hellogradle\n        \u2502\u00a0\u00a0 \u2514\u2500\u2500 org\n        \u2502\u00a0\u00a0     \u2514\u2500\u2500 example\n        \u2502\u00a0\u00a0         \u2514\u2500\u2500 AppTest.java\n        \u2514\u2500\u2500 resources\n</code></pre> <p>Ens quedar\u00e0 doncs moure els fitxers Java a la nova ubicaci\u00f3 (o crear el codi de nou per a ells si ja volem donar-los una nova funcionalitat):</p> <pre><code>$ mv app/src/main/java/org/example/App.java app/src/main/java/com/ieseljust/edd/hellogradle\n</code></pre> <pre><code>$ mv app/src/test/java/org/example/AppTest.java app/src/test/java/com/ieseljust/edd/hellogradle\n</code></pre> <p>I eliminar la carpeta <code>org.example</code> (assegureu-vos abans que no continga res!):</p> <pre><code>$ rm -r app/src/main/java/org\n\n$ rm -r app/src/test/java/org\n</code></pre> <p>Amb aix\u00f2 l'estructura del projecte deu haver quedat:</p> <pre><code>.\n\u251c\u2500\u2500 app\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 build.gradle\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 src\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 main\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 java\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 com\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 ieseljust\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2514\u2500\u2500 edd\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2514\u2500\u2500 App.java\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 resources\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 test\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 java\n\u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u2514\u2500\u2500 com\n\u2502\u00a0\u00a0         \u2502\u00a0\u00a0     \u2514\u2500\u2500 ieseljust\n\u2502\u00a0\u00a0         \u2502\u00a0\u00a0         \u2514\u2500\u2500 edd\n\u2502\u00a0\u00a0         \u2502\u00a0\u00a0             \u2514\u2500\u2500 AppTest.java\n\u2502\u00a0\u00a0         \u2514\u2500\u2500 resources\n\u251c\u2500\u2500 gradle\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 libs.versions.toml\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 wrapper\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 gradle-wrapper.jar\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 gradle-wrapper.properties\n\u251c\u2500\u2500 gradle.properties\n\u251c\u2500\u2500 gradlew\n\u251c\u2500\u2500 gradlew.bat\n\u2514\u2500\u2500 settings.gradle\n</code></pre> <ol> <li>Canviem el nom dels packages i refer\u00e8ncies a tots els fonts Java.</li> </ol> <p>Per a aix\u00f2, editem els fitxers <code>App.java</code> i <code>AppTest.java</code>, i reemplacem la l\u00ednia:</p> <pre><code>package org.example;\n</code></pre> <p>Per:</p> <pre><code>package com.ieseljust.edd.hellogradle;\n</code></pre> <ol> <li>I finalment, ens queda ajustar la propietat <code>mainClass</code> del fitxer <code>build.gradle</code>.</li> </ol> <p>Per a aix\u00f2, editem aquest fitxer i busquem la l\u00ednia:</p> <pre><code>application {\n    // Define the main class for the application.\n    mainClass = 'org.example.App'\n}\n</code></pre> <p>I la reemplacem per:</p> <pre><code>application {\n    // Define the main class for the application.\n    mainClass = 'com.ieseljust.edd.hellogradle.App'\n}\n</code></pre>"},{"location":"6.gradle/#construccio-i-execucio-del-projecte","title":"Construcci\u00f3 i execuci\u00f3 del projecte","text":"<p>Una vegada hem modificat l'estructura d'un projecte, podem construir-lo amb l'ordre <code>gradle build</code>, des de la carpeta principal del projecte.</p> <p>Si ho hem fet tot correctament, tindrem una eixida semblant a la seg\u00fcent:</p> <pre><code> gradle build\nCalculating task graph as no cached configuration is available for tasks: build\n\nBUILD SUCCESSFUL in 5s\n7 actionable tasks: 7 executed\nConfiguration cache entry stored.\n</code></pre> <p>Amb aix\u00f2, compila, processa els recursos i genera les classes i l'empaquetat jar de l'aplicaci\u00f3.</p> <p>L'estructura del nostre projecte haur\u00e0 crescut considerablement, i trobem nous directoris i fitxers:</p> <ul> <li><code>app/build/</code>, cont\u00e9 tot el que Gradle genera durant el proc\u00e9s de construcci\u00f3:</li> <li><code>classes/</code>: Cont\u00e9 els fitxers <code>.class</code> amb el bytecode generat a partir del codi font i dels tests.</li> <li><code>distributions/</code>: Cont\u00e9 els arxius empaquetats del projecte <code>app.tar</code> i <code>app.zip</code>, necessaris pe distribuir l'aplicaci\u00f3.</li> <li><code>generated/</code>: Cont\u00e9 fitxers que s'han generat autom\u00e0ticament, com podrien ser fonts derivades de processadors d\u2019anotacions o headers, si n'hi ha.</li> <li><code>libs/</code>: Cont\u00e9 el fitxer <code>.jar</code> de l'empaquetat del projecte, amb el codi executable i els recursos de l'aplicaci\u00f3.</li> <li><code>reports/</code>:, amb els informes generats durant l'execuci\u00f3 del build i dels tests.</li> <li><code>scripts/</code>: Amb els scripts generats pe a l'execuci\u00f3 de l'aplicaci\u00f3 <code>app</code> i <code>app.bat</code> per a Unix/Linux i Windows.</li> </ul> <p>Tamb\u00e9 s'inclouen altres directoris com <code>test-results</code> amb els resultat en brut dels tets, <code>binary</code> amb els binaris dels tests, el directori temporal <code>tmp/</code> utilitzat per GRadle durant la compilaci\u00f3 o el fitxer <code>Manifest</code> utilitzat per al jar, entre altres.</p> <p>Fases de construcci\u00f3</p> <p>Si volem veure les diferents fases per les quals passa la construcci\u00f3 de l'aplicaci\u00f3, podem utilitzar l'opci\u00f3 <code>-i</code> de Gradle: </p> <pre><code>$ gradle build -i\n</code></pre> <p>O b\u00e9, amb el wrapper:</p> <pre><code>./*gradlew build -i \n</code></pre> <p>Podeu provar a llan\u00e7ar l'ordre i identificar les diferents fases per les quals es passa en el projecte de construcci\u00f3: compilaci\u00f3 dels fonts, incorporaci\u00f3 dels recursos, creaci\u00f3 de classes, empaquetat jar, generaci\u00f3 d'scripts i arxiud distribu\u00efbles, compilaci\u00f3, etc</p>"},{"location":"6.gradle/#neteja-del-projecte","title":"Neteja del projecte","text":"<p>D'altra banda, si volem netejar el projecte, eliminant la carpeta <code>build</code>, utilitzarem l'ordre <code>clean</code> de *Gradle:</p> <p><pre><code>$ gradle clean \n</code></pre> o b\u00e9 mitjan\u00e7ant el wrapper:</p> <pre><code>$ ./gradlew clean \n</code></pre>"},{"location":"6.gradle/#execucio","title":"Execuci\u00f3","text":"<p>Finalment, per tal d'executar l'aplicaci\u00f3, haurem d'invocar l'ordre <code>run</code> de <code>gradle</code> o del wrapper <code>gradlew</code>.</p> <pre><code>$ gradle run\nCalculating task graph as no cached configuration is available for tasks: run\n\n&gt; Task :app:run\nHello World!\n\nBUILD SUCCESSFUL in 1s\n2 actionable tasks: 2 executed\nConfiguration cache entry stored.\n</code></pre> <p>Pas d'arguments</p> <p>Si intentem incorporar arguments a la l\u00ednia d'execuci\u00f3 del <code>gradle run</code>, veurem que ens llan\u00e7a un error, ja que l'ordre que estem executant \u00e9s <code>gradle</code>, i no <code>java</code>. Per tal de passar els arguments a la nostra aplicaci\u00f3 java, a trav\u00e9s de <code>gradle</code> haurem d'indicar-los amb l'argument <code>--args</code> de gradle.</p> <pre><code>$ gradle run --args=\"arguments\" \n</code></pre>"},{"location":"6.gradle/#gradle-i-visual-studio-code","title":"Gradle i Visual Studio Code","text":"<p>En Visual Studio Code disposem del complement Gradle Extension Pack, que es compon de les extensions Gradle Language support, amb suport a la sintaxi de Gradle i ajuda a la generaci\u00f3 de l'arxiu, aix\u00ed com de Gradle Tasks, que ens permet executar les diferents tasques.</p> <p>Per a instal\u00b7lar l'exstensi\u00f3, nom\u00e9s haurem de buscar-la en l'activitat d'extensions i fer clic en el bot\u00f3 d'Install.</p> <p>Una vegada instal\u00b7lades, l'extensi\u00f3 Gradle Language Support ens permetr\u00e0 ressaltar la sintaxi dels scripts de construcci\u00f3, a m\u00e9s d'aportar suggeriments i detectar duplicats. Per la seua part, Gradle Tasks ens mostrar\u00e0 una nova activitat en la interf\u00edcie de Visual Studio Code, des de la qual podrem veure en forma d'arbre i llan\u00e7ar totes les tasques relacionades amb el projecte.</p>"},{"location":"Cas_Practic_Ampliat_5_Maven_Complet/","title":"Cas Practic Ampliat 5 Maven Complet","text":""},{"location":"Cas_Practic_Ampliat_5_Maven_Complet/#cas-practic-ampliat-5-maven","title":"Cas Pr\u00e0ctic Ampliat 5: Maven","text":""},{"location":"Cas_Practic_Ampliat_5_Maven_Complet/#introduccio","title":"Introducci\u00f3","text":"<p>En aquest cas pr\u00e0ctic treballarem amb Maven, una eina essencial per a la construcci\u00f3 d'aplicacions, gesti\u00f3 de depend\u00e8ncies i distribuci\u00f3. Apliquem els conceptes te\u00f2rics a un projecte pr\u00e0ctic, aprenent a crear, configurar, compilar i empaquetar un projecte.</p>"},{"location":"Cas_Practic_Ampliat_5_Maven_Complet/#installacio-de-maven","title":"Instal\u00b7laci\u00f3 de Maven","text":""},{"location":"Cas_Practic_Ampliat_5_Maven_Complet/#en-ubuntu","title":"En Ubuntu","text":"<ol> <li> <p>Actualitzem la llista de paquets:     <pre><code>sudo apt update\n</code></pre></p> </li> <li> <p>Instal\u00b7lem Maven:     <pre><code>sudo apt install maven\n</code></pre></p> </li> <li> <p>Verifiquem la instal\u00b7laci\u00f3:     <pre><code>mvn --version\n</code></pre></p> <p>Exemple de sortida: <pre><code>Apache Maven 3.6.3\nMaven home: /usr/share/maven\nJava version: 11.0.11\nOS name: \"linux\"\n</code></pre></p> </li> </ol>"},{"location":"Cas_Practic_Ampliat_5_Maven_Complet/#en-windows","title":"En Windows","text":"<p>Consulta l'Annex I del document per obtenir instruccions detallades sobre la instal\u00b7laci\u00f3 de Maven en Windows 10.</p>"},{"location":"Cas_Practic_Ampliat_5_Maven_Complet/#creacio-del-projecte","title":"Creaci\u00f3 del projecte","text":""},{"location":"Cas_Practic_Ampliat_5_Maven_Complet/#utilitzant-maven-archetypes","title":"Utilitzant Maven Archetypes","text":"<ol> <li> <p>Situa't al directori on vols crear el projecte i executa:     <pre><code>mvn archetype:generate -DgroupId=com.mgh.edd -DartifactId=saludaMaven     -DarchetypeArtifactId=maven-archetype-quickstart -DarchetypeVersion=1.4 -DinteractiveMode=false\n</code></pre></p> <p>Explicaci\u00f3 dels par\u00e0metres: - groupId: Identificador \u00fanic de l'organitzaci\u00f3 (ex. <code>com.mgh.edd</code>). - artifactId: Nom del projecte (ex. <code>saludaMaven</code>). - archetypeArtifactId: Especifica l'arquetip base.</p> </li> <li> <p>Afegeix els fitxers <code>Hola.java</code> i <code>Saluda.java</code> al directori del projecte:     <pre><code>cp {carpeta_saludaBase}/src/com/mgh/edd/*.java saludaMaven/src/main/java/com/mgh/edd/\n</code></pre></p> </li> <li> <p>Elimina el fitxer <code>App.java</code>:     <pre><code>rm saludaMaven/src/main/java/com/mgh/edd/App.java\n</code></pre></p> </li> </ol> <p>Estructura del directori resultant: <pre><code>saludaMaven/src/main/java/\n\u2514\u2500\u2500 com\n    \u2514\u2500\u2500 mgh\n        \u2514\u2500\u2500 edd\n            \u251c\u2500\u2500 Hola.java\n            \u2514\u2500\u2500 Saluda.java\n</code></pre></p>"},{"location":"Cas_Practic_Ampliat_5_Maven_Complet/#configuracio-del-pomxml","title":"Configuraci\u00f3 del <code>pom.xml</code>","text":"<p>Modifiquem el fitxer <code>pom.xml</code> per indicar la classe principal al generar l'empaquetat. Afegeix al plugin <code>maven-jar-plugin</code>: <pre><code>&lt;plugin&gt;\n    &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;\n    &lt;version&gt;3.0.2&lt;/version&gt;\n    &lt;configuration&gt;\n        &lt;archive&gt;\n            &lt;manifest&gt;\n                &lt;addClasspath&gt;true&lt;/addClasspath&gt;\n                &lt;mainClass&gt;com.mgh.edd.Hola&lt;/mainClass&gt;\n            &lt;/manifest&gt;\n        &lt;/archive&gt;\n    &lt;/configuration&gt;\n&lt;/plugin&gt;\n</code></pre></p>"},{"location":"Cas_Practic_Ampliat_5_Maven_Complet/#construccio-i-execucio","title":"Construcci\u00f3 i execuci\u00f3","text":"<ol> <li> <p>Compilaci\u00f3 del projecte:     <pre><code>mvn compile\n</code></pre></p> </li> <li> <p>Execuci\u00f3 de l'aplicaci\u00f3 (amb arguments):     <pre><code>java -cp target/classes com.mgh.edd.Hola Josep\n</code></pre>     Sortida esperada:     <pre><code>Hola Josep\n</code></pre></p> </li> <li> <p>Empaquetament en un arxiu JAR:     <pre><code>mvn package\n</code></pre></p> </li> <li> <p>Execuci\u00f3 del JAR:     <pre><code>java -jar target/saludaMaven-1.0-SNAPSHOT.jar Josep\n</code></pre></p> </li> </ol>"},{"location":"Cas_Practic_Ampliat_5_Maven_Complet/#observacions-finals","title":"Observacions finals","text":"<ul> <li>\u00c9s fonamental garantir que Maven i Java estan correctament configurats.</li> <li>Sempre \u00e9s recomanable revisar el fitxer <code>pom.xml</code> per assegurar que les depend\u00e8ncies i plugins s\u00f3n actualitzats.</li> </ul>"},{"location":"Cas_Practic_Ampliat_6_Gradle_Complet/","title":"Cas Practic Ampliat 6 Gradle Complet","text":""},{"location":"Cas_Practic_Ampliat_6_Gradle_Complet/#cas-practic-ampliat-6-gradle","title":"Cas Pr\u00e0ctic Ampliat 6: Gradle","text":""},{"location":"Cas_Practic_Ampliat_6_Gradle_Complet/#introduccio","title":"Introducci\u00f3","text":"<p>Gradle \u00e9s una eina moderna que combina la flexibilitat d'Ant amb les capacitats de cicle de vida i proves de Maven. Aquest cas pr\u00e0ctic mostra com utilitzar Gradle per gestionar un projecte, des de la seva creaci\u00f3 fins a l'execuci\u00f3.</p>"},{"location":"Cas_Practic_Ampliat_6_Gradle_Complet/#installacio","title":"Instal\u00b7laci\u00f3","text":""},{"location":"Cas_Practic_Ampliat_6_Gradle_Complet/#descarrega-i-configuracio-manual","title":"Desc\u00e0rrega i configuraci\u00f3 manual","text":"<ol> <li> <p>Descarregar Gradle des de la seva p\u00e0gina oficial:</p> <ul> <li>https://gradle.org/install</li> <li>Selecciona nom\u00e9s els binaris (<code>gradle-&lt;versi\u00f3&gt;-bin.zip</code>).</li> </ul> </li> <li> <p>Descomprimir l'arxiu i moure'l al directori d'instal\u00b7laci\u00f3:     <pre><code>unzip gradle-&lt;versi\u00f3&gt;-bin.zip\nsudo mv gradle-&lt;versi\u00f3&gt; /opt/\n</code></pre></p> </li> <li> <p>Afegir Gradle al PATH:     <pre><code>export PATH=$PATH:/opt/gradle-&lt;versi\u00f3&gt;/bin\n</code></pre></p> </li> <li> <p>Comprovar la instal\u00b7laci\u00f3:     <pre><code>gradle -v\n</code></pre></p> </li> </ol>"},{"location":"Cas_Practic_Ampliat_6_Gradle_Complet/#creacio-del-projecte","title":"Creaci\u00f3 del projecte","text":""},{"location":"Cas_Practic_Ampliat_6_Gradle_Complet/#utilitzacio-de-gradle-init","title":"Utilitzaci\u00f3 de Gradle Init","text":"<ol> <li> <p>Crea una carpeta per al projecte:     <pre><code>mkdir HelloGradle &amp;&amp; cd HelloGradle\n</code></pre></p> </li> <li> <p>Executa el comandament d'inicialitzaci\u00f3:     <pre><code>gradle init\n</code></pre></p> </li> </ol> <p>Selecciona les opcions seg\u00fcents durant l'assistent: - Tipus de projecte: Application - Llenguatge: Java - Subprojectes: No - DSL: Groovy - Framework de proves: JUnit 4</p> <p>Estructura generada: <pre><code>HelloGradle/\n\u251c\u2500\u2500 app/\n\u2502   \u251c\u2500\u2500 build.gradle\n\u2502   \u251c\u2500\u2500 src/\n\u2502   \u2502   \u251c\u2500\u2500 main/\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 java/com/example/App.java\n\u2502   \u2502   \u2514\u2500\u2500 test/\n\u2502   \u2502       \u2514\u2500\u2500 java/com/example/AppTest.java\n\u251c\u2500\u2500 settings.gradle\n\u2514\u2500\u2500 build.gradle\n</code></pre></p>"},{"location":"Cas_Practic_Ampliat_6_Gradle_Complet/#configuracio-de-buildgradle","title":"Configuraci\u00f3 de <code>build.gradle</code>","text":"<p>Modifica el fitxer <code>app/build.gradle</code> per afegir configuracions personalitzades: <pre><code>plugins {\n    id 'application'\n}\nrepositories {\n    mavenCentral()\n}\ndependencies {\n    implementation 'com.google.guava:guava:30.1.1-jre'\n    testImplementation 'junit:junit:4.13.2'\n}\napplication {\n    mainClass = 'com.mgh.edd.Hola'\n}\n</code></pre></p>"},{"location":"Cas_Practic_Ampliat_6_Gradle_Complet/#construccio-i-execucio","title":"Construcci\u00f3 i execuci\u00f3","text":"<ol> <li> <p>Construir el projecte:     <pre><code>gradle build\n</code></pre></p> </li> <li> <p>Executar l'aplicaci\u00f3:     <pre><code>gradle run --args=\"Josep\"\n</code></pre>     Sortida esperada:     <pre><code>Hola Josep\n</code></pre></p> </li> <li> <p>Netejar el projecte (elimina <code>build/</code>):     <pre><code>gradle clean\n</code></pre></p> </li> <li> <p>Utilitzar el wrapper de Gradle:     <pre><code>./gradlew build\n./gradlew run\n</code></pre></p> </li> </ol>"},{"location":"Cas_Practic_Ampliat_6_Gradle_Complet/#observacions-finals","title":"Observacions finals","text":"<ul> <li>Versi\u00f3 de Gradle: Es recomana utilitzar la versi\u00f3 m\u00e9s recent compatible amb el projecte.</li> <li>Resoluci\u00f3 d'errors de proves: Si es produeixen errors en <code>AppTest.java</code>, es pot eliminar el directori <code>src/test</code>.</li> <li>Eines de suport: Extensions com Gradle Extension Pack per a VSCode faciliten la gesti\u00f3 de projectes Gradle.</li> </ul>"},{"location":"sdkman/","title":"Sdkman","text":"<p>web</p> <p>https://sdkman.io/</p> <p>desc\u00e0rrega (sense root)</p> <p>curl -s \"https://get.sdkman.io\" | bash</p> <p>despr\u00e9s cal fer source:</p> <p>source \"/home/joamuran/.sdkman/bin/sdkman-init.sh\"</p> <p>No t\u00e9 netbeans...</p>"}]}